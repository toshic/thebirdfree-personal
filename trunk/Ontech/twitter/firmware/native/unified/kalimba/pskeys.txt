PSKEYS.TXT
==========

Stack version:  0x1896 bc3k_8unified_fl_bt2.1_23h_0908261702_native_encr56 2009-08-26

This file describes the firmware's pskeys.  (This single file replaces
the files user_keys.txt, developer_keys.txt and csr_keys.txt provided
with previous builds.)


==============================================================================
NAME
	PSKEY_BDADDR (0x0001)

SUMMARY
	Bluetooth address

TYPE
	bdaddr

DEFAULT VALUE
	{ 0x00A5A5, 0x5b, 0x0002 }

DESCRIPTION
	The local device's Bluetooth address.  This should be unique to this
	device - allocated during manufacturing.
	
	The type bdaddr can be viewed as a uint16[4] array:
	
	        1st uint16:     The top 8 bits of the LAP are in the bottom 8
	                        bits of this word. The top 8 bits of this word
	                        must be zero.
	        2nd uint16:     lower 16 bits of the LAP
	        3rd uint16:     The 8 bit UAP is in the bottom 8 bits of this
	                        word. The top 8 bits of this word must be
	                        zero.
	        4th uint16:     16 bit NAP
	
	For example, the Bluetooth address 123456789abc is encoded as 0078,
	9abc, 0056, 1234.
	
	The default value of this key is one of CSR's legal addresses:
	00025b00a5a5.
	
	As stated in the Bluetooth specification, LAP values from 9e8b00 up
	to, and including, 9e8b3f must not be used as this range is reserved
	for inquiry access codes (IACs).
	
	Bluetooth module manufacturers must obtain their own block of
	addresses from the Bluetooth SIG/IEEE.  If CSR's experience is
	typical, these authorities define the NAP and UAP, allowing
	manufacturers to set the 24 bit LAP.

==============================================================================
NAME
	PSKEY_COUNTRYCODE (0x0002)

SUMMARY
	Country code

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	North America and most of Europe use a particular block of 79
	radio frequencies for Bluetooth, but not all countries allow use
	of these frequencies.  Some countries allow the use of different
	blocks of frequencies.  This key selects the frequency blocks used
	by these exceptional countries.
	
	Over time most countries are adopting the default 79 frequency block,
	so the need for this value is diminishing.  At the time of writing
	this comment it is expected that France, Spain and Japan will use
	the default frequency block by January 2001.
	
	        0   North America and Europe, except ...
	        1   France
	        2   Spain
	        3   Japan

==============================================================================
NAME
	PSKEY_CLASSOFDEVICE (0x0003)

SUMMARY
	Class of device

TYPE
	bdcod

DEFAULT VALUE
	(0)

DESCRIPTION
	The local device's default Bluetooth "class of Device" or CoD.
	
	Type bdcod is really a uint32.  The class of device is a 24 bit
	value stored in a uint32; the highest byte must be zero.
	
	This is the device's default class of device, used when the device
	boots.  The device's class of device may subsequently be changed by
	an HCI command.  The HCI command does not change the value stored
	under this pskey.
	
	The least significant two bits reveal the format of the other 22
	bits.  The only format currently defined is for where the two
	bits are zero:
	
	Bits      Content
	 1 -  0   Format Type (0)
	 2 -  7   Minor Dev Class (in the context of the Major Dev Class)
	 8 - 12   Major Dev Class
	13 - 23   Major Service Class
	
	At the time of writing this comment the firmware makes no use of
	this knowledge.

==============================================================================
NAME
	PSKEY_DEVICE_DRIFT (0x0004)

SUMMARY
	Device drift

TYPE
	uint16

DEFAULT VALUE
	(250)

DESCRIPTION
	This should hold the local device's radio drift in parts
	per million.  The maximum value allowed by the Bluetooth specification
	is 250.
	
	This value is used in LMP_timing_accuracy_res messages sent to
	peers, as described in Bluetooth version 1.1, LMP specification,
	section 5.2.  It is also used in calculations in low power modes
	to decide for how long the radio on a slave device must be turned on
	in order to resynchronise with a remote master: reducing the value
	therefore allows power saving.
	
	The default value is appropriate when BlueCore's internal low power
	oscillator is in use to maintain timing during low power modes i.e.  
	for the default setting of PSKEY_DEEP_SLEEP_STATE
	(DEEP_SLEEP_ALWAYS, value 1) and PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK
	(FALSE). The appropriate values for the various settings of these
	PSKEYs are given below. 
	
	PSKEY_DEEP_SLEEP_STATE = NEVER or INACTIVE (0 or 2): set device drift
	to 20 ppm to reflect full Bluetooth clock accuracy.
	
	PSKEY_DEEP_SLEEP_STATE = ALWAYS (1): if
	PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK is FALSE, set device drift to 250
	ppm (this is the default case). If an external clock is in use, set
	device drift to the accuracy of that external clock.
	
	PSKEY_DEEP_SLEEP_STATE = ALWAYS_ACCURATE (3):
	PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK should be TRUE, so set device
	drift to the accuracy of the external clock.
	

==============================================================================
NAME
	PSKEY_DEVICE_JITTER (0x0005)

SUMMARY
	Device jitter

TYPE
	uint16

DEFAULT VALUE
	(10)

DESCRIPTION
	This should hold the local device's radio jitter in microseconds.
	(LMP v1.1, section 5.2.)
	
	This value is used in LMP_timing_accuracy_res messages sent to
	peers.  This is the only use made of this pskey.

==============================================================================
NAME
	PSKEY_MAX_ACLS (0x000d)

SUMMARY
	Maximum ACL links

TYPE
	uint16

DEFAULT VALUE
	MAX_NUM_ACLS

DESCRIPTION
	The maximum number of concurrent ACL connections to other devices.
	
	Links to remote devices use substantial amounts of RAM to maintain
	connection state, so this value should be kept modest.  It is
	advisable to trim this value to match the application, allowing any
	liberated RAM to be used elsewhere.  The value must be reduced
	if the chip is running any of the higher layers of the Bluetooth
	stack as these take from the common supply of RAM.
	
	On 23h and later firmware, reducing this key can allow the malloc
	space freed up to be put into larger pools for VM applications. See
	the descriptions of PSKEY_PMALLOC_PER_ACL and PSKEY_PMALLOC_BASE for
	more information. (This key has no direct effect on malloc usage for
	earlier firmware.)

==============================================================================
NAME
	PSKEY_MAX_SCOS (0x000e)

SUMMARY
	Maximum SCO links

TYPE
	uint16

DEFAULT VALUE
	MAX_NUM_SCOS

DESCRIPTION
	The maximum number of SCO links to (all) other devices.
	
	The firmware may use a value lower than 3, e.g., because
	SCO data can only flow over the BlueCore01b's single PCM interface.
	
	On 23h and later firmware, reducing this key can allow the malloc
	space freed up to be put into larger pools for VM applications. See
	the descriptions of PSKEY_PMALLOC_PER_SCO and PSKEY_PMALLOC_BASE for
	more information. (This key has no direct effect on malloc usage for
	earlier firmware.)

==============================================================================
NAME
	PSKEY_MAX_REMOTE_MASTERS (0x000f)

SUMMARY
	Maximum remote masters

TYPE
	uint16

DEFAULT VALUE
	(2)

DESCRIPTION
	The local device's maximum number of remote piconet masters.
	
	Connecting to multiple remote masters implies the use of scatternets.
	The current firmware supports one permanent remote master, plus a
	second remote master in a temporary state either for performing a
	remote name request or in order to connect by a role switch to become
	a slave.
	
	See the description of PSKEY_ENABLE_MASTERY_WITH_SLAVERY.

==============================================================================
NAME
	PSKEY_ENABLE_MASTERY_WITH_SLAVERY (0x0010)

SUMMARY
	Support master and slave roles simultaneously

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	If set TRUE (value 1) then the firmware is configured to support
	being a master of its own piconet at the same time as being a slave
	in one or more other piconets.  This implies the use of scatternets.
	
	This value is constrained by the value of the pskey
	PSKEY_MAX_REMOTE_MASTERS.
	
	The "barge-in" connection sequence (an existing master page-scans,
	it is paged by new a device, then the new device's link performs
	a master/slave switch) implies a temporary scatternet.  This pskey
	does not affect this behaviour.
	
	See the description of PSKEY_MAX_REMOTE_MASTERS.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_H_HC_FC_MAX_ACL_PKT_LEN (0x0011)

SUMMARY
	Maximum HCI ACL packet length

TYPE
	uint16

DEFAULT VALUE
	(192)

DESCRIPTION
	The maximum acceptable length, in bytes, of the data portion of HCI
	ACL data packets received from the host.  This supports the
	HCI_Read_Buffer_Size HCI command.
	
	It sometimes makes sense to tune this value to obtain better
	device throughput, but the product of the values of this key and
	of PSKEY_H_HC_FC_MAX_ACL_PKTS should be kept constant as this
	effectively reserves a block of the device's precious RAM for use
	by the host.

==============================================================================
NAME
	PSKEY_H_HC_FC_MAX_SCO_PKT_LEN (0x0012)

SUMMARY
	Maximum HCI SCO packet length

TYPE
	uint8

DEFAULT VALUE
	(64)

DESCRIPTION
	The maximum acceptable length, in bytes, of the data portion of HCI
	SCO data packets received from the host.  This supports the
	HCI_Read_Buffer_Size HCI command.
	
	It sometimes makes sense to tune this value to obtain better device
	throughput, but the product of the values of this key and of
	PSKEY_H_HC_FC_MAX_SCO_PKTS should be kept constant as this
	effectively reserves a block of the device's precious RAM for use
	by the host.
	
	This value should be changed only with great care: small values
	will heavily load the (host and) chip processor(s), whereas large
	values will normally increase audio latency.

==============================================================================
NAME
	PSKEY_H_HC_FC_MAX_ACL_PKTS (0x0013)

SUMMARY
	Maximum number of HCI ACL packets

TYPE
	uint16

DEFAULT VALUE
	(8)

DESCRIPTION
	The maximum number of HCI ACL data packets being sent to air that
	can be held within the chip at any time.
	
	This supports the HCI_Read_Buffer_Size HCI command.
	
	See the description of PSKEY_H_HC_FC_MAX_ACL_PKT_LEN.

==============================================================================
NAME
	PSKEY_H_HC_FC_MAX_SCO_PKTS (0x0014)

SUMMARY
	Maximum number of HCI SCO packets

TYPE
	uint16

DEFAULT VALUE
	(8)

DESCRIPTION
	The maximum number of HCI SCO data packets being sent to air that
	can be held within the chip at any time.
	
	This supports the HCI_Read_Buffer_Size HCI command.
	
	See the description of PSKEY_H_HC_FC_MAX_SCO_PKT_LEN.

==============================================================================
NAME
	PSKEY_LC_FC_BUFFER_LOW_WATER_MARK (0x0015)

SUMMARY
	Flow control low water mark

TYPE
	lc_fc_lwm

DEFAULT VALUE
	{0x0600, 0x0700, 0x0800}

DESCRIPTION
	A set of values that control the assertion of flow control for data
	received from air.
	
	The LC determines how much buffer memory has been promised to
	the host for host to air traffic, then it adds the safety margins
	set by this key and compares the result with the available free
	buffer memory.  The result determines when and how the LC applies
	flow control for data received from air.
	
	The key holds an array of three values.  Each value sets a behaviour
	threshold, measured in a number of bytes:
	
	        0) Received data is discarded and a NAK is returned.
	        1) ACL flow control is asserted.
	        2) L2CAP flow control is asserted.
	
	Buffalo water mark?

==============================================================================
NAME
	PSKEY_LC_MAX_TX_POWER (0x0017)

SUMMARY
	Maximum transmit power

TYPE
	int16

DEFAULT VALUE
	(3)

DESCRIPTION
	The device's maximum transmit power in dBm.
	
	The firmware ensures the device never speaks more loudly that this
	value.
	
	The firmware uses the highest value in the power table that is less
	than or equal to the requested default power.
	
	Correct operation depends having a valid power table - see
	PSKEY_LC_POWER_TABLE.
	
	The maximum value depends on the Bluetooth module class:
	
	        Class 1:  0  to +20 dBm.
	        Class 2:  -6 to +4  dBm.
	        Class 3:  up to 0   dBm.
	
	Unlike most pskey values, this is a *signed* 16 bit integer.

==============================================================================
NAME
	PSKEY_TX_GAIN_RAMP (0x001d)

SUMMARY
	Transmit gain ramp rate

TYPE
	uint16

DEFAULT VALUE
	(0x3010)

DESCRIPTION
	The device's transmitter gain ramp rate.  This controls the power
	ramp-up at the start of a packet and ramp-down at end of a packet.
	
	It is recommended that this value is not modified from the default.
	
	Bits 0-7 control the ramp rate, the normal range being between 0x04
	and 0x3F.  Values below 0x04 are out of spec and must not be used.
	
	Bits 8-15 control the length of the unmodulated carrier between the 
	end of the ramp and the start of the packet in microseconds.
	
	The ramp rate value has different effects according to whether the 
	module uses the chip's internal power amplifier or an external 
	amplifier. (See PSKEY_TXRX_PIO_CONTROL.)
	
	If the internal power amplifier is ramped then the microseconds taken
	to complete the ramp is 
	   (4*amplifier_setting)/ramp_rate.
	
	If an external power amplifier is ramped then the microseconds taken
	to complete the ramp is 
	   (amplifier_setting)/ramp_rate
	
	In both cases amplifier_setting is taken from the power table 
	PSKEY_LC_ENHANCED_POWER_TABLE (PSKEY_LC_POWER_TABLE on older BlueCore
	devices where EDR is not supported).
	
	The total time controlled by this PS key is
	    ramp_time (calculated as above) + unmodulated_carrier_time

==============================================================================
NAME
	PSKEY_LC_POWER_TABLE (0x001e)

SUMMARY
	Radio power table

TYPE
	power_setting[]

DEFAULT VALUE
	{{ 14, 0, -20, 0, 0}, {19, 0, -16, 0, 0}, 
		 {24, 0, -12, 0, 0},  {31, 0, -8, 0, 0}, 
		 {39, 0, -4, 0, 0},  {47, 0, 0, 0, 0}, 
	         {54, 0, 3, 0, 0},  {63, 0, 6, 0, 0}}

DESCRIPTION
	The chip has an internal power amplifier (PA); this has a gain
	control.  Some module designs also have an external PA; this may have
	a gain control.
	
	The power table stored under this pskey provides a mapping between
	the two PAs' gain settings and the corresponding transmit power.
	This table is basis of all of the firmware's transmit power control:
	LMP dynamic power control, PSKEY_LC_MAX_TX_POWER,
	PSKEY_LC_DEFAULT_TX_POWER, etc.
	
	This table is used when the Bluetooth 2.0 Enhanced Data Rate
	specification is not supported.  Firmware which supports EDR uses
	PSKEY_LC_ENHANCED_POWER_TABLE instead.  The two tables are mutually
	exclusive.
	
	In addition to the description here, see the document "Power Table 
	Construction" document number bcore-an-052p on the CSR support website.
	
	Every module design must have an appropriate power table.  The
	default value suits the CSR Casira hardware; this is not suitable
	for other module designs.
	
	The pskey's value is an array of "power_setting" types.  The array's
	length is not fixed; typically an array is between 1 and 10 elements
	long.
	
	Each array element (of type "power_setting") holds three bytes within
	two uint16s:
	
		1st uint16, lower byte: uint8 external_pa
		1st uint16, upper byte: uint8 internal_pa
		2nd uint16, lower byte: 0
		2nd uint16, upper byte: int8  tx dBm
	
	For example, power_setting { 0x0d11, 0xf800 } specifies:
	
		internal amp 13, external amp 17, power output -8 dBm
	
	This says that to produce an output power of -8dBm the internal PA
	should be set to 13 and the external PA should be set to 17.
	
	A power table is a list of these entries.  The entries must be in
	ascending order of transmit power.
	
	If the table contains only one entry (two uint16s) then the
	firmware always uses these settings.
	
	The firmware responds to peer requests to increase/decrease transmit
	power by stepping up and down this table.  The Bluetooth spec.
	constrains the sizes and number of steps, which in turn bounds the
	size and content of the power table.
	
	See PSKEY_TXRX_PIO_CONTROL to see how the chip's TX_PWR pin controls
	an external PA.
	
	The current Casira design has a fixed-gain external PA; its TX_PWR is
	not connected to the PA.  The default power table thus always has
	external_pa set to zero.
	
	See PSKEY_LC_ENHANCED_POWER_TABLE, PSKEY_LC_MAX_TX_POWER,
	PSKEY_LC_DEFAULT_TX_POWER, PSKEY_LOCAL_SUPPORTED_FEATURES and
	PSKEY_TXRX_PIO_CONTROL.

==============================================================================
NAME
	PSKEY_LC_FC_POOLS_LOW_WATER_MARK (0x0020)

SUMMARY
	Flow control pool low water mark

TYPE
	lc_fc_lwm

DEFAULT VALUE
	{0x0014, 0x0018, 0x001a}

DESCRIPTION
	As PSKEY_LC_FC_BUFFER_LOW_WATER_MARK, but describing numbers of
	available pool memory blocks.

==============================================================================
NAME
	PSKEY_LC_DEFAULT_TX_POWER (0x0021)

SUMMARY
	Default transmit power

TYPE
	int16

DEFAULT VALUE
	(4)

DESCRIPTION
	The radio's default transmit power, measured in dBm.  The chip uses
	this for page, inquiry and their scan responses.  This is also the
	power used for new connections.
	
	In 12.X builds the firmware uses the entry in the power table that is
	closest to this pskey's value.  (If the two closest power tables are
	equidistant from this key's value then it is indeterminate which
	power table entry is used.)
	
	In 13.X and later builds the firmware uses the highest value in the
	power table that is less than or equal to the requested default
	power.
	
	Correct operation depends on the the device having a valid power
	table - see PSKEY_LC_POWER_TABLE.

==============================================================================
NAME
	PSKEY_LC_RSSI_GOLDEN_RANGE (0x0022)

SUMMARY
	RSSI at bottom of golden receive range

TYPE
	uint8

DEFAULT VALUE
	(80)

DESCRIPTION
	The RSSI signal used to measure the signal strength relative to
	the golden receive range as defined in section 4.7 of part A of
	the Bluetooth spec.
	
	Pre 19.x builds:
	
	With the attenuator setting specified in
	PSKEY_LC_ATTEN_GOLDEN_RANGE_MINIMUM you should get this RSSI
	reading for a signal at the bottom of the golden receive range.
	With the attenuator setting specified in
	PSKEY_LC_ATTEN_GOLDEN_RANGE_MAXIMUM you should get this RSSI
	reading for a signal at the top of the golden receive range.
	
	Taking this signal above 90 can lead to faulty behaviour.  If a
	-60 dBm signal with an attenuation of 1 gives an RSSI above 90
	then leave this setting at 90 as you have a module with good
	sensitivity.  By leaving this setting at 90 devices you're
	talking to will be able to lower their transmit power and thus
	reduce interference between units.
	
	19.x builds and some 20.x builds:
	
	In builds where PSKEY_LC_ATTEN_GOLDEN_RANGE_MINIMUM and 
	PSKEY_LC_ATTEN_GOLDEN_RANGE_MAXIMUM have been removed, this should
	be the RSSI reading at zero attenuator setting when the received
	power is at the bottom of the golden range. The top of the golden
	range is placed 20 dBm above this.
	
	21.x builds and some 20.x builds:
	
	In builds where PSKEY_PREFERRED_MIN_ATTENUATION exists, with the 
	attenuator setting specified in PSKEY_PREFERRED_MIN_ATTENUATION, you
	should get an RSSI value of PSKEY_LC_RSSI_GOLDEN_RANGE for a signal
	at the bottom of the golden receive range.  The top of the golden
	range is placed 20 dBm above this.

==============================================================================
NAME
	PSKEY_LC_COMBO_DISABLE_PIO_MASK (0x0028)

SUMMARY
	Combo: PIO lines and logic to disable transmit

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	A three-element array of uint16s specifying the use of PIO lines to
	disable non-priority Bluetooth transmissions:
	    { uint16 pio_mask, uint16 pio_invert, uint16 pio_logic }
	
	Bits 0 to 15 of "pio_mask" and "pio_invert" map to PIO0 to PIO15 respectively.
	
	A bit of "pio_mask" set to high enables use of the corresponding PIO
	pin to disable Bluetooth transmit.
	
	A bit of "pio_invert" set to high indicates that the corresponding
	PIO pin is active low instead of active high. 
	
	If the "pio_logic" value is zero then any combination of the PIO lines
	being asserted will disable Bluetooth transmissions (logical OR),
	otherwise all of the specified PIO lines must be asserted to disable
	transmissions (logical AND). 
	
	This PS key is primarily intended for use by IEEE 802.11b combo
	designs. The signalling is used to disable Bluetooth transmissions
	that may degrade 802.11b throughput.
	
	Summary:
	Non-priority Bluetooth transmissions are disabled in accordance with
	the following logic:
	    masked = (PIO ^ pio_invert) & pio_mask 
	    disable = pio_logic ? masked != 0 : masked == pio_mask

==============================================================================
NAME
	PSKEY_LC_COMBO_PRIORITY_PIO_MASK (0x0029)

SUMMARY
	Combo: priority activity PIO lines and logic

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	A two-element array of uint16s specifying the use of PIO lines to
	indicate the occurrence of priority Bluetooth activity (transmit or
	receive):
	    { uint16 pio_mask, uint16 pio_invert } 
	
	Bits 0 to 15 of "pio_mask" and "pio_invert" map to PIO0 to PIO15
	respectively. A bit of "pio_mask" set to high enables driving of the
	corresponding PIO pin to indicate priority activity. A bit of
	"pio_invert" set to high indicates that the corresponding PIO pin is
	active low instead of active high. 
	
	Priority operations will typically include, but may not be limited to,
	the following: 
	    - Inquiry, inquiry scanning and response 
	    - Page, page scanning and response 
	    - Master slave switch 
	    - Park beacons and access windows 
	    - Sniff instants 
	    - Hold instants 
	    - SCO slots 
	    - Broadcast 
	
	This PS key is primarily intended for use by IEEE 802.11b combo
	designs. The signalling is used to disable 802.11b transmissions that
	may otherwise degrade Bluetooth reliability. 
	
	SUMMARY
	The PIO lines are driven in accordance with the following logic: 
	    PIO = (PIO & ~pio_mask) | ((priority ? pio_mask : 0) ^ pio_invert)
	

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_CHANNEL_PIO_BASE (0x002a)

SUMMARY
	Combo: 802.11b channel number base PIO line

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	Set the PIO pins used to obtain the channel number being used by a
	co-located IEEE 802.11b system.  The value of this pskey is the number
	of the PIO line used for the least significant bit of the channel
	number.  The next three PIO lines in sequence are used for the
	remaining bits of the channel number.
	
	When this pskey is not set, no PIO lines are used for this purpose.
	
	This pskey can also be set to the special value of 13 to indicate that
	channel usage information will be provided from an alternative source,
	e.g. via the HCI Set_AFH_Channel_Classification command.
	
	Values above this are reserved for more esoteric or customer specific
	coexistence schemes.
	
	The value on the PIO lines decodes to an 802.11b channel number (with
	centre frequency Fc) as follows:
	
	    Number  Description
	    0000b   802.11b inactive
	    0001b   802.11b channel 1 (Fc = 2.412GHz)
	    0010b   802.11b channel 2 (Fc = 2.417GHz)
	    0011b   802.11b channel 3 (Fc = 2.422GHz)
	    0100b   802.11b channel 4 (Fc = 2.427GHz)
	    0101b   802.11b channel 5 (Fc = 2.432GHz)
	    0110b   802.11b channel 6 (Fc = 2.437GHz)
	    0111b   802.11b channel 7 (Fc = 2.442GHz)
	    1000b   802.11b channel 8 (Fc = 2.447GHz)
	    1001b   802.11b channel 9 (Fc = 2.452GHz)
	    1010b   802.11b channel 10 (Fc = 2.457GHz)
	    1011b   802.11b channel 11 (Fc = 2.462GHz)
	    1100b   802.11b channel 12 (Fc = 2.467GHz)
	    1101b   802.11b channel 13 (Fc = 2.472GHz)
	    1110b   802.11b channel 14 (Fc = 2.484GHz)
	    1111b   Reserved (treated as 0000b)
	
	This pskey is primarily intended for use by IEEE 802.11b combo
	designs.  The signalling is used in combination with
	PSKEY_LC_COMBO_DOT11_BLOCK_CHANNELS to disable non-priority Bluetooth
	transmissions that may otherwise degrade 802.11b throughput.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_BLOCK_CHANNELS (0x002b)

SUMMARY
	Combo: channels to block either side of 802.11b

TYPE
	uint16

DEFAULT VALUE
	(11)

DESCRIPTION
	Set the number of Bluetooth channels to block on either side of an
	IEEE 802.11b channel centre frequency.
	
	The default value of 11 results in 23 channels being blocked:
	    Fc - 11, ..., Fc - 1, Fc, Fc + 1, ..., Fc + 11
	
	This pskey is primarily intended for use by IEEE 802.11b combo
	designs.  The signalling is used in combination with
	PSKEY_LC_COMBO_DOT11_CHANNEL_PIO_BASE to disable non-priority
	Bluetooth transmissions that may otherwise degrade 802.11b throughput.

==============================================================================
NAME
	PSKEY_LC_MAX_TX_POWER_NO_RSSI (0x002d)

SUMMARY
	Maximum transmit power when peer has no RSSI

TYPE
	int8

DEFAULT VALUE
	(4)

DESCRIPTION
	This value is used after a connection is made if it is found that a
	remote device does not support RSSI measurements or the local device
	does not support power control.
	The transmit power is lowered to correspond to the first entry in
	PSKEY_LC_POWER_TABLE whose power in dBm is less than or equal to the
	value of this pskey.
	
	According to the Bluetooth radio specification, a device may only
	transmit to a receiving device that does not support the necessary
	messaging for sending the power control messages
	using the rules for a class 2 or class 3 device, in other
	words with a maximum transmit power of 4 dBm, hence the default value
	for this pskey.  This allows the default transmit power to be raised
	above 4 dBm without violating the specification.

==============================================================================
NAME
	PSKEY_LC_CONNECTION_RX_WINDOW (0x002e)

SUMMARY
	Receive window size during connections

TYPE
	uint16

DEFAULT VALUE
	(10)

DESCRIPTION
	The Bluetooth specification requires that a master or slave be
	sensitive to timing jitter of transmissions from the other side up to
	10 microseconds while the two devices are connected.  The value may be
	controlled by this pskey.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_TX_PROTECTION_MODE (0x0030)

SUMMARY
	Combo: which TX packets shall we protect

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Provides an option to select some Bluetooth packets for protection.
	The intent is to improve SCO transmissions in a co-existence scheme. 
	
	This key can take on three values: 
	0: All high Priority TX packets are protected - standard setting
	
	Role Switch: Master -> High Priority 
	             Slave-> High Priority
	Park:        Master -> High Priority
	             Slave -> High Priority
	Page:        High Priority
	Page Scan:   High Priority 
	Inquiry:     High Priority
	Inquiry Scan:High Priority
	Fruitbat Test mode:
	            High Priority
	LMP traffic Master or Slave:
	            High Priority
	SCO: Master or Slave:
	            High Priority
	Broadcast:
	            High Priority
	Poll:
	            Master: -> High Priority
	Start of Sniff:   
	            Master  -> High Priority
	            
	1: SCO TX packets are not protected but other priority TX packets are 
	2: No TX packets are protected. 
	
	Although some packets are not protected this key does not affect
	whether they are transmitted or not. 

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PRIORITY_LEAD (0x0033)

SUMMARY
	Combo: How much notice will we give the Combo Card

TYPE
	uint16

DEFAULT VALUE
	(50)

DESCRIPTION
	This key is used only when we are using the Intel Phase 2 COEX scheme.
	This key defines the value for T_priority_lead which is the time
	between us raising the BT_Priority signal and the packet header
	beggining.
	
	This key might be removed on later builds once a good value has been
	found.

==============================================================================
NAME
	PSKEY_BT_CLOCK_INIT (0x0034)

SUMMARY
	Initial value of Bluetooth clock

TYPE
	uint32

DEFAULT VALUE
	(0UL)

DESCRIPTION
	The value to which the Bluetooth clock will be initialised at boot.
	The value 0 is standard; the only likely reason to alter this is
	for debugging non-CSR devices known to encounter problems at certain
	clock values.
	
	(Historical note:  before this key was introduced, CSR devices
	initialised their Bluetooth clocks from the lower 28 bits of the
	Bluetooth address, i.e. the lower 4 bits of the UAP followed by
	the LAP.)

==============================================================================
NAME
	PSKEY_TX_MR_MOD_DELAY (0x0038)

SUMMARY
	TX Mod delay

TYPE
	uint8

DEFAULT VALUE
	(0x59)

DESCRIPTION
	Trim timing for EDR transmit
	Mod delay for TX

==============================================================================
NAME
	PSKEY_RX_MR_SYNC_TIMING (0x0039)

SUMMARY
	RX MR Sync Timing

TYPE
	uint16

DEFAULT VALUE
	(0x463F)

DESCRIPTION
	Trim timing for EDR sync

==============================================================================
NAME
	PSKEY_RX_MR_SYNC_CONFIG (0x003a)

SUMMARY
	RX MR Sync Configuration

TYPE
	uint16

DEFAULT VALUE
	(0x0024)

DESCRIPTION
	Acceptable correlation quality of EDR

==============================================================================
NAME
	PSKEY_LC_LOST_SYNC_SLOTS (0x003b)

SUMMARY
	Time in ms for lost sync in low power modes

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	In low power modes, a device will consider it has lost synchronisation
	with its peer if it fails to receive an expected transmission in one
	of the following circumstances:
	
	- In sniff mode as a slave, during any sniff window when nothing
	  is received.
	
	- In sniff mode as a master, during any sniff window when the slave
	  has been sent a POLL or a data packet and no reply has been
	  received.
	
	- In park mode as a slave, when no transmission is received on any
	  park beacon in a train.
	
	This key specifies a value in baseband slots (units of 625 us) which
	must elapse since the last packet received from the remote device
	before the logic described above applies.

==============================================================================
NAME
	PSKEY_RX_MR_SAMP_CONFIG (0x003c)

SUMMARY
	RX MR Sync Configuration

TYPE
	uint16

DEFAULT VALUE
	(0x0426)

DESCRIPTION
	Acceptable correlation quality of EDR

==============================================================================
NAME
	PSKEY_AGC_HYST_LEVELS (0x003d)

SUMMARY
	AGC hysteresis levels

TYPE
	agc_hyst_config

DEFAULT VALUE
	{ 0x4, 0x1, 0xd, 0xa, 0xe, 0xb, 0xe, 0xb }

DESCRIPTION
	BlueCore contains an automatic gain control algorithm which attempts
	to maintain a reasonable signal level by adding and removing various
	sources of attenuation. This key controls the signal strength at which
	these sources are added and removed. It should not be altered except
	on advice from CSR.

==============================================================================
NAME
	PSKEY_RX_LEVEL_LOW_SIGNAL (0x003e)

SUMMARY
	ANA_RX_LVL at low signal strengths

TYPE
	uint16

DEFAULT VALUE
	(0xf)

DESCRIPTION
	This key gives the value used for the ANA_RX_LVL register when the
	chip detects that the signal strength has fallen off. It should be
	greater than or equal to PSKEY_ANA_RX_LEVEL.

==============================================================================
NAME
	PSKEY_AGC_IQ_LVL_VALUES (0x003f)

SUMMARY
	ANA_IQ_LVL values for AGC algorithmn

TYPE
	IQ_LVL_VAL[]

DEFAULT VALUE
	{ {0x20, 0}, {0x0e, 3} , {0x0c, 5}, {0x0a, 7}, 
                          {0x08, 11}, {0x06, 16}, {0x04, 23} }

DESCRIPTION
	This key gives the values for the ANA_IQ_LVL register used by the AGC
	algorithmn on the receive side, and the corresponding attenuation
	values. The top byte in each word is the register value, the bottom
	byte is an equivalent attenuation. This key should not be altered
	except on specific advice from CSR.

==============================================================================
NAME
	PSKEY_MR_FTRIM_OFFSET_12DB (0x0040)

SUMMARY
	ANA_RX_FTRIM offset when using 12 dB IF atten 

TYPE
	uint16

DEFAULT VALUE
	(0x022)

DESCRIPTION
	The offset applied to ANA_RX_FTRIM when using EDR and with the 12 dB
	IF attenuator is in.

==============================================================================
NAME
	PSKEY_MR_FTRIM_OFFSET_6DB (0x0041)

SUMMARY
	ANA_RX_FTRIM offset when using 6 dB IF atten 

TYPE
	uint16

DEFAULT VALUE
	(0x011)

DESCRIPTION
	The offset applied to ANA_RX_FTRIM when using EDR and with the 6 dB
	IF attenuator is in.

==============================================================================
NAME
	PSKEY_NO_CAL_ON_BOOT (0x0042)

SUMMARY
	Do not calibrate radio on boot

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Setting this key to TRUE causes the LC not to calibrate the radio at
	boot time. This means that the radio will not work until the key is
	set to false and the chip is rebooted. This key is intend to allow
	the use of a bootmode where the radio is disabled. (For details on
	bootmodes, see the document "Understanding and Using Bootmodes",
	document number CS-101528-AN (previously numbered as bcore-an-019P)
	on the CSR support website).
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_RSSI_HI_TARGET (0x0043)

SUMMARY
	RSSI high target

TYPE
	uint8

DEFAULT VALUE
	(80)

DESCRIPTION
	This key controls a parameter used by BlueCore's automatic gain
	control (AGC) algorithm. It should not be changed except on advice
	from CSR.

==============================================================================
NAME
	PSKEY_PREFERRED_MIN_ATTENUATION (0x0044)

SUMMARY
	Preferred minimum attenuator setting

TYPE
	uint8

DEFAULT VALUE
	(4)

DESCRIPTION
	See the description of PSKEY_LC_RSSI_GOLDEN_RANGE for 21.x builds.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PRIORITY_OVERRIDE (0x0045)

SUMMARY
	Combo: Treat all packets as high priority

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If this key is set to TRUE then all Bluetooth activity will be treated
	as high priority.
	
	See also PSKEY_LC_COMBO_PRIORITY_PIO_MASK.

==============================================================================
NAME
	PSKEY_LC_MULTISLOT_HOLDOFF (0x0047)

SUMMARY
	Time till single slot packets are used for resync

TYPE
	TIME

DEFAULT VALUE
	(300 * MILLISECOND)

DESCRIPTION
	The BT 1.2 specification recommends that in low power modes the master
	should use single slot packets to help the slave resynchronise. This
	would be at the sniff instant or at the end of a hold.
	
	However, a too literal following of this rule can cause bandwidth
	problems with short sniff intervals as the master will use single slot
	packets frequently.
	
	Clearly, for really short sniff intervals, the slave should find it
	not signficantly harder to resynchronise than it does in active mode
	and in active mode multi-slot packet are encouraged.
	
	So, a more lax interpretation, but still within the spirit of the
	spec, would be to use the single slot behaviour only when the sniff
	interval or hold period has been long enough that the slave might need
	some help resynchronising.
	
	This PS key holds a time indicating how long the master has to have
	not heard from the slave before it will start using single slot
	packets to help the slave resynchronise.
	
	One way to calculate a good time is to know that in low power modes,
	the error between the master and slave's clock can grow at up to 500
	ppm (since each device's clock is allowed to be upto 250 ppm from
	nominal). The slave is likely to get problems once it has to keep its
	correlator open for a full slot. A full slot is 625 us which means an
	maximum error between the two links of 312.5 us (as the sign of the
	error is also unknown). At 500 ppm it will take about 600 ms to reach
	this level. This suggests that the value of this key should be well
	below 600 ms.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PIOS_ENABLE (0x004a)

SUMMARY
	Combo: PIO lines enabled at boot up

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	This key controls whether the PIO signalling lines defined in
	PSKEY_LC_COMBO_PRIORITY_PIO_MASK will be active at boot up. The BCCMD
	COEX_PRIORITY_PIOS_ON can be used to control the setting dynamically.
	
	This key is supported only on versions of firmware that support the
	associated BCCMD. On firmware versions that don't support the BCCMD,
	the value of PSKEY_LC_COMBO_PRIORITY_PIO_MASK can be altered to
	provide the same effect as this key.

==============================================================================
NAME
	PSKEY_LC_ENABLE_LATE_SAMPLE (0x004b)

SUMMARY
	Enable late data sampling for transmission

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	This key controls when the LC should sample if data is available
	for transmission.  If enabled the LC samples as late as possible
	for data being available.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_ESCO_RTX_PRIORITY (0x0050)

SUMMARY
	Reduce the co-ex priority of eSCO retransmission

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If this key is set to TRUE, the BlueCore's co-existence interface will
	treat eSCO retransmissions as being low priority. (Note the priority 
	of the initial transmission of the eSCO data remains high).

==============================================================================
NAME
	PSKEY_EDR_SWITCH_MODE (0x0051)

SUMMARY
	EDR power amp, assertion method  

TYPE
	edr_switch_mode

DEFAULT VALUE
	(HIGH_TO_LOW)

DESCRIPTION
	
	The EDR_SWITCH_MODE will be used to describe the assertion
	method for the EDR_SWITCH_MODE_PIO and will be used to setup
	the driving method, Low To High or High To Low.
	

==============================================================================
NAME
	PSKEY_EDR_MODE_SWITCH_PIO (0x0052)

SUMMARY
	EDR PA support on pio(x) 

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	
	This key will assert the PIO line specified, 0-15 if present, 
	if the key is not present it will become a zero length key with 
	an attempt to read it failing, this will fail the psget method 
	and disable use of this key. If the pskey is defined but the value 
	is 0xffff, out of bounds, then the key will not setup a pio line. 
	The use of this pskey is intended to be the mode select line for 
	an EDR power amp, the assertion method will be in 
	PSKEY EDR_SWITCH_MODE,this will be either high to low or low to 
	high.
	
	If a pio line is required for tx enablement then you should use 
	the PSKEY_TXRX_PIO_CONTROL, pio pin 1 which asserts when we are 
	transmitting.
	

==============================================================================
NAME
	PSKEY_LC_ENABLE_WATCHDOG_FAULT (0x0053)

SUMMARY
	Enable LC watchdog fault reporting

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This is a debugging option; CSR internal use only.

==============================================================================
NAME
	PSKEY_LC_PEER_POWER_INCR_PERIOD (0x0057)

SUMMARY
	Peer transmit power control interval

TYPE
	TIME

DEFAULT VALUE
	(100000)

DESCRIPTION
	The period, measured in microseconds, between attempts to increment
	the peer's transmit power. 
	
	Setting this to zero disables the periodic checks.  This means the
	local device will not send messages concerning power management or 
	channel quality driven data rate to the remote device.  This pskey
	is paired with decrement peer power period.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.
	Value MILLISECOND is 1000.)

==============================================================================
NAME
	PSKEY_LC_PEER_POWER_DECR_PERIOD (0x0058)

SUMMARY
	Peer transmit power control interval

TYPE
	TIME

DEFAULT VALUE
	(1 * SECOND)

DESCRIPTION
	The period, measured in microseconds, between attempts to decrement
	the peer's transmit power, the same interval is used for measurements
	of channel quality to support LMP channel quality driven data rate
	messages.
	
	This pskey is paired with the respective increment peer power period.
	This key will have a minimum value of 100ms, how ever it will be 
	disabled if the increment peer power period is set to 0. This means 
	the local device will not send messages concerning peer power 
	management.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.
	Value MILLISECOND is 1000.)

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PULL_DIRECTION (0x005b)

SUMMARY
	Pull direction for 802.11 co-existence inputs

TYPE
	uint16

DEFAULT VALUE
	0x0000

DESCRIPTION
	This key configures the input lines on some BlueCore chips associated 
	with 802.11 coexistence interfaces. 
	
	For each bit set in this PSKEY that corresponds to a coexistence input
	signal, the corresponding PIO will be configured with a weak pull-up,
	otherwise it will be left as a weak pull-down (the default).

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PERIODIC_PIO_MASK (0x005c)

SUMMARY
	Combo: periodic activity PIO lines

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	A two-element array of uint16s specifying the use of PIO lines to
	signal the timing of very important periodic activity between BlueCore
	and a collocated IEEE 802.11 radio:
	    { uint16 pio_mask, uint16 pio_invert }
	
	Bits 0 to 15 of "pio_mask" and "pio_invert" map to PIO0 to PIO15
	respectively. A bit of "pio_mask" set to high enables use of the
	corresponding PIO pin to signal periodic activity. A bit of
	"pio_invert" set to high indicates that the corresponding PIO pin is
	active low instead of active high.
	
	PSKEY_LC_COMBO_DOT11_PERIODIC_PIO_MODE is used to control how the
	specified PIOs are used.

==============================================================================
NAME
	PSKEY_LC_COMBO_DOT11_PERIODIC_PIO_MODE (0x005d)

SUMMARY
	Combo: default mode for periodic activity PIO lines

TYPE
	uint16

DEFAULT VALUE
	COEXISTENCE_BT_OUTPUT

DESCRIPTION
	Set the default usage of the periodic PIO coexistence lines specified
	by PSKEY_LC_COMBO_DOT11_PERIODIC_PIO_MASK (if any).
	
	The pskey's acceptable values are:
	
	    0   COEXISTENCE_NONE        PIO is not used (high impedance)
	
	    1   COEXISTENCE_BT_OUTPUT   PIO is asserted for the duration of
	                                SCO and eSCO reserved slots
	
	With current firmware builds this should be left at its default of
	COEXISTENCE_BT_OUTPUT, with the functionality enabled or disabled by
	modifying PSKEY_LC_COMBO_DOT11_PERIODIC_PIO_MASK as appropriate.
	
	Note: For correct operation of COEXISTENCE_BT_OUTPUT it is necessary
	to also set PSKEY_LC_COMBO_DOT11_ESCO_RTX_PRIORITY = TRUE.

==============================================================================
NAME
	PSKEY_LC_HIGH_PRIORITY_SNIFF_TIMEOUTS (0x0060)

SUMMARY
	High priority bandwidth for sniff timeout slots

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key affects the algorithm that selects the value of Dsniff when
	negotiating sniff mode for an ACL connection.  If no value is set or
	the value is FALSE, sniff timeout slots will not be included in the
	calculation unless the quality of service for the connection is
	"guaranteed".  If the value is TRUE, sniff timeout slots will always
	be taken into account: this means that extra spacing is left in the
	air time schedule, where possible, to allow for a transmission to a
	slave during one iteration of the timeout slots.
	
	This key has no direct effect on the real-time scheduling of links in
	sniff mode, so it does not necessarily cause a master to address the
	slave in the timeout slots.  A QoS setting of "guaranteed" for an ACL
	connection causes sniff timeout slots to be treated as high priority
	by the real-time scheduler; however, that should be used with caution
	as it can have a significant effect on the bandwidth available for
	other links.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_USB_BCD_DEVICE (0x007d)

SUMMARY
	USB device release number in BCD

TYPE
	uint16

DEFAULT VALUE
	
#include "psbc_build_id.h"

DESCRIPTION
	The bcdDevice field of the local USB device, as defined in Table
	9.8 of version 2.0 of the USB specification.  Held in BCD.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_FREE_KEY_PIGEON_HOLE (0x00c9)

SUMMARY
	Link key store bitfield

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	A bitfield indicating which link keys are stored.  A 1 in this mask
	indicates that the corresponding link key is occupied.
	
	Freaky pigeon hole?

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR0 (0x00ca)

SUMMARY
	Bluetooth address + link key 0

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	        1st uint16:     top 8 bits of the LAP in the lower byte
	        2nd uint16:     lower 16 bits of the LAP
	        3rd uint16:     16 bit UAP
	        4th uint16:     8 bit NAP in the lower byte
	Link key is 8 words, following the 4-word BDADDR.  The link key
	is stored little-endian, so MSW is at position 11, LSW at
	position 4.
	Occupied keys should appear in PSKEY_FREE_KEY_PIGEON_HOLE

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR1 (0x00cb)

SUMMARY
	Bluetooth address + link key 1

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR2 (0x00cc)

SUMMARY
	Bluetooth address + link key 2

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR3 (0x00cd)

SUMMARY
	Bluetooth address + link key 3

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR4 (0x00ce)

SUMMARY
	Bluetooth address + link key 4

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR5 (0x00cf)

SUMMARY
	Bluetooth address + link key 5

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR6 (0x00d0)

SUMMARY
	Bluetooth address + link key 6

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR7 (0x00d1)

SUMMARY
	Bluetooth address + link key 7

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR8 (0x00d2)

SUMMARY
	Bluetooth address + link key 8

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR9 (0x00d3)

SUMMARY
	Bluetooth address + link key 9

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR10 (0x00d4)

SUMMARY
	Bluetooth address + link key 10

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR11 (0x00d5)

SUMMARY
	Bluetooth address + link key 11

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR12 (0x00d6)

SUMMARY
	Bluetooth address + link key 12

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR13 (0x00d7)

SUMMARY
	Bluetooth address + link key 13

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR14 (0x00d8)

SUMMARY
	Bluetooth address + link key 14

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LINK_KEY_BD_ADDR15 (0x00d9)

SUMMARY
	Bluetooth address + link key 15

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_ENC_KEY_LMIN (0x00da)

SUMMARY
	Minimum encryption key length

TYPE
	uint16

DEFAULT VALUE
	(1)

DESCRIPTION
	The minimum length of an encryption key in bytes. 
	Range 1->16. A value of 1 implies a minimum encryption key length of 8
	bits, etc. 
	
	(BT specification 1.1, Section 14.3.1 p159: 1<=Lmax<=16. Section
	14.3.3, p161, 3rd paragraph: max key size between one and sixteen. 
	Section 14.3.5, p166: table does not contain key of length zero.) 
	
	See PSKEY_ENC_KEY_LMAX. 

==============================================================================
NAME
	PSKEY_ENC_KEY_LMAX (0x00db)

SUMMARY
	Maximum encryption key length

TYPE
	uint16

DEFAULT VALUE
	(16)

DESCRIPTION
	The maximum length of an encryption key in bytes. 
	
	Range 1->16. A value of 1 implies a maximum encryption key length of 8
	bits, etc. 
	
	(BT specification 1.1, Section 14.3.1 p159: 1<=Lmax<=16. Section
	14.3.3, p161, 3rd paragraph: max key size between one and sixteen. 
	Section 14.3.5, p166: table does not contain key of length zero.) 
	
	UK Government restrictions require CSR to limit the maximum effective
	key length to less than 16 for some firmware builds. 
	
	See PSKEY_ENC_KEY_LMIN. 

==============================================================================
NAME
	PSKEY_LOCAL_SUPPORTED_FEATURES (0x00ef)

SUMMARY
	Local supported features block

TYPE
	uint16[]

DEFAULT VALUE
	{ 0xffff, 0xf88f, 0x1e1b, 0x8359 }

DESCRIPTION
	A 4 element array of uint16s holding a bitfield that describes the
	features supported by the local device.
	
	Coding matches the "coding of features" section in the LMP
	specification.  The first byte of the coding of features is held in
	the lower byte of the first uint16, etc.
	
	The key's default value gives the firmware's capabilities.  Switching
	a bit from 0 to 1 does not magically create a missing capability.
	
	This key configures the local LM.  If a feature is marked as provided
	by the default value, then clearing the key's bit turns off the
	corresponding functionality.  For example, setting the Encryption bit
	to zero stops the local device supporting encryption.
	
	The three "flow control lag" bits should be left at zero.
	
	The order in 1.2 of the spec is as follows.
	
	First word, low to high (X => turned on in default config;
	(X) => turned on if supported by hardware;)
	  On   Bit   Feature
	   X   0     3-slot packets
	   X   1     5-slot packets
	   X   2     Encryption
	   X   3     Slot offset
	   X   4     Timing accuracy
	   X   5     Master/slave switch
	   X   6     Hold mode
	   X   7     Sniff mode
	   X   8     Park mode
	   X   9     Power control requests
	   X  10     Data rate driven by channel quality
	   X  11     SCO link
	   X  12     HV2 packets
	   X  13     HV3 packets
	   X  14     mu-law voice encoding
	   X  15     A-law voice encoding
	
	Second word
	   X   0     CVSD
	   X   1     Paging scheme
	   X   2     Power control
	   X   3     Transparent SCO data
	       4     }
	       5     } L2CAP flow control lag (our default = 0)
	       6     }
	          [1.2 features from this point]
	   X   7     Broadcast encryption
	       8     Reserved (Scatter mode)
	  (X)  9     Enhanced Data Rate ACL 2 Mbps mode
	  (X) 10     Enhanced Data Rate ACL 3 Mbps mode
	   X  11     Enhanced inquiry scan
	   X  12     Interlaced inquiry scan
	   X  13     Interlaced page scan
	   X  14     RSSI with inquiry results
	  (X) 15     Extended SCO link --- EV3 packets
	
	Third word
	  (X)  0     Extended SCO link --- EV4 packets
	  (X)  1     Extended SCO link --- EV5 packets
	       2     Reserved (Absence masks)
	   X   3     AFH capable slave
	   X   4     AFH classification slave
	       5     Reserved (Alias authentication)
	       6     Reserved (Anonymity mode)
	  (X)  7     3-slot Enhanced Data Rate ACL packets
	  (X)  8     5-slot Enhanced Data Rate ACL packets
	   X   9     Sniff Subrating
	   X  10     Pause Encryption
	   X  11     AFH capable master
	   X  12     AFH classification master
	  (X) 13     Enhanced Data Rate eSCO 2 Mbps mode
	  (X) 14     Enhanced Data Rate eSCO 3 Mbps mode
	  (X) 15     3-slot Enhanced Data Rate eSCO packets
	
	Fourth word
	   X   0     Extended Inquiry Response
	       1-2   Reserved
	   X   3     Secure Simple Pairing
	   X   4     Encapsulated PDU
	       5     Erroneous Data Reporting
	   X   6     Non-flushable Packet Boundary Flag
	       7     Reserved
	   X   8     Link Supervision Timeout Changed Event
	   X   9     Inquiry Response TX Power Level
	      10-14  Reserved       
	   X  15     Extended features [i.e. highest bit in feature mask]
	

==============================================================================
NAME
	PSKEY_LM_USE_UNIT_KEY (0x00f0)

SUMMARY
	Allow use of unit key for authentication?

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Combination or unit keys can be used for authentication depending
	on devices' storage capacity.  This key is set to TRUE if unit keys
	are to be used by default instead of combination keys.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HCI_NOP_DISABLE (0x00f2)

SUMMARY
	Disable the HCI Command_Status event on boot

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	By default the BlueCore firmware sends an HCI command_status(NOP)
	event to the host shortly after booting.  Although this is clearly
	allowed by the HCI specification it is known to crash some host
	stacks.
	
	This pskey provides a simple workaround: if this key is TRUE then
	this boot-time event is not emitted.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_LM_MAX_EVENT_FILTERS (0x00f4)

SUMMARY
	Maximum number of event filters

TYPE
	uint8

DEFAULT VALUE
	(5)

DESCRIPTION
	Each time an event filter is added, it consumes valuable RAM
	resources.  To limit the maximum amount of RAM event filters can
	take we limit the maximum number of event filters.

==============================================================================
NAME
	PSKEY_LM_TEST_SEND_ACCEPTED_TWICE (0x00f6)

SUMMARY
	LM sends two LMP_accepted messages in test mode

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	The Bluetooth 1.1 specification does not ensure reliability of LMP
	traffic in test mode, since it does not differentiate test packets
	(which are unreliable) from LMP packets at the baseband level.  This
	can lead to loss of LMP messages.
	
	If this key is set to TRUE, a slave in test mode will send the
	LMP_Accepted reply to a test control message twice.  This increases
	the likelihood that the message will be received by the tester.  (It
	does not guarantee it because, since the link manager does not operate
	in real time, there may be test messages in between the
	transmissions.)
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_LM_MAX_PAGE_HOLD_TIME (0x00f7)

SUMMARY
	Maximum time we hold a device around page

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Each time a unit pages a new device and it currently has active links,
	they are held for page timeout slots. If page timeout slots is greater
	than this value, this value is used a the maximum hold time.
	A value of zero indicates that holding around page is disabled.

==============================================================================
NAME
	PSKEY_AFH_ADAPTATION_RESPONSE_TIME (0x00f8)

SUMMARY
	LM period for AFH adaption

TYPE
	uint16

DEFAULT VALUE
	(0x12c0)

DESCRIPTION
	This sets the interval between successive channel classification
	updates (and hence channel map adaptations) for an AFH enabled master.
	The period is measured in baseband slots (625us), and can be set
	between 1 and 30 seonds.
	
	The slave classification intervals sent in the
	LMP_channel_classfication_req message are derived from this value:
	    AFH_max_interval = this_value
	    AFH_min_interval = this_value / 2

==============================================================================
NAME
	PSKEY_AFH_OPTIONS (0x00f9)

SUMMARY
	Options to configure AFH

TYPE
	uint16

DEFAULT VALUE
	(0x0017)

DESCRIPTION
	This allows AFH to be configured how the user requires. The bits are
	designated as below and are not restricted to classification.
	 bit 0 enable RSSI classification
	 bit 1 enable PLR classification
	 bit 2 enable use of combo information in classification
	 bit 3 <reserved>
	 bit 4 enable hysterisis of the classifications from slaves
	 bit 5 disable RSSI classification with "low power" links
	 bit 6 enable extended RSSI classification with "low power" links,
	       this enables the time period for RSSI classification to be 
	       PSKEY_AFH_RSSI_LP_RUN_PERIOD.	
	
	RSSI - BlueCore makes signal strength measurements of channels not
	being used by the Bluetooth link when the radio would otherwise be
	idle. In ideal radio conditions, this will increase the power 
	consumption during a connection.  However, it has the advantage that 
	it makes Bluetooth a good neighbour; it identifies and avoids other 
	users of the ISM band even if they are not causing problems for 
	Bluetooth operation and can return channels to use when the 
	interferer is no longer present.  Power consumption can be reduced 
	with interference present as there will be a reduced need for 
	message retransmissions.  CSR recommend that RSSI is enabled.
	
	When all links are "low power", power consumption for RSSI
	classification can be reduced by not performing RSSI scans (setting
	bit 5), or performing them less regularly (setting bit 6 and setting
	PSKEY_AFH_RSSI_LP_RUN_PERIOD larger than PSKEY_AFH_RSSI_RUN_PERIOD).
	"Low power" links are in sniff or park with a period of more than 128
	slots (this value was chosen to distinguish sniff periods used in HID
	devices from those used by, for example, idle headsets).
	
	Note that a link is never considered to be "low power" if it has a SCO
	or eSCO link associated with it, so that adding an (e)SCO link to a
	sniffed link will immediately restart or speed up classification when
	using bits 5 or 6 of this key.
	
	PLR - Dropped packets and bit error rates for FEC encoded headers and
	payloads are used to estimate the interference for each of the
	channels being used. This gives priority to channels that are
	degrading the Bluetooth performance. As mentioned above, it will not
	identify other users of the ISM band unless they are corrupting
	Bluetooth packets, and it will not rapidly detect the removal of an
	interferer on a channel being avoided. Additionally, BlueCore can 
	only apply this method when it is master of the link.
	
	To use AFH functionality to avoid interference, at least one device in
	the link must include a classifier.

==============================================================================
NAME
	PSKEY_AFH_RSSI_RUN_PERIOD (0x00fa)

SUMMARY
	AFH RSSI reading period

TYPE
	uint16

DEFAULT VALUE
	(500)

DESCRIPTION
	This is the period with which the LC will schedule an RSSI
	classification. When this period has passed, and there is a gap in
	Bluetooth activity, the Bluetooth radio is used as a spectrum analyser
	to read the RSSI on all Bluetooth channels. These values are averaged
	and decay slowly.
	
	Note that bit 6 of PSKEY_AFH_OPTIONS allows a longer period to be used
	for links in sniff and park. See the descriptions of PSKEY_AFH_OPTIONS
	and PSKEY_AFH_RSSI_LP_RUN_PERIOD for more information.
	
	The value of this key is in unit of ms.

==============================================================================
NAME
	PSKEY_AFH_REENABLE_CHANNEL_TIME (0x00fb)

SUMMARY
	AFH good channel adding time

TYPE
	uint16

DEFAULT VALUE
	(0x0FA0)

DESCRIPTION
	This key determins the amount of time it takes for a channel that was
	marked as bad to be marked as good again (when we have no further
	information about that channel).  The time will be approximately Key *
	40 milliseconds.  The actual time will vary as reintroduction is 
	deliberately randomised.  The fastest possible is 25% of this time.
	
	In the presence of broadband signals the time to mark the channels 
	affected by these signals good will be increased.  This reduces the 
	chance of further interference from the broadband source - which may 
	arise due to beacons or varying data transfer on the broadband signal.
	
	Channels will typically be marked as unknown much sooner than this.  
	AFH selection algorithms may use this as a hint to use the 
	channel sooner.
	
	The value of this key is in units of 40 ms.
	

==============================================================================
NAME
	PSKEY_NO_DROP_ON_ACR_MS_FAIL (0x00fc)

SUMMARY
	Complete link if acr barge-in role switch refused

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	If the Role parameter to the HCI Accept_Connection_Request (acr)
	command is 0x00 it requires the local device to become master of the
	link.  This involves requesting the existing (paging) master to
	perform a role switch, and only completing the connection if the
	switch is performed.  The link is dropped if the request to perform a
	role switch is refused.  The HCI Set_Event_Filter command can be
	configured to achieve the same behaviour without involving the host
	via Connection_Request.
	
	If this peksy is set to TRUE this behaviour is altered: if the Role
	parameter is 0x00 then it is treated as advice - the local device
	requests the paging master to perform a role switch, but the link is
	not dropped if this is refused.  The behaviour of the event filter is
	similarly adjusted.  No attempt is made to hide a failure to switch.
	For example, no Role_Change event is sent to the host.
	
	This pskey has been added to attempt to ameliorate situations where
	both devices insist on being master.  However, it changes the
	behaviour of HCI, so there is no guarantee that a given host stack
	will behave correctly.  Users must determine correct system operation
	for themselves.
	
	If this pskey is FALSE, the firmware provides the normal HCI
	behaviour.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_MAX_PRIVATE_KEYS (0x00fd)

SUMMARY
	Max private link keys stored

TYPE
	uint8

DEFAULT VALUE
	(2)

DESCRIPTION
	As we do not know how many devices we wish to be able to use at legacy
	boot time, we allow the number of private keys we use in legacy mode
	to be configurable. Setting this to zero will prevent any private link
	key storage.

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR0 (0x00fe)

SUMMARY
	Bluetooth address + link key 0

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	        1st uint16:     top 8 bits of the LAP in the lower byte
	        2nd uint16:     lower 16 bits of the LAP
	        3rd uint16:     16 bit UAP
	        4th uint16:     8 bit NAP in the lower byte
	Link key is 8 words, following the 4-word BDADDR.  The link key
	is stored little-endian, so MSW is at position 11, LSW at
	position 4.

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR1 (0x00ff)

SUMMARY
	Bluetooth address + link key 1

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR2 (0x0100)

SUMMARY
	Bluetooth address + link key 2

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR3 (0x0101)

SUMMARY
	Bluetooth address + link key 3

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR4 (0x0102)

SUMMARY
	Bluetooth address + link key 4

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR5 (0x0103)

SUMMARY
	Bluetooth address + link key 5

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR6 (0x0104)

SUMMARY
	Bluetooth address + link key 6

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_PRIVATE_LINK_KEY_BD_ADDR7 (0x0105)

SUMMARY
	Bluetooth address + link key 7

TYPE
	LM_LINK_KEY_BD_ADDR_T

DEFAULT VALUE
	<none>

DESCRIPTION
	A Bluetooth address and its corresponding link key.
	See description for PSKEY_PRIVATE_LINK_KEY_BD_ADDR0

==============================================================================
NAME
	PSKEY_LOCAL_SUPPORTED_COMMANDS (0x0106)

SUMMARY
	Local supported commands

TYPE
	uint16[]

DEFAULT VALUE
	{0xffff, 0x03ff, 0xfffe, 0xffff, 0xffff, 0xffff, 0x0ff3, 0xffe8, 0xf73f, 0xff83, 0x000C}

DESCRIPTION
	
	This is a large bitfield that describes which HCI commands are
	supported by the host controller.  The Host can find this information
	out itself by trying the command, the Host Controller will then return
	with "Unkown HCI Command", but some Host's might prefer to try this
	command first.
	
	The result returned by this command does not change after the Host
	Controller has booted.  Sometimes it is not possible for the Host
	Controller to perform some operations (eg. insufficent resources or
	not having a link of the correct type).  This command will still imply
	that the commands are available; if the Host tries such a command the
	Host Controller should return a different status message than "Unkown
	HCI Command".
	
	byte 0
	        0 Inquiry
	        1 Inquiry Cancel
	        2 Periodic Inquiry Mode
	        3 Exit Periodic Inquiry Mode
	        4 Create Connection
	        5 Disconnect
	        6 Add SCO Connection
	        7 Cancel Create Connection
	
	byte 1
	        0 Accept Connection Request
	        1 Reject Connection Request
	        2 Link Key Request Reply
	        3 Link Key Request Negative Reply
	        4 PIN Code Request Reply
	        5 PIN Code Request Negative Reply
	        6 Change Connection Packet Type
	        7 Authentication Request
	
	byte 2
	        0 Set Connection Encryption
	        1 Change Connection Link Key
	        2 Master Link Key
	        3 Remote Name Request
	        4 Cancel Remote Name Request
	        5 Read Remote Supported Features
	        6 Read Remote Extended Features
	        7 Read Remote Version Information
	
	byte 3
	        0 Read Clock Offset
	        1 Read LMP Handle
	        2 <reserved> Exchange Fixed Info
	        3 <reserved> Exchange Alias Info
	        4 <reserved> Private Pairing Request Reply
	        5 <reserved> Private Pairing Request Negative Reply
	        6 <reserved> Generated Alias
	        7 <reserved> Alias Address Request Reply
	
	byte 4
	        0 <reserved> Alias Address Request Negative Reply
	        1 Hold Mode
	        2 Sniff Mode
	        3 Exit Sniff Mode
	        4 Park Mode
	        5 Exit Park Mode
	        6 QoS Setup
	        7 Role Discovery
	
	byte 5
	        0 Switch Role
	        1 Read Link Policy Settings
	        2 Write Link Policy Settings
	        3 Read Default Link Policy Settings
	        4 Write Default Link Policy Settings
	        5 Flow Specification
	        6 Set Event Mark
	        7 Reset
	
	byte 6
	        0 Set Event Filter
	        1 Flush
	        2 Read PIN Type
	        3 Write PIN Type
	        4 Create New Unit Key
	        5 Read Stored Link Key
	        6 Write Stored Link Key
	        7 Delete Stored Link Key
	
	byte 7
	        0 Write Local Name
	        1 Read Local Name
	        2 Read Connection Accept Timeout
	        3 Write Connection Accept Timeout
	        4 Read Page Timeout
	        5 Write Page Timeout
	        6 Read Scan Enable
	        7 Write Scan Enable
	
	byte 8
	        0 Read Page Scan Activity
	        1 Write Page Scan Activity
	        2 Read Inquiry Scan Activity
	        3 Write Inquiry Scan Activity
	        4 Read Authentication Enable
	        5 Write Authentication Enable
	        6 Read Encryption Mode
	        7 Write Encryption Mode
	
	byte 9
	        0 Read Class Of Device
	        1 Write Class Of Device
	        2 Read Voice Setting
	        3 Write Voice Setting
	        4 Read Automatic Flush Timeout
	        5 Write Automatic Flush Timeout
	        6 Read Num Broadcast Retransmissions
	        7 Write Num Broadcast Retransmissions
	
	byte 10
	        0 Read Hold Mode Activity
	        1 Write Hold Mode Activity
	        2 Read Transmit Power Level
	        3 Read SCO Flow Control Enable
	        4 Write SCO Flow Control Enable
	        5 Set Host Controller To Host Flow Control
	        6 Host Buffer Size
	        7 Host Number Of Completed Packets
	
	byte 11
	        0 Read Link Supervision Timeout
	        1 Write Link Supervision Timeout
	        2 Read Number of Supported IAC
	        3 Read Current IAC LAP
	        4 Write Current IAC LAP
	        5 Read Page Scan Period Mode
	        6 Write Page Scan Period Mode
	        7 Read Page Scan Mode
	
	byte 12
	        0 Write Page Scan Mode
	        1 Set AFH Channel Classification
	        2 <reserved> (Read Extended Data Mode)
	        3 <reserved> (Write Extended Data Mode)
	        4 Read Inquiry Scan Type
	        5 Write Inquiry Scan Type
	        6 Read Inquiry Mode
	        7 Write Inquiry Mode
	
	byte 13
	        0 Read Page Scan Type
	        1 Write Page Scan Type
	        2 Read Channel Classification Mode
	        3 Write Channel Classification Mode
	        4 <reserved> Read Anonymity Mode
	        5 <reserved> Write Anonymity Mode
	        6 <reserved> Read Alias Authentication Enable
	        7 <reserved> Write Alias Authentication Enable
	
	byte 14
	        0 <reserved> Read Anonymous Address Change Parameters
	        1 <reserved> Write Anonymous Address Change Parameters
	        2 <reserved> Reset Fixed Address Attempts Counter
	        3 Read Local Version Information
	        4 <reserved> Read Local Supported Commands
	        5 Read Local Supported Features
	        6 Read Local Extended Features
	        7 Read Buffer Size
	
	byte 15
	        0 Read Country Code
	        1 Read BD ADDR
	        2 Read Failed Contact Count
	        3 Reset Failed Contact Count
	        4 Get Link Quality
	        5 Read RSSI
	        6 Read AFH Channel Map
	        7 Read BD Clock
	
	byte 16
	        0 Read Loopback Mode
	        1 Write Loopback Mode
	        2 Enable Device Under Test Mode
	        3 Setup Synchronous Connection
	        4 Accept Synchronous Connection
	        5 Reject Synchronous Connection
	        6 <reserved>
	        7 <reserved>
	
	byte 17
	        0 Read Extended Inquiry Response
	        1 Write Extended Inquiry Respone
	        2 Refresh Encryption Key
	        3 <reserved>
	        4 Sniff Subrating
	        5 Read Simple Pairing Mode
	        6 Write Simple Pairing Mode
	        7 Read Local OOB Data
	
	byte 18
	        0 Read Inquiry Response Transmit Power
	        1 Write Inquiry Response Transmit Power
	        2 Read Default Erroneous Data Reporting
	        3 Write Default Erroneous Data Reporting
	        4 <reserved>
	        5 <reserved>
	        6 <reserved>
	        7 IO Capability Response 
	
	byte 19
	        0 User Confirmation Request Reply Command
	        1 User Confirmation Request Negative Reply Command
	        2 User PassKey Request Reply Command
	        3 User PassKey Request Negative Reply Command
	        4 Remote OOB Data Request Reply Command
	        5 Write Simple Pairing Debug Mode
	        6 Enhanced Flush
	        7 Remote OOB Data Request Negative Reply Command  
	
	byte 20
	        0 <reserved>
	        1 <reserved>
	        2 Send Keypress Notification Command
	        3 IO Capability Request Negative Reply Command
	        4 <reserved>
	        5 <reserved>
	        6 <reserved>
	        7 <reserved>

==============================================================================
NAME
	PSKEY_LM_MAX_ABSENCE_INDEX (0x0107)

SUMMARY
	Maximum absence index allowed

TYPE
	uint8

DEFAULT VALUE
	(1)

DESCRIPTION
	This describes the maximum absence index that the firmware will 
	use when assigning absence masks. This is the index number so 
	setting this to 0 gives a maximum number of absences as 1. The 
	spec dictates that the minimum allowed is 1 absence hence setting 
	this value to zero gives us the legal minimum the spec allows.

==============================================================================
NAME
	PSKEY_DEVICE_NAME (0x0108)

SUMMARY
	Local device's "user friendly" name

TYPE
	uint16[]

DEFAULT VALUE
	{0x5343, 0x2052, 0x202d, 0x6362, 0x0033}

DESCRIPTION
	The local device's default "user friendly" name, used by the HCI
	Read_Local_Name and Change_Local_Name commands and by
	LMP_name_req/LMP_name_res transactions.
	
	When the firmware is booted, the device's name is taken from this
	pskey.  However, if the local host alters the local device's name, by
	calling the HCI Change_Local_Name command, then the new name is held
	in RAM.  Subsequent requests to read the device's name take from the
	RAM store, not from this pskey.  The pskey's value only becomes
	visble again after the firmware reboots.
	
	The BT 1.1 HCI specification requires the device's default name to be
	""; an empty string.  The default (psrom) value of this pskey is "CSR
	- bc3", or something similar, thus the psrom value does not meet the
	HCI specification.  If this pskey is set to hold nothing, i.e., no
	uint16s are stored under the pskey, then the HCI default value is
	obtained.
	
	Over HCI and LMP the name is passed as a sequence of UTF-8 octets.
	Because the ps stores data in arrays of uint16s, the name is packed
	in this pskey, two octets per uint16.  This packing is important when
	the ps store is small, notably where the ps is held in EEPROM.
	
	Working from start of the device's name, the first character is
	stored in the lower octet of the pskey's first uint16, the second
	character in the upper octet of the first uint16, etc.  If the name
	is an odd number of characters then the upper octet of the last
	uint16 is '\0'.
	
	This pskey can hold a maximum of 20 uint16s, limiting the default
	device name to 40 octets.  The behaviour is undefined in this pskey
	holds more than 20 uint16s.  (This size constraint does not apply to
	a name written via the HCI Change_Local_Name command.)
	
	The default name for BlueCore3 chips is "CSR - bc3"; when packed this
	becomes {0x5343, 0x2052, 0x202d, 0x6362, 0x0033}.
	
	This pskey is used from (HCI) 18.X builds.  HCI 17.X and earlier
	builds use PSKEY_LOCAL_NAME0 -> PSKEY_LOCAL_NAME17 and
	PSKEY_LOCAL_NAME_LENGTH.

==============================================================================
NAME
	PSKEY_AFH_RSSI_THRESHOLD (0x0109)

SUMMARY
	AFH RSSI threshold

TYPE
	uint16

DEFAULT VALUE
	(0x0800)

DESCRIPTION
	This value controls the threshold of the entire RSSI classification
	algorithm.  If the standard deviation of the power in the band is
	below this level then the device assumes that the entire band is clear
	and adapts its channel ratings accordingly.

==============================================================================
NAME
	PSKEY_LM_CASUAL_SCAN_INTERVAL (0x010a)

SUMMARY
	Scan interval in slots for casual scanning

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	If this key is set and is none zero, `casual scanning' is enabled.
	The value then gives a maximum interval in slots between page and
	inquiry scans.
	
	In this mode, page and inquiry scans are not necessarily performed
	with the frequency of the intervals set via
	HCI_write_inquiry_scan_activity and HCI_write_page_scan_activity.  If
	the chip is active at any point after the interval specified over HCI
	since the previous scan, it will perform the scan of the appropriate
	type.  If it does not become active within
	PSKEY_LM_CASUAL_SCAN_INTERVAL slots after the previous scan, it will
	perform the scan at that point.
	
	This is most useful on hardware starting with BlueCore3-ROM.  This
	contains support for waking the chip from deep sleep if the host
	provides a clock.  In this case, if the host provides a clock at any
	time after the normal scan interval, the chip will wake to perform the
	scan in synchronisation with the host.  Otherwise, it will wait until
	PSKEY_LM_CASUAL_SCAN_INTERVAL slots have elapsed and wake anyway.
	
	For this reason this key should only be set when the host provides
	a clock input which goes low when the chip enters deep sleep.
	Otherwise there will be a significant peformance impact as the chip
	will be woken unnecessarily.  The key is also only useful with
	host transports which do not use PSKEY_UART_SLEEP_TIMEOUT as the
	chip will stay awake for that period if woken by a host clock.
	This is likely to be a considerable inefficiency.
	
	On earlier hardware, the key is still usable, but casual wakeup relies
	on the chip being woken up for some other reason, either by the host
	or due to an internal timer.
	
	Casual scanning is not used in continuous page scan, since in this
	case the chip never becomes inactive.
	
	If casual scanning is in use, the link manager will report the
	scan repetition mode based on the larger of the page scan interval
	and the casual scan interval.

==============================================================================
NAME
	PSKEY_AFH_MIN_MAP_CHANGE (0x010b)

SUMMARY
	The minimum amount to change an AFH map by

TYPE
	uint16[]

DEFAULT VALUE
	{ 2, 4 }

DESCRIPTION
	
	This key defines the minimum amount by which the device will change a
	channel map.  If the channel map is rapidly changing by only a very
	small amount then the device prefers not to send too many channel map
	changes of classification reports.
	
	The first number is the number of channels that must have got worse to
	cause the device to send a message.  The second message is the number
	of channels that must have improved to cause the device to send a
	message. Having the second number bigger than the first means that the
	device will send messages more frequently as things become worse (as
	it knocks out more channels).  The device will then only add channels
	back in as things become better.
	
	Setting either value to zero will disable this feature - the device
	will send the channel map message whenever the channel map changes.
	
	The 'all good' channel map is a special case: the device will always
	send this.
	

==============================================================================
NAME
	PSKEY_AFH_RSSI_LP_RUN_PERIOD (0x010c)

SUMMARY
	AFH RSSI reading period when in low power mode

TYPE
	uint16

DEFAULT VALUE
	(5000)

DESCRIPTION
	This value of this key is used in place of PSKEY_AFH_RSSI_RUN_PERIOD
	when all Bluetooth links are in a "low power" mode (see the
	description of PSKEY_AFH_OPTIONS for the definition of "low power").
	Hence this key is normally much larger than PSKEY_AFH_RSSI_RUN_PERIOD
	to reduce power when links are in sniff or park.
	
	This period is enabled by bit 6 in PSKEY_AFH_OPTIONS.
	The value of this key is in unit of ms.
	

==============================================================================
NAME
	PSKEY_HCI_LMP_LOCAL_VERSION (0x010d)

SUMMARY
	The HCI and LMP version reported locally

TYPE
	uint16

DEFAULT VALUE
	(0x0404)

DESCRIPTION
	This is the HCI_version and LMP_version information reported to 
	the local host when the host send HCI_Read_Local_Version_Information. 
	The HCI_Version is the top 8 bits, the LMP_Version is the bottom 8 
	bits.

==============================================================================
NAME
	PSKEY_LMP_REMOTE_VERSION (0x010e)

SUMMARY
	The LMP version reported remotely

TYPE
	uint8

DEFAULT VALUE
	(0x04)

DESCRIPTION
	This is the LMP_version information reported in LMP_version_res to the
	remote host when the remote host sends LMP_version_req. 
	The LMP_Version is the bottom 8 
	bits.

==============================================================================
NAME
	PSKEY_HOLD_ERROR_MESSAGE_NUMBER (0x0113)

SUMMARY
	Maximum number of queued HCI Hardware Error Events

TYPE
	uint16

DEFAULT VALUE
	(1)

DESCRIPTION
	Maximum number of HCI Hardware Error Events which maybe present in
	the queue of HCI events being sent to the host.
	
	If this is set to 0 then no limit imposed.
	

==============================================================================
NAME
	PSKEY_ERROR_CODE_LTADDR_EXHAUSTION (0x0114)

SUMMARY
	Error code to be used when we run out of LT_ADDRs

TYPE
	uint8

DEFAULT VALUE
	(0x09)

DESCRIPTION
	The BlueTooth specification doesn't make it clear as to which HCI
	error code should be used if a device runs out of LT addresses when
	it has fewer than the maximum allowed number of ACL connections (see
	PSKEY_MAX_ACLS). This can happen if a connection is lost without a
	clean disconnect taking place; the device will then reserve the
	address that the connection was using for some amount of time.
	
	If an attempt is made to create an ACL connection, such as in order
	to perform a remote name request or service search, when the device
	has fewer than PSKEY_MAX_ACLS existing ACL connections but has no
	available LT_ADDRs, the value of this key is returned in the HCI
	command complete event. Note that the value of this key does not get
	validated at all. However, it is recommended that only the following
	values are used:
	
	- Connection Limit Exceeded (0x09)
	  This is the same error code as is returned if PSKEY_MAX_ACLS is
	  exceeded. As this value is ambiguous, it is unsuitable for some
	  hosts.
	
	- Memory Capacity Exceeded (0x07)
	  This error code is also returned if the device runs out of RAM and
	  suggests to the host that the attempt should succeed if the host
	  first performs an operation that will free up some RAM. As freeing
	  RAM will not help in the case of LT_ADDR exhaustion, this error
	  code is misleading and so unsuitable for some hosts.
	
	- Connection Rejected due to Limited Resources (0x0d)
	  This error code is meant to suggest that the connection has been
	  rejected by the remote device but, in this case, the connection
	  has been rejected by the local device so this error code is not
	  correct.
	
	- Unspecified Error (0x1f)
	  The most suitable of the defined error codes but not specific
	  to this error condition.

==============================================================================
NAME
	PSKEY_SP_ENABLE_ECC_KEY_CHANGES (0x0115)

SUMMARY
	Enable ECC key protection by changing keys

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	When performing Simple Pairing the ECC key pair should be protected.
	There are 3 methods for this:
	
	- Change the private key after three failed pairing attempts or after
	  10 successful pairing attempts or a combination of these such that 
	  3 successful attempts count as one failed attempt.
	
	- Verify that the received public key are on the correct curve.
	
	- Implement elliptic curve point addition and doubling using formulas
	  that are valid only on the correct curve.
	
	When this key is set to TRUE then the first option of changing ECC
	keys will be enabled.
	
	If this option and PSKEY_SP_STORE_GENERATED_ECC_KEY is enabled then:
	- A large number of writes to PSKEY_SP_ECC_KEY may occur.
	- Counters are not perisistent over device reset so the key pair
	  may not be changed at the correct time.
	

==============================================================================
NAME
	PSKEY_SP_STORE_GENERATED_ECC_KEY (0x0116)

SUMMARY
	Store ECC keys genereted during Simple Pairing

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If this is enabled then any ECC keys generated during Simple Pairing
	will be written into PSKEY_SP_ECC_KEY.
	

==============================================================================
NAME
	PSKEY_SP_ECC_KEY (0x0117)

SUMMARY
	ECC Key Pair

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	ECC Simple Pairing Key Pair.

==============================================================================
NAME
	PSKEY_DFU_ATTRIBUTES (0x0136)

SUMMARY
	DFU attributes

TYPE
	uint8

DEFAULT VALUE
	(7)

DESCRIPTION
	The bmAttributes field of the run time DFU Functional Descriptor,
	as defined in Table 4.2 of USB DFU specification 1.0.
	
	The default value (7) mysteriously means "manifest tolerant, upload
	+ download capable."
	
	This applies for the USB and "DFU over UART" (protocol name not yet
	allocated) protocols.

==============================================================================
NAME
	PSKEY_DFU_DETACH_TO (0x0137)

SUMMARY
	DFU detach timeout

TYPE
	uint16

DEFAULT VALUE
	(5000)

DESCRIPTION
	The wDetachTimeOut field of the run time DFU Functional Descriptor,
	as defined in Table 4.2 of USB DFU specification 1.0.
	
	The value is in milliseconds.
	
	This applies for the USB and "DFU over UART" (protocol name not yet
	allocated) protocols.

==============================================================================
NAME
	PSKEY_DFU_TRANSFER_SIZE (0x0138)

SUMMARY
	DFU transfer size

TYPE
	uint16

DEFAULT VALUE
	(1023)

DESCRIPTION
	The wTransferSize field of the run time DFU Functional Descriptor,
	as defined in Table 4.2 of USB DFU specification 1.0.  This key
	applies to both the USB and "DFU over UART" (protocol name not yet
	allocated) protocols.
	
	The maximum permissible value for this key is 1023 for both
	transports.  (This limit is imposed by the USB hardware).  The
	default value (1023) is in bytes.  Note that the BCSP size may be
	overridden (by a smaller value) at low baud rates.

==============================================================================
NAME
	PSKEY_DFU_ENABLE (0x0139)

SUMMARY
	DFU enable

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	If TRUE this enables the use of dfu i.e. support for dfu will be
	advertised in the USB descriptors and dfu commands will be
	processed.  Otherwise support for the protocol will not be
	advertised and dfu commands will be rejected.
	
	This key applies to both the USB and "DFU over UART" (protocol name
	not yet allocated) protocols.  It is intended for use in countries
	such as Japan where firmware upgrades may not allowed for radio
	devices.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_DFU_LIN_REG_ENABLE (0x013a)

SUMMARY
	Linear Regulator enabled at boot in DFU mode

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Some chips have a linear regulator. On certain builds, the regsiter
	that controls this functionality may need to be asserted at boot
	time when in DFU mode. Setting this PSKEY to TRUE ensures that this
	occurs.

==============================================================================
NAME
	PSKEY_DFUENC_VMAPP_PK_MODULUS_MSB (0x015e)

SUMMARY
	DFU encryption VM application public key MSB

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This is a 32-word array containing the more significant block of the
	public key for DFU signing of a VM application.
	See  PSKEY_DFUENC_VMAPP_PK_MODULUS_LSB for the other part.

==============================================================================
NAME
	PSKEY_DFUENC_VMAPP_PK_MODULUS_LSB (0x015f)

SUMMARY
	DFU encryption VM application public key LSB

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This is a 32-word array containing the less significant block of the
	public key for DFU signing of a VM application.
	See  PSKEY_DFUENC_VMAPP_PK_MODULUS_MSB for the other part.

==============================================================================
NAME
	PSKEY_DFUENC_VMAPP_PK_M_DASH (0x0160)

SUMMARY
	DFU encryption VM application M dash

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	This is a 16-bit word containing the reciprocal of the public key mod
	0x10000 used in DFU signing of a VM application.

==============================================================================
NAME
	PSKEY_DFUENC_VMAPP_PK_R2N_MSB (0x0161)

SUMMARY
	DFU encryption VM application public key R2N MSB

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This is a 32-word array containing the more significant block of the
	R2N multiplier for DFU signing of a VM application.
	See  PSKEY_DFUENC_VMAPP_PK_R2N_LSB for the other part.

==============================================================================
NAME
	PSKEY_DFUENC_VMAPP_PK_R2N_LSB (0x0162)

SUMMARY
	DFU encryption VM application public key R2N LSB

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This is a 32-word array containing the less significant block of the
	R2N multiplier for DFU signing of a VM application.
	See  PSKEY_DFUENC_VMAPP_PK_R2N_MSB for the other part.

==============================================================================
NAME
	PSKEY_BCSP_LM_PS_BLOCK (0x0192)

SUMMARY
	BCSP link establishment block

TYPE
	BCSP_LM_PS_BLOCK

DEFAULT VALUE
	{ 
                        1,      /* 1 to enable link sync. */ 
                        0,      /* Continuous sync packets. */ 
                        250     /* Tshy is 250ms. */ }

DESCRIPTION
	Configure the BCSP link establishment protocol.  This is only used
	if BCSP is used over the chip's UART.
	
	The configuration uses a structure of type BCSP_LM_PS_BLOCK in
	which the fields are:
	
	      uint16  mode           0 - disable link establishment.
	                             1 - enable link establishment.
	                             2 - enable passive-start link
	                                 establishment.  This option causes
	                                 the link establishment engine on the
	                                 device to emit no messages until it
	                                 receives traffic from the host.  
	
	      uint16  sync_retries   Support for this argument has been
	                             removed.
	
	                             It used to set the number of sync
	                             packets emitted before the BCSP
	                             link establishment engine gave up
	                             and marked the link as dead.  A
	                             value of zero meant "don't stop."
	                             The BCSP link establishment engine
	                             now always behaves as if the value
	                             is zero.
	
	      uint16  tshy           The Tshy value in milliseconds.
	
	                             This is the interval in which the BCSP
	                             link establishment engines send "sync"
	                             messages.  This value is also used by the
	                             BCSP link establishment engine's
	                             Tconf timer.
	
	See "BCSP LInk Establishment Protocol"  document ID CS-101681 for
	additional information.

==============================================================================
NAME
	PSKEY_HOSTIO_FC_PS_BLOCK (0x0193)

SUMMARY
	HCI flow control block

TYPE
	HOSTIO_FC_PS_BLOCK

DEFAULT VALUE
	{ 
                        250,    /* ncp_max_period in milliseconds. */ 
                        4,      /* acl_trip_level. */ 
                        4,      /* sco_trip_level. */ 
                        FALSE   /* sco flow control not enabled. */ }

DESCRIPTION
	Configure the host to chip hci flow control.
	
	The configuration uses a structure of type HOSTIO_FC_PS_BLOCK in
	which the only field currently used is:
	
	        bool   allow_sco_fc - if TRUE then the chip will allow SCO
	                  over HCI flow control to be turned on, else it
	                  will be refused.
	
	The remaining fields are redundant:
	
	        uint16 ncp_max_period - the default milliseconds between
	                  sending NCP (hci number of completed packets)
	                  events to the host.
	
	        uint16 acl_trip_level - the number of ACL packets required
	                  to cause an extra NCP event to be sent to the
	                  host.
	
	        uint16 sco_trip_level - the number of SCO packets required
	                  to cause an extra NCP event to be sent to the
	                  host.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO0 (0x0194)

SUMMARY
	Host transport channel 0 settings (BCSP ACK)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        0,      /* max_tx_payload_size. */ 
                        FALSE,  /* reliable_stream. */ 
                        0,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over BCSP channel 0.
	
	The host transport subsystem provides 16 channels, each of which is
	configured by a PROTOCOL_INFO struct held in the persistent store; 
	the structure is described below.
	
	BCSP channel 0 is dedicated to signalling between BCSP stacks, 
	specifically to carry message acknowledgements.  Therefore, it is not
	available as a channel to carry user messages through BCSP, and is 
	used by the BCSP host transport only.  
	
	While channel 0 is not aailable, the structure described below is used
	for the other channels in the host transport subsystem.
	
	The type PROTOCOL_INFO has the following fields:
	
	        uint16 max_tx_payload_size - The maximum size in bytes of
	                BCSP payload sent to the host.  For ACL and SCO the
	                actual maximum size will be the lower of the value
	                from PS and the value indicated to the BlueCore 
	                device in the host's HOST_BUFFER_SIZE command, if one 
	                has been received.  These values are checked at 
	                runtime against the size of hardware buffer allocated.
	
	        int:1 reliable_stream - TRUE (bit value of 1) if the protocol 
	                uses BCSP's reliable stream.
	
	        int:4 priority - A value between 0 and 7.  Lower values
	                have higher priority.  The priority is used by the
	                device's BCSP scheduler when deciding what data to
	                send to the host.
	
	        int:1 enabled - TRUE (bit value of 1) if the protocol is 
	                enabled. The current design of the firmware code 
	                requires each protocol to be enabled explicitly 
	                internally by the firmware, so this flag should 
	                always be FALSE.
	
	The last three fields are packed as bitfields in the second word, as 
	shown below:
	
	      Bits
	       0-9    Unused (second byte plus lower 2 bits).  Must be set
	                to 0.
	       10     enabled
	       11-14  priority
	       15     reliable_stream
	
	See "BCSP Channel Allocation"  document ID bcore-sp-007P for 
	additional information.   

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO1 (0x0195)

SUMMARY
	Host transport channel 1 settings (BCSP-LE)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        FALSE,  /* reliable_stream. */ 
                        0,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over BCSP channel 1.  This
	channel carries BCSP link establishment if BCSP is used.  This
	channel is used only when BCSP is the host transport, however the
	max_tx_packet_size and priority settings for this protocol will also
	be applied to non DFU USB traffic transmitted over the Control
	endpoint when BlueCore is using the USB host interface.
	
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO2 (0x0196)

SUMMARY
	Host transport channel 2 settings (BCCMD)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        3,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 2.
	This channel carries bccmd (BlueCore Command Interpreter Channel) - 
	the host to chip "private channel."  This channel is available for 
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO3 (0x0197)

SUMMARY
	Host transport channel 3 settings (HQ)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        3,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 3.
	This channel carries hq (host query) - the chip to host 
	"private channel." This channel is available for all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO4 (0x0198)

SUMMARY
	Host transport channel 4 settings (DM)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        512,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        4,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over channel 4.  This channel
	carries dm (device manager) traffic.  This channel is available for
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO5 (0x0199)

SUMMARY
	Host transport channel 5 settings (HCI CMD/EVT)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        259,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        5,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over channel 5.  This channel
	carries HCI commands and events.  This channel is available for all
	host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO6 (0x019a)

SUMMARY
	Host transport channel 6 settings (HCI ACL)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        512,   /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        6,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 6.
	This channel carries HCI ACL traffic.  This channel is available for
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO7 (0x019b)

SUMMARY
	Host transport channel 7 settings (HCI SCO)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        255,    /* max_tx_payload_size. */ 
                        FALSE,  /* reliable_stream. */ 
                        1,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 7.
	This channel carries HCI SCO traffic.  This channel is available for
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.
	
	See also PSKEY_HOSTIO_MIN_UART_HCI_SCO_SIZE.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO8 (0x019c)

SUMMARY
	Host transport channel 8 settings (L2CAP)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        2048,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 8.
	This channel carries L2CAP traffic.  This channel is available for
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.
	
	This channel also carries PAN (BNEP, TCP, UDP) traffic in PAN builds.
	In this case, if the value of max_tx_payload_size is less then 2048
	then a value of 2048 will be assumed instead.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO9 (0x019d)

SUMMARY
	Host transport channel 9 settings (RFCOMM)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        2048,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 9.
	This channel carries RFCOMM traffic.  This channel is available for
	all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO10 (0x019e)

SUMMARY
	Host transport channel 10 settings (SDP)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 10.
	This channel carries SDP traffic.  This channel is available for all
	host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO11 (0x019f)

SUMMARY
	Host transport channel 11 settings (TEST)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 11.
	This channel carries test information if BCSP is used.  This channel
	is available for all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO12 (0x01a0)

SUMMARY
	Host transport channel 12 settings (DFU)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        4095,   /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 12.
	This channel is used to upgrade the device firmware.  This channel is
	available for all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO13 (0x01a1)

SUMMARY
	Host transport channel 13 settings (VM)

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        256,    /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 13.
	This channel is used by the chip's application space (virtual
	machine).  This channel is available for all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO14 (0x01a2)

SUMMARY
	Host transport channel 14 settings

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        0,      /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 14.
	This channel is unallocated.  Since this is the last free channel,
	required extra channels should multiplex within this
	channel.  This channel is available for all host transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_PROTOCOL_INFO15 (0x01a3)

SUMMARY
	Host transport channel 15 settings

TYPE
	PROTOCOL_INFO

DEFAULT VALUE
	{ 
                        0,      /* max_tx_payload_size. */ 
                        TRUE,   /* reliable_stream. */ 
                        7,      /* priority. */ 
                        FALSE   /* enabled. */ }

DESCRIPTION
	Configure the protocol that flows over host transport channel 15.
	This channel is unallocated.  It should be reserved as a possible
	means of signalling a later version of BCSP between host and chip.
	(Alternatively, this could be done using an extension to the link
	establishment protocol.)  This channel is available for all host
	transports.
	
	The protocol is configured with a PROTOCOL_INFO structure.  The
	structure is described in the information on
	PSKEY_HOSTIO_PROTOCOL_INFO0.

==============================================================================
NAME
	PSKEY_HOSTIO_UART_RESET_TIMEOUT (0x01a4)

SUMMARY
	UART reset counter timeout

TYPE
	TIME

DEFAULT VALUE
	(0)

DESCRIPTION
	Configure the UART's reset counter timeout in microseconds.
	
	If the UART's receive data line is held low for this period then the
	chip's (hardware) resets itself. Accuracy is +/- 30%, so it's
	important to specify to the nearest microsecond. 
	
	If this value is zero then the feature is disabled.
	
	Values between 1 and 999 are treated as zero.
	
	This feature only works with the UART host transports: BCSP, H4, H5
	and VM access to the UART.
	
	(Type TIME is fundamentally a uint32.) 

==============================================================================
NAME
	PSKEY_HOSTIO_USE_HCI_EXTN (0x01a5)

SUMMARY
	Use hci_extn to route non-hci channels

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If the system is using BCSP and this key is FALSE then the non-HCI
	BCSP channels (currently 7: BCCMD, HQ, 4 higher layer access libs and
	the VM's channel) are routed via their BCSP channels. Otherwise, they
	are routed via hci_extn, which is described in CSR document
	CS-101682-SP (previously numbered as bcore-sp-009p) which is available
	from the CSR support website.
	
	If the system is using H4 or USB then these channels are always
	routed over hci_extn.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HOSTIO_USE_HCI_EXTN_CCFC (0x01a6)

SUMMARY
	Use command-complete flow control for hci_extn

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If the system is using hci_extn to carry the non-HCI channels (see
	the description of PSKEY_HOSTIO_USE_HCI_EXTN) and this key is TRUE
	then the chip emits an "hci command complete event" for each HCI
	manufacturer extension command.
	
	Setting this TRUE means that the host->chip data flow through
	hci_extn fits most closely to the HCI flow control model, but it also
	means the hci_extn channel has glacial performance.  If this is FALSE
	then the hci_extn traffic depends (only) on the tunnelled channels'
	own flow control mechanisms.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HOSTIO_HCI_EXTN_PAYLOAD_SIZE (0x01a7)

SUMMARY
	Maximum hci_extn payload size

TYPE
	uint16

DEFAULT VALUE
	(255)

DESCRIPTION
	If the system is using hci_extn to carry the non-HCI channels (see
	the description of PSKEY_HOSTIO_USE_HCI_EXTN) then this value
	specifies the maximum size of the HCI event payloads when primitives
	on non-HCI channels are fragmented.  This value is the size of the
	HCI event payload, of which one byte is used for the HCI-extn payload
	descriptor.  Hence each fragment will be (at most) one byte less than
	this value.  The minimum value for this PS value is therefore 2,
	though such a low value is likely to give extremely poor
	performance.  The maximum value is 255 (because the length field in
	the HCI event header is only 8 bits wide).
	
	Setting this value smaller than the maximum expected payload size
	forces hci_extn to fragment.  This can be good when the host
	connection carries time-critical traffic, notably SCO.

==============================================================================
NAME
	PSKEY_BCSP_LM_CNF_CNT_LIMIT (0x01aa)

SUMMARY
	BCSP link establishment conf message count

TYPE
	uint16

DEFAULT VALUE
	(20)

DESCRIPTION
	The value of this pskey is only used if PSKEY_USE_OLD_BCSP_LE is
	set to TRUE.
	
	Most early versions of the BCSP Link Establishment engine detected
	only that the peer BCSP stack had started - this is what the protocol
	was designed to do, as the protocol was written to support a host and
	BlueCore01 on the same circuit board (in a cell phone).
	
	Later versions of the BCSP Link Establishment engine use an extension
	that allows the local engine to spot when the peer engine restarts -
	typically the case when the peer reboots.
	
	To use this feature both sides of the BCSP link must support this
	extension and the value of this variable must be non-zero.  This
	variable sets the number of "conf" messages emitted by the local
	engine, as described in document CS-101681-SP (previously numbered
	as bcore-sp-008) available from the CSR support website.

==============================================================================
NAME
	PSKEY_HOSTIO_MAP_SCO_PCM (0x01ab)

SUMMARY
	Map SCO over PCM

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	At the time of writing this comment SCO over HCI only works over
	BCSP.  Code to support for SCO over USB and H4 is present, but
	it is untested.
	
	To route SCO data over the PCM port there are two choices:
	
		Use the BCCMD (private channel) command MAP_SCO_PCM to cause
		the next HCI Add_SCO_Connection command to route to a PCM
		port.
	
		Use this pskey.
	
	If this pskey is TRUE then all attempts to open SCO connections map
	to PCM ports.  I.e., this pskey overrides the BCCMD command.
	
	In HCI 14.X builds, only a single SCO stream can flow over the
	BlueCore2-EXT's PCM port.
	
	In HCI 15.X, and later, builds, setting the pskey causes all attempts
	to open SCO channels to run over *the first* PCM channel in the PCM
	port.  (The clock settings in PSKEY_PCM_CONFIG32 determine whether
	the PCM port can carry more than one SCO channel.)
	
	See PSKEY_HOSTIO_MAP_SCO_PCM_SLOT.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HOSTIO_BREAK_POLL_PERIOD (0x01ad)

SUMMARY
	Break poll period (microseconds)

TYPE
	TIME

DEFAULT VALUE
	(0)

DESCRIPTION
	The rate at which to poll the UART at start up in order to determine
	if the host is sending a break (continuous 0) in microseconds.
	Between polls the chip enters a low power state (deep sleep). If the
	break signal is removed, normal operation resumes.
	
	This key is intended to be used in conjunction with
	PSKEY_HOSTIO_UART_RESET_TIMEOUT and enables the host to force the
	chip into a low power state using a limited number of IO lines.
	
	To place the chip in a low power state, the host sends a continuous
	break which will force a (hardware) reset if the aforementioned key
	is set. After resetting, if the break is still present, the chip
	will enter a low power state, waking only at the rate defined by this
	key to check for the continuing presence of the break.
	
	A short delay (of a few hundred microseconds) will occur after the
	reset before the low power state is entered. This is due to the time
	required to initialise the ps and the support for deep sleep. 
	
	If this value is zero then the feature is disabled.
	
	This feature only works with the BCSP, H4 and H5 host transports.
	
	(Type TIME is fundamentally a uint32.) 

==============================================================================
NAME
	PSKEY_HOSTIO_MIN_UART_HCI_SCO_SIZE (0x01ae)

SUMMARY
	Minimum SCO packet size sent to host over UART HCI

TYPE
	uint16

DEFAULT VALUE
	(30)

DESCRIPTION
	A SCO link provides a steady flow of audio samples from air that
	have to be sent to the host. When SCO data is passed to the host
	over HCI (i.e., not over the chip's PCM port) the samples have to be
	formed into HCI SCO packets.
	
	This pskey sets the minimum number of *samples* in each HCI SCO
	packet sent to the host over a UART transport - BCSP and H4. (USB
	has separate rules for defining SCO transport.)
	
	Audio people will want this set to zero to minimise audio data
	latency, however this can crowd other data off the host transport.
	When the available host bandwidth is too low this can block all other
	traffic, so HCI ACL, HCI CMD/EVT, etc. stop flowing.

==============================================================================
NAME
	PSKEY_HOSTIO_MAP_SCO_CODEC (0x01b0)

SUMMARY
	Map SCO over the built-in codec

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Some versions of BlueCore include an audio codec, typically used to
	drive an external microphone and earpiece.  
	
	If this pskey is TRUE, and if PSKEY_HOSTIO_MAP_SCO_PCM is also TRUE,
	then all SCO connections are routed through the built-in audio codec
	rather than though the normal PCM interface.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_PCM_CVSD_TX_HI_FREQ_BOOST (0x01b1)

SUMMARY
	High frequency boost for PCM when transmitting CVSD

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Enables a high frequency emphasis filter used when transmitting voice
	samples over the radio using CVSD (only used when the host interface
	is the PCM interface).
	
	Unless advised by CSR the value should not be changed from the 
	default (disabled). The use of this pskey is deprecated. The pskey
	will be removed in a future release of the firmware.
	
	A value of 0 disables the filter.  Higher values provide increasing
	amounts of high frequency boost.

==============================================================================
NAME
	PSKEY_PCM_CVSD_RX_HI_FREQ_BOOST (0x01b2)

SUMMARY
	High frequency boost for PCM when receiving CVSD

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Enables a high frequency emphasis filter used when receiving voice
	samples over the radio using CVSD (only used when the host interface
	is the PCM interface).
	
	Unless advised by CSR the value should not be changed from the 
	default (disabled). The use of this pskey is deprecated. The pskey
	will be removed in a future release of the firmware.
	
	A value of 0 disables the filter.  Higher values provide increasing
	amounts of high frequency boost.

==============================================================================
NAME
	PSKEY_PCM_CONFIG32 (0x01b3)

SUMMARY
	PCM interface settings bitfields

TYPE
	uint32

DEFAULT VALUE
	(0x00800000)

DESCRIPTION
	PSKEY_PCM_CONFIG is only used in BlueCore01b firmware.  PSKEY_PCM_CONFIG32
	is used in firmware for BlueCore-2 and later devices.
	
	The key's complex bitfield value is described in the "BlueCore device data 
	book" for each BlueCore device. 
	
	See PSKEY_PCM_LOW_JITTER_CONFIG for more PCM configuration options.

==============================================================================
NAME
	PSKEY_USE_OLD_BCSP_LE (0x01b4)

SUMMARY
	Use the old version of BCSP link establishment

TYPE
	uint16

DEFAULT VALUE
	FALSE

DESCRIPTION
	If this pskey is set to FALSE then the firmware uses the BCSP Link
	Establishment protocol described in document CS-101681-SP (previously
	numbered as bcore-sp-008), otherwise it uses the older protocol
	described in bc01-s-010g.  
	
	The new protocol was modified to provide a more robust behavior when 
	a host spontaneously reboots or restarts. The new behavior only 
	differs significantly from the old one in that:
	
	    - The "choke" is turned off when moving from "curious" to
	      "garrulous".
	
	    - The "cnf_cnt_limit" logic is removed; "conf" messages are
	      continuously emitted in the "curious" state.
	
	Detailed descriptions of the state machines and signals can be found 
	in the CSR document "BCSP Link Establishment" document ID 
	CS-101681-SP.
	
	It may be necessary to set this pskey to TRUE if the host has an old 
	implementation of BCSP Link Establishment.  Old implementations
	may not support the "garrulous" state.
	
	See the comment for PSKEY_BCSP_LM_CNF_CNT_LIMIT.

==============================================================================
NAME
	PSKEY_PCM_CVSD_USE_NEW_FILTER (0x01b5)

SUMMARY
	CVSD uses the new filter if available

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	Versions of BlueCore2 starting with the first ROM version have a new
	version of the CVSD filter.  This is on by default but may be disabled
	by setting this key to FALSE.  The value is irrelevant for previous
	chip revisions, up to and including 0x89.
	
	On BlueCore3 with internal flash, setting this to FALSE enables an even
	newer version of the CVSD filter.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_PCM_FORMAT (0x01b6)

SUMMARY
	PCM data format

TYPE
	uint16

DEFAULT VALUE
	(0x006c)

DESCRIPTION
	The data format used to send SCO data over the PCM port. The format is
	the same as for HCI_Write_Voice_Setting. The bottom two bits of this
	key (air format) are always ignored and should be set to zero. The air
	format specified with HCI_Write_Voice_Setting will be used instead.
	
	The Bluetooth HCI spec mandates that devices boot up with 16 bit
	linear data format, unfortunately many PCM codecs do not expect this
	format so this key allows the HCI format to be overridden so that
	manufacturers can set it correctly for the hardware and application
	authors do not need to know the correct format.
	
	If this key is set to the magic value 0xffff then the format specified
	with HCI_Write_Voice_Settings will be used and hence the PCM format
	can be changed dynamically (this is almost never what you want).
	
	On BlueCore2 all PCM streams get the same format.
	
	On devices with an internal codec, if SCO data is routed to the
	internal codec then this key will be ignored and the correct value for
	the internal codec will be used.

==============================================================================
NAME
	PSKEY_CODEC_OUT_GAIN (0x01b7)

SUMMARY
	Audio output gain when using built-in codec

TYPE
	uint16

DEFAULT VALUE
	(0x0005)

DESCRIPTION
	Sets the audio output gain when using the built-in codec.
	
	The interpretation varies depending on the device.
	
	BlueCore2-External, 
	 Bits [2:0] set the gain (7 = maximum gain)
	
	BC5-MM
	 Bits [2:0] set the analogue gain (5 = unity gain)
	 Bits [7:4] set the digital gain (0 = unity gain)
	 Bit [10] enables an extra 3dB of gain on DAC_A
	 Bit [11] enables an extra 3dB of gain on DAC_B
	
	On other devices with a codec:
	 Bits [2:0] set the analogue gain (5 = unity gain)
	 Bits [7:4] set the digital gain (0 = unity gain)
	 Bits [9:8] set the sigma-delta gain (0 = nominal)

==============================================================================
NAME
	PSKEY_CODEC_IN_GAIN (0x01b8)

SUMMARY
	Audio input gain when using built-in codec

TYPE
	uint16

DEFAULT VALUE
	(0x0008)

DESCRIPTION
	Sets the audio input gain when using the built-in codec.
	
	The interpretation varies depending on the device.
	
	BlueCore2 External, 
	 Bits [3:0] set the gain (0xF = maximum)
	
	BC3-MM and BC5-MM
	 Bits   [3:0] set the analogue gain    (8 = optimum noise)
	 Bits   [7:4] set the digital gain     (0 = unity gain)
	
	On other devices with a codec:
	 Bits   [3:0] set the analogue gain    (8 = optimum noise)
	 Bits   [7:4] set the digital gain     (0 = unity gain)
	 Bit      [8] enables scaling down of DAC outputs

==============================================================================
NAME
	PSKEY_CODEC_PIO (0x01b9)

SUMMARY
	PIO to enable when built-in codec is enabled

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	Sets the Bluecore pin to drive high when the built-in codec is
	enabled. This is typically used to bias the microphone input.
	
	When this key is not set, no PIO pin is enabled.
	
	On older BlueCore firmware selecting PIO15 would instead use AUX_DAC.
	On newer firmware the value AUX_DAC should be used instead.

==============================================================================
NAME
	PSKEY_PCM_LOW_JITTER_CONFIG (0x01ba)

SUMMARY
	PCM interface settings for low jitter master mode

TYPE
	uint32

DEFAULT VALUE
	(0x00000000)

DESCRIPTION
	Additional PCM configuration to support master mode with much reduced
	jitter on the clock.  This is required to support certain external
	codec chips.
	
	Only useful for chips starting with BlueCore2-ROM.
	
	See PSKEY_PCM_CONFIG32 for more PCM configuration options.

==============================================================================
NAME
	PSKEY_HOSTIO_SCO_PCM_THRESHOLDS (0x01bb)

SUMMARY
	Thresholds for SCO PCM buffers

TYPE
	uint16[]

DEFAULT VALUE
	{8, 20}

DESCRIPTION
	Sets the upper and lower thresholds for the buffers used to hold SCO
	data flowing between air and the PCM port.
	
	The thresholds are checked just before a packet is received from air
	and just after a packet is sent to air.
	
	If the data pending in the buffer exceeds the upper threshold when the
	level is checked, a sample is deleted from the buffer.If the pending
	data in the buffer drops below the lower threshold, a sample is
	inserted into the buffer.
	
	The thresholds are held as a uint16[2]. The first value gives the
	lower threshold and the second value gives the upper threshold.
	
	This PS key has no effect on some versions of firmware.

==============================================================================
NAME
	PSKEY_HOSTIO_SCO_HCI_THRESHOLDS (0x01bc)

SUMMARY
	Thresholds for SCO HCI buffers

TYPE
	uint16[]

DEFAULT VALUE
	{10, 80}

DESCRIPTION
	Sets the upper and lower thresholds for the buffers used to hold SCO
	data flowing between air and the HCI.
	
	The thresholds are checked just before a packet is received from air
	and just after a packet is sent to air.
	
	When the thresholds are exceeded, the firmware will insert or delete
	single samples or groups of samples to bring the amount of data
	pending in the buffer into range. The exact behaviour depends on
	whether the SCO data is in transparent format and which host transport
	is in use.
	
	The thresholds are held as a uint16[2]. The first value gives the
	lower threshold and the second value gives the upper threshold.
	
	This PS key has no effect on some versions of firmware.

==============================================================================
NAME
	PSKEY_HOSTIO_MAP_SCO_PCM_SLOT (0x01bd)

SUMMARY
	Route SCO data to specified slot in pcm frame

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	When the pskey PSKEY_HOSTIO_MAP_SCO_PCM is TRUE, the first SCO
	channel opened is routed over the chip's PCM port.  While this SCO
	channel is in place, all subsequent attempts to open extra SCO
	channels fail.
	
	The SCO channel is routed over the PCM timing frame slot defined by
	this pskey.  This pskey's default value, zero, routes to "the first"
	PCM slot.
	
	The number of slots in the PCM port's timing frame depends on the
	value of PSKEY_PCM_CONFIG32; there's no point in setting
	PSKEY_HOSTIO_MAP_SCO_PCM_SLOT to 3, asking for SCO data to travel
	over the 4th slot in the PCM frame if the PCM channel's clock rate
	only supports a single slot per frame.
	
	(This pskey is available only in builds for BlueCore-2 and later
	chips.  Functionality equivalent to this pskey is available in
	BlueCore01b builds using a bit field in PSKEY_PCM_CONFIG, a pskey
	absent from builds for BlueCore-2 and later chips.)

==============================================================================
NAME
	PSKEY_UART_BAUDRATE (0x01be)

SUMMARY
	UART Baud rate

TYPE
	uint16

DEFAULT VALUE
	(0x009d)

DESCRIPTION
	The UART's (initial) Baud rate in builds from HCI 18.X. (This PS
	key's name is similar to PSKEY_UART_BAUD_RATE, used in firmware
	builds before HCI 18.X.)
	
	A value of 0 has a special meaning which is to enable automatic
	detection of the UART baud rate from data sent by the host to the
	BlueCore following a chip reset. Note that this is designed for
	use with ROM devices; automatic detection of Baud rate does not
	work for the DFU upgrade procedure.
	
	When the system is configured to use a UART-based host transport,
	i.e. if PSKEY_HOST_INTERFACE selects BCSP, H4, H5 or "User" (VM
	access to the UART), then the UART's Baud rate is set to the value
	of this PS key when the firmware boots. The PS key's value is:
	
	        Baud rate = pskey_value/0.004096
	
	Some common values are:
	        38k4 baud - 157 (0x009d)
	        57k6 baud - 236 (0x00ec)
	        115k2 baud - 472 (0x01d8)
	        230k4 baud - 944 (0x03b0)
	        460k8 baud - 1887 (0x075f)
	        921k6 baud - 3775 (0x0ebf)
	        1382k4 baud - 5662 (0x161e)
	
	The maximum rated speed for the UART hardware is 1.5 Mbaud, although
	this key can be set to a higher value.
	
	The BCCMD command "Config_UART" enables the host to set the UART
	to a different Baud rate after booting, but the change is lost
	when the firmware reboots.

==============================================================================
NAME
	PSKEY_UART_CONFIG_BCSP (0x01bf)

SUMMARY
	UART configuration when using BCSP

TYPE
	uint16

DEFAULT VALUE
	(0x0806)

DESCRIPTION
	If PSKEY_HOST_INTERFACE selects use of BCSP then the UART's
	configuration register is set to the value of this PS key when it
	boots. 
	
	The UART configuration register is a bitfield:
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	The default value, 0x0806, selects use of BCSP mode and even parity.

==============================================================================
NAME
	PSKEY_UART_CONFIG_H4 (0x01c0)

SUMMARY
	UART configuration when using H4

TYPE
	uint16

DEFAULT VALUE
	(0x08a8)

DESCRIPTION
	If PSKEY_HOST_INTERFACE selects use of H4 then the UART's
	configuration register is set to the value of this PS key when it
	boots. 
	
	The UART configuration register is a bitfield and shares its
	format with PSKEY_UART_CONFIG_BCSP:
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	The default value, 0x08a8, selects use of hardware flow control,
	as required by the H4 specification.

==============================================================================
NAME
	PSKEY_UART_CONFIG_H5 (0x01c1)

SUMMARY
	UART configuration when using H5

TYPE
	uint16

DEFAULT VALUE
	(0x1806)

DESCRIPTION
	If PSKEY_HOST_INTERFACE selects use of H5 then the UART's
	configuration register is set to the value of this pskey when it
	boots. 
	
	The UART configuration register is a bitfield:
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	(The "H5" host transport protocol is properly known as the "Three
	Wire Uart Transport Layer", but is commonly known as H5 within
	CSR.)
	

==============================================================================
NAME
	PSKEY_UART_CONFIG_USR (0x01c2)

SUMMARY
	UART configuration when under VM control

TYPE
	uint16

DEFAULT VALUE
	(0x08a8)

DESCRIPTION
	If PSKEY_HOST_INTERFACE selects use of VM access to the UART then
	the UART's configuration register is set to the value of this PS
	key when it boots. 
	
	The UART configuration register is a bitfield:
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	The default value, 0x08a8, selects use of hardware flow control.

==============================================================================
NAME
	PSKEY_UART_TX_CRCS (0x01c3)

SUMMARY
	Use CRCs for BCSP or H5

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	Determines whether CRCs are used in BCSP packets sent to the host.
	
	This PS key is also used with H5.
	
	(The "H5" host transport protocol is properly known as the
	"Three-Wire UART Transport Layer", but is commonly known as H5
	within CSR.)

==============================================================================
NAME
	PSKEY_UART_ACK_TIMEOUT (0x01c4)

SUMMARY
	Acknowledgement timeout for BCSP and H5

TYPE
	uint16

DEFAULT VALUE
	(250)

DESCRIPTION
	When the firmware sends a reliable message over BCSP it starts a
	timer.  The timer's period is the value of this pskey in
	milliseconds.  If the host acknowledges reception of the message
	before the timer fires then the timer is cancelled.  If the timer
	fires then the message is sent again and another timer started, etc.
	
	It is possible to limit the number of times a timer will be used for
	a given reliable BCSP message using PSKEY_UART_TX_MAX_ATTEMPTS.
	
	This pskey is also used with H5.
	
	(The "H5" host transport protocol is properly known as the "Three
	Wire Uart Transport Layer", but is commonly known as H5 within CSR.)
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P
	for additional information.
	
	In builds from HCI 18.X, this key replaces PSKEY_UART_SEQ_TIMEOUT.

==============================================================================
NAME
	PSKEY_UART_TX_MAX_ATTEMPTS (0x01c5)

SUMMARY
	Max times to send reliable BCSP or H5 message

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The description of PSKEY_UART_ACK_TIMEOUT outlines BCSP's mechanism
	to retransmit reliable messages to the host until acknowledged.
	
	The value of PSKEY_UART_TX_MAX_ATTEMPTS sets a limit on the number of
	times the send/timeout cycle will be attempted.  If this limit is
	reached, firmware will panic (and normally reboot).
	
	Messages are sent indefinitely if this pskey is set to zero, i.e.,
	the value zero is treated as infinity.
	
	This pskey is also used with H5.
	
	(The "H5" host transport protocol is properly known as the "Three
	Wire Uart Transport Layer", but is commonly known as H5 within CSR.)
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P
	for additional information.
	
	In builds from HCI 18.X, this key replaces PSKEY_UART_SEQ_RETRIES.

==============================================================================
NAME
	PSKEY_UART_TX_WINDOW_SIZE (0x01c6)

SUMMARY
	Transmit window size for BCSP and H5

TYPE
	uint16

DEFAULT VALUE
	(4)

DESCRIPTION
	This is the size of the sliding window used by BCSP.
	
	When the baseband sends a reliable BCSP message to the host then the
	host is required to acknowledge its reception.  If it is not
	acknowledged within a certain period the message is sent again.
	
	The baseband will send several packets to the host before waiting for
	the first of the packets to be acknowledged.  The maximum number of
	sent packets that can be unacknowledged at any time is set by this
	pskey.  Once a packet is acknowledged, the next packet will be sent.
	Under normal circumstances, the number of packets in transit to the
	peer is the value of PSKEY_UART_TX_WINDOW_SIZE.
	
	This pskey is also used with H5.  Note that H5 is often referred to
	as "Three Wire UART Transport Layer," or TW-UTL, or TWUTL.
	
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-01P
	for additional information.
	
	In builds from HCI 18.X, this key replaces PSKEY_UART_SEQ_WINSIZE.

==============================================================================
NAME
	PSKEY_UART_HOST_WAKE (0x01c7)

SUMMARY
	UART host wakeup

TYPE
	uint16[]

DEFAULT VALUE
	{4, 		/* disable */ 
			500,            /* ms before host sleeps */ 
			10,             /* ms wakeup pulse needed */ 
			0}              /* ms pause before comms */

DESCRIPTION
	Configure the use of a wakeup signal by the BlueCore to wake the peer
	UART device from a low power state. The wakeup signal, which may be
	either a UART break condition or a pulse on a PIO line, is specified
	via a separate PS key, PSKEY_UART_HOST_WAKE_SIGNAL. 
	
	If this PS key's mechanism is turned on, the firmware judges when the
	peer may have entered its deep sleep state based on timers, and the
	local device can be set to emit a wakeup signal before sending data
	to the peer. Normally the length of the break condition is set to be
	sufficient to allow the peer to come fully awake as the local device
	will normally send a message to the peer afterwards.
	
	Most systems do not require the BlueCore to emit a wakeup signal to
	wake up the peer device. Systems using the BCSP transport, for
	example, support the host and baseband entering a deep sleep state,
	in which their UARTs are disabled. The devices may enter deep sleep
	when they choose, without warning that they are about to enter deep
	sleep and without signaling when they are in deep sleep. When one
	device wishes to send data to its peer it sends a message; the
	message can be lost (because the peer's UART may be turned off) but
	the presence of the message rouses the peer. For reliable BCSP
	channels the message is resent if it has not been acknowledged after
	a delay (set by PSKEY_UART_ACK_TIMEOUT), and the message normally
	gets through the second time, as the peer is then awake. This
	mechanism is entirely adequate for most systems, but using a host
	wakeup signal may reduce delay implied by PSKEY_UART_ACK_TIMEOUT.
	
	This use of wakeup signals by the BlueCore is turned off by default,
	as this suits most systems.
	
	This PS key has four uint16 parameters:
	
	    Enable: Values: 1 => enable mechanism
	                    4 => disable mechanism
	    Sleep_Delay: Milliseconds after tx to host or rx from host, after 
	                    which host will be assumed to have gone into its
	                    deep sleep state. (Range 1 -> 65535.)
	                    When using BCSP or H5 host transports it is 
	                    recommended that this is greater than the
	                    acknowledge delay (set by PSKEY_UART_ACK_TIMEOUT).
	    Break_Length: Duration of wake signal in milliseconds.
	                    (Range 1 -> 1000.)
	    Pause_Length: Milliseconds between end of wake signal and
	                    sending data to the host. (Range 0 -> 1000.) 

==============================================================================
NAME
	PSKEY_HOSTIO_THROTTLE_TIMEOUT (0x01c8)

SUMMARY
	Host interface performance control.

TYPE
	TIME

DEFAULT VALUE
	(200 * MILLISECOND)

DESCRIPTION
	This key modifies the behaviour of the BlueCore's host interface
	code. It should only be configured on advice from CSR.
	
	PSKEY_NOTE_START
	If the scheduler is blocked by interrupts (for a time specified by
	PSKEY_SCHED_THROTTLE_TIMEOUT), execution of the hostio interrupt
	handlers is delayed to give the scheduler time to run. The maximum
	time for which these interrupt handlers can be delayed is specified
	by this PS key (in microseconds). 
	PSKEY_NOTE_END

==============================================================================
NAME
	PSKEY_PCM_ALWAYS_ENABLE (0x01c9)

SUMMARY
	PCM port is always enable when chip is running

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	By default, the PCM port is only enabled when it is in use for audio.
	If this key is set to TRUE, the PCM port will be turned on when the
	chip boots and will remain on until reset.  This has considerable
	implications for power consumption.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_UART_HOST_WAKE_SIGNAL (0x01ca)

SUMMARY
	Signal to use for uart host wakeup protocol

TYPE
	uint16

DEFAULT VALUE
	(0x0000)

DESCRIPTION
	BlueCore can be configured to output a wakeup signal to the host
	prior to sending it data if it considers that the host may be in a
	low power state. PSKEY_UART_HOST_WAKE enables this wakeup signalling
	and specifies the various timers required.
	PSKEY_UART_HOST_WAKE_SIGNAL is used to specify the wakeup signal to
	use: this is a UART break signal, a pulse on a PIO line or, for the
	H4DS transport only, a repeated byte sequence.
	
	This PS key's value is a bitfield, allocated as:
	   bits 0 to 3: Host Wake Mechanism. Values:
	                     0 - repeated byte sequence (only for H4DS)
	                     1 - positive pulse on PIO
	                     2 - negative pulse on PIO
	                     3 - UART BREAK condition
	   bits 4 to 7: PIO pin selection. Value selects PIO pin.
	
	If the Host Wake Mechanism is 0x00, BlueCore will send a repeated
	byte sequence. The duration of the byte train is specified by
	PSKEY_H4DS_WAKE_DURATION. This mechanism is available for the H4DS
	transport only. The byte sequence has been chosen to work well with
	BlueCore's Baud rate detection capability.
	
	If 0x00 is chosen when the host transport is not H4DS a UART BREAK 
	condition will be used.
	
	If the Host Wake Mechanism is 0x01 then a positive pulse is signalled
	on the PIO pin selected by bits 4->7. (Value 0x0 in bits 4->7 selects
	PIO[0], value 0x01 selects PIO[1], etc.). The duration of the pulse is
	specified by PSKEY_H4DS_WAKE_DURATION for the H4DS transport and by
	PSKEY_UART_HOST_WAKE for all other host transports.
	
	If the Host Wake Mechanism is 0x02 then a negative pulse is signalled
	on the PIO pin selected by bits 4->7. The duration of the pulse is
	specified by PSKEY_H4DS_WAKE_DURATION for the H4DS transport, and by
	PSKEY_UART_HOST_WAKE for all other host transports.
	
	If the Host Wake Mechanism is 0x03 then a break condition is signalled
	by the UART. The duration of the break signal is specified by
	PSKEY_H4DS_WAKE_DURATION for the H4DS transport, and by
	PSKEY_UART_HOST_WAKE for all other host transports.

==============================================================================
NAME
	PSKEY_UART_CONFIG_H4DS (0x01cb)

SUMMARY
	UART configuration when using H4DS

TYPE
	uint16

DEFAULT VALUE
	(0x08a8)

DESCRIPTION
	If PSKEY_HOST_INTERFACE selects use of H4DS then the UART's
	configuration register is set to the value of this  PS key when the
	system boots.  
	
	The UART configuration register is a bitfield:
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	The default value, 0x08a8, selects use of hardware flow control, as
	required by the H4 (sic) specification. 

==============================================================================
NAME
	PSKEY_H4DS_WAKE_DURATION (0x01cc)

SUMMARY
	How long to spend waking the host when using H4DS

TYPE
	uint16

DEFAULT VALUE
	(0x0020)

DESCRIPTION
	The H4DS protocol requires BlueCore to wake the host if it believes
	the host may be asleep.  The protocol requires that this is performed
	by sending a repeating byte sequence of sufficient duration to wake
	the host, to allow the host to initialise its UART, and to lock onto
	the byte train.  The (minimum) duration of the byte sequence is
	configured with this pskey.
	
	The pskey's value is in milliseconds.  The corresponding number of
	bytes in the wakeup signal is calculated using the value of
	PSKEY_UART_BAUDRATE.
	
	This pskey only has an effect when the H4DS host transport is in use,
	as configured with PSKEY_HOST_INTERFACE.
	
	See PSKEY_UART_HOST_WAKE_SIGNAL.

==============================================================================
NAME
	PSKEY_H4DS_MAXWU (0x01cd)

SUMMARY
	Maximum number of H4DS Wake-Up messages to send

TYPE
	uint16

DEFAULT VALUE
	(50)

DESCRIPTION
	The H4DS specification requires BlueCore to send Wake-Up messages
	to the host until the host responds.  There's no point sending
	Wake-Up messages indefinitely if the peer fails to respond - it
	just wastes the BlueCore's power. (The host may not have been switched
	on, or perhaps the UART cable has not been plugged in.)  Consequently,
	the H4DS specification provides a mechanism to limit the number of
	Wake-Up messages sent to the host in one batch.  If the limit is
	reached, BlueCore stops sending Wake-Up messages until it hears (any)
	UART traffic from the host.
	
	This pskey sets the limit, "MAXWU" in the specification.
	
	A value of zero is treated as infinity, i.e., the baseband does not
	stop sending Wake-Up messages when the host does not respond.
	
	Very small positive values (below 10) may cause problems.

==============================================================================
NAME
	PSKEY_H4DS_LE_TIMER_PERIOD (0x01cf)

SUMMARY
	H4DS Link Establishment Tsync and Tconf period

TYPE
	uint16

DEFAULT VALUE
	(250)

DESCRIPTION
	The H4DS specification's Link Establishment engine uses a pair of
	timers with periods Tsync and Tconf.  This pskey sets the duration
	of both timers.  The pskey's value is in milliseconds.

==============================================================================
NAME
	PSKEY_H4DS_TWU_TIMER_PERIOD (0x01d0)

SUMMARY
	H4DS Twu timer period

TYPE
	uint16

DEFAULT VALUE
	(250)

DESCRIPTION
	The H4DS specification's Deep Sleep engine uses a timer with period
	Twu to schedule the transmission of Wake-Up messages.  This pskey
	sets the duration of the timer.  The pskey's value is in milliseconds.

==============================================================================
NAME
	PSKEY_H4DS_UART_IDLE_TIMER_PERIOD (0x01d1)

SUMMARY
	H4DS Tuart_idle timer period

TYPE
	uint16

DEFAULT VALUE
	(50)

DESCRIPTION
	The H4DS specification requires a device to detect when the UART
	has become idle.  The BlueCore implementation achieves this by
	running a timer with period Tuart_idle, the action function for
	which asks "has any traffic flowed since the timer was started?".
	If the answer is "no", the UART is considered to have become idle.
	This pskey sets the duration of the timer.  The pskey's value is
	in milliseconds.

==============================================================================
NAME
	PSKEY_DIGITAL_AUDIO_CONFIG (0x01d9)

SUMMARY
	Digital Audio Interface configuration settings

TYPE
	uint16

DEFAULT VALUE
	(0x0006)

DESCRIPTION
	KEY_DIGITAL_AUDIO_CONFIG controls the configuration of the Digital
	Audio Interface. This is typically used for configuring the I2S
	format.
	
	The key's complex bitfield value is described in the "BlueCore device
	data book" for each BlueCore device. 

==============================================================================
NAME
	PSKEY_DIGITAL_AUDIO_RATE (0x01da)

SUMMARY
	Digital Audio Interface override for port clock rate

TYPE
	uint32

DEFAULT VALUE
	(0x00000000)

DESCRIPTION
	When acting as a master on the Digital Audio Interface, typically
	using I2S or DSP mode, this key allows the user to define the exact
	clock rate generated.  Specified in Hertz.
	
	If set to zero, the BlueCore will calculate the clock rate based
	upon the sample rate and bits per sample.

==============================================================================
NAME
	PSKEY_DIGITAL_AUDIO_BITS_PER_SAMPLE (0x01db)

SUMMARY
	Digital Audio Interface bits per sample

TYPE
	uint16

DEFAULT VALUE
	(24)

DESCRIPTION
	This key defines how many bits the Digital Audio Interface clocks per
	sample.  For I2S, if the number of bits per sample is larger than the
	internal audio format used by BlueCore, the additional bits will be
	output as zeros in the LSBs.
	
	This value is used to caculate the port clock rate and hence is
	ignored if PSKEY_DIGITAL_AUDIO_RATE is used to defined a specific
	rate.

==============================================================================
NAME
	PSKEY_PCM_SLAVE_PROVIDE_CLOCK (0x01e5)

SUMMARY
	PCM slave will provide the PCM clock

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key controls whether the BlueCore chip will provide the clock
	on the PCM bus when configured as PCM slave.
	PSKEY_PCM_LOW_JITTER_CONFIG must hold a valid setting for this key
	to have any effect.

==============================================================================
NAME
	PSKEY_USB_HOST_WAKE_ENABLE (0x01eb)

SUMMARY
	Enable USB host wakeup

TYPE
	uint16

DEFAULT VALUE
	(0x0004)        /* both functions disabled */

DESCRIPTION
	This PS key allows the host wake up mechanism for USB to be enabled. 
	If the USB host wake mechanism is turned on the firmware judges when 
	the peer may have entered its deep sleep state based on timers, and 
	the local device can be set to emit a wakeup signal before sending 
	data to the peer. Normally the length of the host wake signal is set 
	to be sufficient to allow the peer to come fully awake as the local 
	device will normally send a message to the peer straight afterwards.
	
	It also allows a further setting, Tx_Remains_Asleep, to be enabled.
	If this setting is enabled the chip will assume that the host remains
	asleep even when it has transmitted data. This means the chip will 
	attempt to wake the host whenever it has data to transmit regardless
	of whether the host transmitted recently or not. The only time it will
	not wake the host for a transmit is if it is transmitting for a second
	time within the host wake period, and so woke the host recently.
	
	This PS key's value is a bitfield, allocated as:
	        bits 0 to 3: Enable:      1 => enable mechanism
	                                  4 => disable mechanism
	        bit 4: Tx_Remains_Asleep: 1 => enabled
	                                  0 => disabled
	
	The use of wakeup signals by the BlueCore is turned off by default
	as this suits most systems.

==============================================================================
NAME
	PSKEY_USB_HOST_WAKE_TIME (0x01ec)

SUMMARY
	USB host wakeup times

TYPE
	uint32[]

DEFAULT VALUE
	{500000, /* microseconds before host sleeps */ 
                        500,     /* microseconds wakeup pulse */ 
                        0}       /* microseconds pause before comms */

DESCRIPTION
	Configure the use of a wakeup signal by the BlueCore to wake the peer
	USB device from a low power state. This wakeup mechanism is enabled 
	via PSKEY_USB_HOST_WAKE_ENABLE. The wakeup signal, which is a pulse 
	on a PIO line, is specified via a separate PS key, 
	PSKEY_USB_HOST_WAKE_SIGNAL.
	
	This PS key has three uint32 parameters:
	   Sleep_Delay:         Microseconds after tx to host, or rx from 
	                        host after which the host will be assumed  
	                        to have gone into its deep sleep state. 
	                        (Range 1 -> 4294967295)
	   HWake_Signal_Length: Minimum duration of wake signal in 
	                        microseconds.
	                        (Range 0 -> 1000000)
	   Pause_Length:        Microseconds between end of wake signal 
	                        and sending of data to the host. 
	                        (Range 0 -> 1000000) 
	
	The minimum HWake_Signal_Length that can actually be produced is 
	15us. This can be achieved by setting the value to 0us. 

==============================================================================
NAME
	PSKEY_USB_HOST_WAKE_SIGNAL (0x01ed)

SUMMARY
	Signal to use for the USB host wakeup protocol

TYPE
	uint16

DEFAULT VALUE
	0x0031

DESCRIPTION
	If the host wakeup mechanism for USB is enabled via 
	PSKEY_USB_HOST_WAKE_ENABLE, this PS key can be used to specify the
	wakeup signal to use: either a positive or negative pulse on a PIO
	line.
	
	This PS key's value is a bitfield, allocated as:
	        bits 0 to 3: Host Wake Mechanism. 1 => positive pulse on PIO
	                                          2 => negative pulse on PIO
	        bits 4 to 7: PIO pin selection. Value selects PIO pin.

==============================================================================
NAME
	PSKEY_USB_DATA_PLUS_PULL_CONTROL (0x01f0)

SUMMARY
	Signal to determine when D+ is activated on boot

TYPE
	uint16

DEFAULT VALUE
	(AS_SOON_AS_POSSIBLE)

DESCRIPTION
	By default, D+ will be activated during initialization as per the USB 
	standard.  If PSKEY_USB_DATA_PLUS_PULL_CONTROL is set to
	AFTER_CONFIGURATION, D+ will only be activated once configuration is
	complete.

==============================================================================
NAME
	PSKEY_ANA_FTRIM (0x01f6)

SUMMARY
	Crystal frequency trim

TYPE
	uint16

DEFAULT VALUE
	(0x1d)

DESCRIPTION
	BlueCore uses a crystal as the basis of all of its accurate timing,
	notably radio frequency control, UART baud rate and precise event
	timing.  Each real crystal oscillates at a slightly different
	frequency.  This ps value trims the crystal to an optimal value.
	
	This value must be set per crystal, i.e. it will need to be
	configured for each manufactured Bluetooth module.

==============================================================================
NAME
	PSKEY_WD_TIMEOUT (0x01f7)

SUMMARY
	Watchdog timeout (microseconds)

TYPE
	TIME

DEFAULT VALUE
	(5 * SECOND)

DESCRIPTION
	BlueCore has hardware support to run a watchdog timer.  This is a
	timer that is set to the value of this key every time it is
	"kicked" - written to by the firmware.  If the firmware fails to
	kick the watchdog within this period the chip's watchdog hardware
	forces a hardware reset of the chip.  This is to support the
	outlandish possibility that the chip's firmware might crash or hang
	up.
	
	The value is in microseconds.   If the value is zero the watchdog is
	disabled.
	
	See the description of PSKEY_WD_PERIOD.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.)

==============================================================================
NAME
	PSKEY_WD_PERIOD (0x01f8)

SUMMARY
	Watchdog period (microseconds)

TYPE
	TIME

DEFAULT VALUE
	(3 * SECOND)

DESCRIPTION
	Set the watchdog period - (nominally) the microseconds between
	kicking the watchdog hardware.
	
	This should be no more than 70% of PSKEY_WD_TIMEOUT (unless the
	timeout value is zero).
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.)

==============================================================================
NAME
	PSKEY_HOST_INTERFACE (0x01f9)

SUMMARY
	Host interface

TYPE
	phys_bus

DEFAULT VALUE
	(phys_bus_bcsp)

DESCRIPTION
	Select the physical connection that is used to pass information to
	and from the host - BCSP, H4, USB, etc.  Only one of these can be
	used at a time, not least because the USB interface uses some of
	the same chip pins as the UART.
	
	Much of the chip's support for BCSP/H5 is performed by hardware -
	this allows interrupt routines to deal with complete BCSP/H5 packets.
	When the chip uses its UART in a more naive fashion, e.g., for H4,
	this support must be disabled.  The UART's hardware support for
	BCSP/H5 must be enabled via PSKEY_UART_CONFIG_BCSP/H5.
	
	The H4 specification requires the use of UART hardware flow control
	and no use of parity.  These must also be set via PSKEY_UART_CONFIG_H4.
	
	Type phys_bus is really a uint16.  The pskey takes values:
	
	        0 - No chip to host connection
	        1 - BCSP
	        2 - H2 - USB
	        3 - H4 - UART
	        4 - VM access to the UART
	        6 - H5
	        7 - H4DS
	        9 - SDIO
	
	(The "H5" host transport protocol is properly known as the "Three
	Wire Uart Transport Layer", but is commonly known as H5 within CSR.)

==============================================================================
NAME
	PSKEY_HQ_HOST_TIMEOUT (0x01fb)

SUMMARY
	HQ host command timeout

TYPE
	TIME

DEFAULT VALUE
	(5 * SECOND)

DESCRIPTION
	Each HQ (host query) message sent to the host should provoke a 
	corresponding reply from the host.  This ps key sets the period in 
	microseconds for which the HQ  task waits before giving up 
	waiting for the reply.
	
	Note:  Type TIME is fundamentally a uint32.  Value SECOND is 1000000.
	
	See PSKEY_HQ_ACTIVE.
	
	See "HQ Protocol" document ID bcore-sp-011P for additional 
	information.
	
	See "HQ Commands" document ID bcore-sp-003P for additional 
	information.

==============================================================================
NAME
	PSKEY_HQ_ACTIVE (0x01fc)

SUMMARY
	Enable Host Query Task

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	The device's hq (host query) task can send messages to the host over
	either BCSP channel 3 or tunnelled through the CSR manufacturer
	specific HCI extensions.  The channel's protocol has an RPC-style
	structure, which means each message should cause the host to send a
	corresponding response back to the chip.  The protocol is described
	in CSR document CS-101684-SP (previously numbered as bcore-sp-011)
	which is available from the CSR support website.
	
	If PSKEY_HQ_ACTIVE is set to TRUE (1), then the device's HQ task is
	enabled.  If PSKEY_HQ_ACTIVE is set to FALSE (0), then the device's
	HQ task is configured so that no HQ traffic is sent to the host.
	
	See PSKEY_HQ_HOST_TIMEOUT.
	
	See "HQ Protocol"  document ID bcore-sp-011Pb for additional 
	information.
	
	See "HQ Commands"  document ID bcore-sp-003Pc for additional 
	information.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_BCCMD_SECURITY_ACTIVE (0x01fd)

SUMMARY
	Enable configuration security

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	The firmware's bccmd task presents a command interpreter to the host
	in a manner similar to HCI.  The command interpreter's command set is
	not part of any Bluetooth standard - it is specific to the BlueCore
	chips and firmware.  The command set is used for such things as
	monitoring and controlling the chip, running radio tests, etc.  The
	command set is described in "BCCMD Commands," CSR document ID
	bcore-sp-005P.
	
	The command interpreter is accessed via the BCCMD protocol.  The BCCMD
	protocol is described in "BCCMD Protocol," CSR document ID
	bcore-sp-002P.  This can run over a BCSP channel (channel 2, see
	"BCSP Channel Allocation," CSR document ID bcore-sp-007P), over a CSR 
	manufacturer-specific HCI extension channel or over the chip's SPI 
	interface.
	
	The bccmd task provides a simple access control mechanism for BCCMD
	commands presented over BCSP or HCI-extension; this mechanism is not
	present for SPI access.
	
	This pskey enables the security mechanism.  The security mechanism is
	described in "BCCMD Protocol Security," CSR document ID bcore-sp-006P.
	
	When a BlueCore module is freshly manufactured this bool flag is set
	FALSE.  The host may then read and write all ps values and can run
	all of the BCCMD commands.  This allows the manufacturer to configure
	the Bluetooth module.
	
	When the configuration is complete the manufacturer sets this pskey
	to TRUE.  This enables the ps and bccmd access controls.  Once set
	TRUE this key cannot be set back to FALSE via BCSP running over the
	BCSP extension channel or the HCI extension channel.  Setting security
	active is thus normally a one-way operation.
	
	Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.
	
	See "BCCMD Protocol Security" document ID bcore-sp-006P for additional
	information.
	
	See "BCCMD Protocol" document ID bcore-sp-002P for additional 
	information.
	
	See "BCCMD Commands" document ID bcore-sp-005P for additional 
	information.
	
	See "BCSP Channel Allocation" document ID bcore-sp-007P for additional
	information.

==============================================================================
NAME
	PSKEY_ANA_FREQ (0x01fe)

SUMMARY
	Crystal frequency

TYPE
	uint16

DEFAULT VALUE
	(26000)

DESCRIPTION
	Configures the BlueCore hardware to work with a particular reference clock
	frequency.
	
	For chips prior to BlueCore2-ROM the default, 4, configures the chip to
	use a 16 MHz reference.  The value defines a reference frequency of n*250
	kHz where n is an integer, but there is a pseudo-random mapping from n to
	the required value.  This is covered in supporting documentation. 
	
	For BlueCore2-ROM and subsequent chips, the value defines the reference
	frequency in units of 1 kHz.  The default value, 26000, configures the chip
	to use a 26 MHz reference.  If the key is absent or the value is zero,
	the chip will attempt to pick a frequency; this cannot be relied upon
	to be the correct frequency, so the radio will not be usable.
	
	The automatic clock frequency detection mechanism is likely to be most 
	useful in ROM parts, and is further described in document CS-101436-ME
	(previously numbered as bcore-me-014) which is available from the CSR
	support website.
	
	See also the description of PSKEY_ANA_FTRIM.

==============================================================================
NAME
	PSKEY_PIO_PROTECT_MASK (0x0202)

SUMMARY
	Access to PIO pins

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Each BlueCore chip contains a PIO port that may, under BCCMD or VM
	control, be used as a general input / output port. However, various
	optional hardware and software configurations require the use of
	certain PIO pins for their own needs, e.g., an optional external
	PA/LNA block may be driven using PIO pins 0 and 1.
	
	This pskey prevents applications from changing PIO pins that are
	required for lower level functions. This blocking action applies
	to host-based applications requesting PIO changes via BCCMD and
	to VM applications running on the chip.
	
	Some of the lower level functions automatically prevent the
	application from changing the state of PIOs being used by the
	function by overriding the value of the relevant bits in this
	pskey. This includes the PIOs related to PSKEY_TXRX_PIO_CONTROL,
	PSKEY_USB_PIO_VBUS, PSKEY_USB_PIO_DETACH, PSKEY_USB_PIO_PULLUP,
	PSKEY_USB_PIO_WAKEUP and PSKEY_USB_PIO_RESUME (so, for instance,
	if PSKEY_USB_PIO_DETACH claims the use of PIO[5] then this PIO
	cannot be changed by application code no matter what the value
	of PSKEY_PIO_PROTECT_MASK is).
	
	Bits 0 to 7 of this uint16 pskey map to PIO0 to PIO7 respectively.
	If a bit of the pskey's value is set high then application code
	cannot change the value of the corresponding PIO port pin.
	
	NOTE: On the current Casira motherboard, PIO2 is connected to USB+
	via a 1k5 resistor. The USB+ pin doubles as the UART RTS line on
	BlueCore, so care must be taken if an application uses PIO2.

==============================================================================
NAME
	PSKEY_UART_BAUD_RATE (0x0204)

SUMMARY
	UART Baud rate (pre 18)

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The UART's (initial) Baud rate in builds before HCI 18.X. (This PS
	key's name is similar to PSKEY_UART_BAUDRATE, used in builds from HCI
	18.X.)
	
	Set the chip's UART baud rate at boot time to:
	
	        baud_rate = ps_value/0.004096
	
	Some common baud_rate values:
	
	        38k4 baud - 157 (0x009d)
	        115k2 baud - 472 (0x01d8)
	
	A BCCMD command allows the baud rate to be changed instantly but this
	presents the problem that if the command succeeds then notification of
	the command's behaviour will be sent at the new rate, and if it fails
	it will be sent at the old rate. The preferred method is to change
	this PS key then to reboot the chip. 
	
	Although this key can be set higher, the maximum rated speed for the
	UART hardware is 1.5 Mbaud.
	
	This is a presentation PS key. PSKEY_HOSTIO_UART_PS_BLOCK is the real
	data store, but this key should be used to access it.

==============================================================================
NAME
	PSKEY_UART_CONFIG (0x0205)

SUMMARY
	UART configuration bitfield

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	Configures the settings of the chip's UART port.
	
	  Bit Meaning
	    0 0 => one stop bit, 1 => two stop bits.
	    1 0 => no parity bits, 1 => one parity bit.
	    2 0 => odd parity, 1 => even parity.
	    3 0 => h/w flow control disabled, 1 => enabled.
	    4 Set to 0.
	    5 0 => RTS deasserted, 1 => RTS asserted.
	    6 Set to 0.
	    7 0 => non-BCSP/H5 operation disabled, 1 => enabled.
	    8 Set to 0.
	    9 Set to 0.
	   10 Set to 0.
	   11 Set to 1.
	   12 0 => H5 operation disabled, 1 => enabled.
	   13 Set to 0.
	   14 Set to 0.
	   15 Set to 0.
	
	This is a presentation PS key. PSKEY_HOSTIO_UART_PS_BLOCK is the real
	data store, but this key should be used to access it.
	
	This bitfield should be set to 0x0006 for BCSP and 0x00a8 for H4.
	PSKEY_HOST_INTERFACE must also be set appropriately.

==============================================================================
NAME
	PSKEY_STUB (0x0207)

SUMMARY
	Stub

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	A key that can be harmlessly read or written.

==============================================================================
NAME
	PSKEY_TXRX_PIO_CONTROL (0x0209)

SUMMARY
	TX and RX PIO control

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The chip contains a radio power amplifier (PA) and low noise
	amplifier (LNA), allowing it to act as a limited-range Bluetooth
	device.  Although this is adequate for many applications, some
	systems require more range and so use external PA/LNA devices.
	
	If external devices are used the LNA is enabled by pin PIO0 and
	the PA by pin PIO1, i.e., this takes over two pins of the PIO port.
	
	Before transmitting, the chip normally ramps up the power to the
	internal PA, then it ramps it down again afterwards.  However, if a
	suitable external PA is used it may be possible to ramp the power
	externally using the AUX_DAC pin.
	
	This pskey sets the PA/LNA configuration:
	
	    0: The two PIO lines are not driven for Tx and Rx.  The chip's
	        internal PA/LNA is used.
	
	    1: The two PIO lines are driven high to enable the external PA
	        and LNA.  Tx power ramping is controlled by the internal PA.
	
	    2: The two PIO lines are driven high to enable the external PA
		and LNA.  Tx power ramping is controlled on the external PA
		via the chip's AUX_DAC pin.  The
		"external_pa" entries in PSKEY_POWER_TABLE are used.
	
	    3: The two PIO lines are driven low to enable the external PA
	        and LNA.  Tx power ramping is controlled by the internal PA.
	
	    4: PIO lines driven high for external PA and LNA;
	        Tx power ramping controlled by internal PA.  External PA controlled
		(not ramped) by chip's AUX_DAC pin.  The "external_pa" entries in
		PSKEY_POWER_TABLE are used.
	
	    5: PIO lines driven high for external PA and LNA;
		Tx power ramping controlled by internal PA.  External LNA
		gain controlled by chip's AUX_DAC pin.  The AUX_DAC
		is varied by the AGC between zero and its maximum in 16 steps.
	
	Hardware restrictions prevent the use of active low PIO pins and
	external PA ramping.
	
	The behaviour of the chip's AUX_DAC pin is undefined unless this key
	is set to 2 or 4.
	
	See also:
	        PSKEY_LC_MAX_TX_POWER
	        PSKEY_TX_GAIN_RAMP
	        PSKEY_LC_POWER_TABLE
	        PSKEY_LC_DEFAULT_TX_POWER.

==============================================================================
NAME
	PSKEY_ANA_RX_LEVEL (0x020b)

SUMMARY
	ANA_RX_LVL register initial value

TYPE
	uint16

DEFAULT VALUE
	(8)

DESCRIPTION
	Sets the initial value of the chip's $ANA_RX_LVL register.
	
	(This is for CSR internal use only.  If you don't know what it's for,
	don't play with it.)

==============================================================================
NAME
	PSKEY_ANA_RX_FTRIM (0x020c)

SUMMARY
	ANA_RX_FTRIM register initial value

TYPE
	uint16

DEFAULT VALUE
	(0x844)

DESCRIPTION
	Sets the initial value of the chip's $ANA_RX_FTRIM register.
	
	(This is for CSR internal use only.  If you don't know what it's for,
	don't play with it.)

==============================================================================
NAME
	PSKEY_PSBC_DATA_VERSION (0x020d)

SUMMARY
	Persistent store version

TYPE
	uint16

DEFAULT VALUE
	
#include "psbc_data_version.h"

DESCRIPTION
	The RCS minor version number of the source file psbc_data, which
	defines all of the keys on BlueCore.

==============================================================================
NAME
	PSKEY_PCM0_ATTENUATION (0x020f)

SUMMARY
	Volume control on PCM channel 0

TYPE
	uint16

DEFAULT VALUE
	(3)

DESCRIPTION
	Some Motorola CODECs allow their gain to be controlled by 3 extra
	bits received at the end of a 13 bit PCM sample.
	
	This pskey sets the value of these three bits for SCO data sent from
	chip's first PCM channel (PCM channel 0).  It is expected that low
	values will map to high volume levels, though the firmware has no
	knowledge of this - it just passes the bits into the PCM stream.
	If this value is not needed then it may make sense to set this key
	to zero.
	
	It is possible that the firmware will acquire dynamically-settable
	attenuation controls for the PCM channel(s).  In this case this
	pskey will set the initial attenuation value.

==============================================================================
NAME
	PSKEY_LO_LVL_MAX (0x0211)

SUMMARY
	Maximum value of LO level control register

TYPE
	uint16

DEFAULT VALUE
	(15)

DESCRIPTION
	This key sets the maximum value of the LO_LVL parameter used by
	the local oscillator level auto calibration routine.
	
	The actual limit on LO_LVL is 2*LO_LVL_MAX+1, ie the default is 31.

==============================================================================
NAME
	PSKEY_LO_ADC_AMPL_MIN (0x0212)

SUMMARY
	Minimum value of the LO amplitude measured on the ADC

TYPE
	uint16

DEFAULT VALUE
	(42)

DESCRIPTION
	Parameter for the LO level auto calibration routine.
	
	The LO level is controlled to maintain the LO amplitude as
	measured on the internal ADC within the range specified by
	PSKEY_LO_ADC_AMPL_MIN and PSKEY_LO_ADC_AMPL_MAX subject to the
	limits given in PSKEY_LO_LVL_MIN and PSKEY_LO_LVL_MAX.

==============================================================================
NAME
	PSKEY_LO_ADC_AMPL_MAX (0x0213)

SUMMARY
	Maximum value of the LO amplitude measured on the ADC

TYPE
	uint16

DEFAULT VALUE
	(46)

DESCRIPTION
	See PSKEY_LO_ADC_AMPL_MIN.

==============================================================================
NAME
	PSKEY_IQ_TRIM_CHANNEL (0x0214)

SUMMARY
	IQ calibration channel

TYPE
	uint16

DEFAULT VALUE
	(44)

DESCRIPTION
	Sets the Bluetooth radio channel on which to perform IQ trim auto
	calibration.  For most of the world this can be in the range 0..78,
	for France it must be in the range 54..76.  If the value in this
	key is out of range for France and the firmware detects that it
	is in France (by using the country code) then the value will be
	silently brought into range.

==============================================================================
NAME
	PSKEY_IQ_TRIM_GAIN (0x0215)

SUMMARY
	IQ calibration gain

TYPE
	uint16

DEFAULT VALUE
	(0x038)

DESCRIPTION
	Internal PA gain setting at which to perform IQ trim
	auto-calibration.  If the pskey value is higher than the maximum
	level in the power table (see PSKEY_LC_POWER_TABLE) the firmware will
	silently limit it to the power table's maximum internal PA setting.
	
	Bits [11:8] set the transmitter pre-amplifier gain while
	bits [7:0] set the maximum allowed power amplifier gain (but a lower
	value may be used).

==============================================================================
NAME
	PSKEY_TX_OFFSET_HALF_MHZ (0x0217)

SUMMARY
	Transmit offset

TYPE
	int16

DEFAULT VALUE
	(-2)

DESCRIPTION
	Frequency offset used for transmit, in units of 500 kHz.
	
	For BC5+ it controls only the basic rate Class 2 transmit offset
	
	This key should only be changed on advice from CSR.

==============================================================================
NAME
	PSKEY_GBL_MISC_ENABLES (0x0221)

SUMMARY
	Global miscellaneous hardware enables

TYPE
	uint16

DEFAULT VALUE
	(0x818)

DESCRIPTION
	This allows settings for various bits in the chip's $GBL_MISC_ENABLES
	register to be selected.  It allows the MISC_XAP_SUSPEND_ON_RX_EN,
	MISC_FAST_FLASH_EN, MISC_TRISTATE_DRIVE_EN, MISC_SPI_STOP_OUT_EN,
	MISC_EXT_RAM_EN and MISC_EXT_RAM_EN2 bits (bits 0, 2, 3, 4, 7 and 13
	respectively) to be selected.  The bits are written as the value of
	the corresponding bits in this pskey; the other bits in this pskey's
	value are ignored.
	
	The default setting does not suspend the XAP on Rx, enables the
	tristate drive and SPI stop output signal, and does not enable
	external RAM. The default setting for FAST_FLASH_EN depends on the
	firmware version.
	
	On chips up to and including BlueCore4, MISC_FAST_FLASH_EN controls
	whether the chip generates wait states for Flash access. The correct
	setting depends on the Flash device in use:
	
	 - Setting this bit to 0 requires Flash with access speed of 90ns or
	   faster. This is the safe setting.
	
	 - Setting this bit to 1 requires Flash with access speed of 45ns or
	   faster ("fast flash"). If your Flash meets this specification,
	   setting this bit may allow faster execution and hence power
	   savings.
	   If "fast flash" mode is enabled incorrectly, firmware may not
	   execute correctly.
	
	The FAST_FLASH_EN bit is ignored from BlueCore5 onwards
	(PSKEY_PROG_WAIT_STATES is the nearest equivalent). It is also
	ignored when running from ROM on some previous devices.
	
	(Setting 0x08 disables the SPI MISO line.)
	
	This is for CSR internal use only.  Don't play with it unless
	you know what it does.

==============================================================================
NAME
	PSKEY_UART_SLEEP_TIMEOUT (0x0222)

SUMMARY
	Time in ms to deep sleep if nothing received

TYPE
	uint16

DEFAULT VALUE
	(1000)

DESCRIPTION
	Applies when the host interface is BCSP, TWUTL or VM access to the
	UART, and depends on the key PSKEY_DEEP_SLEEP_STATE being set to allow
	deep sleep. If we have had no transmission from the host for at least
	this number of milliseconds, and we have no data to send, then we may
	go into deep sleep, depending on restrictions from any other source.
	Setting the value to 0 inhibits deep sleep for BCSP, TWUTL or VM UART
	access, but has no effect if another host interface is in use.
	
	The default BCSP/TWUTL retransmit period is 0.25 seconds, so setting
	this value less than that, but non-zero, is probably a bad idea.
	
	With BCSP or TWUTL, any data on the UART will wake the chip from deep
	sleep. However the particular transmission that woke it will be lost.
	The chip will wake up about 5ms later.

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_STATE (0x0229)

SUMMARY
	Deep sleep state usage

TYPE
	deep_sleep_state

DEFAULT VALUE
	(DEEP_SLEEP_ALWAYS)

DESCRIPTION
	BlueCore has two types of low power state.  The one which allows
	the more saving, and hence has the more constraints on its use, is
	referred to as "deep sleep" and may be configured by this key.
	
	Type deep_sleep_state can be treated as a uint16, taking these
	values:
	
	    NEVER           (0): Deep sleep will never be used.
	    ALWAYS          (1): Deep sleep will be used whenever possible.
	    INACTIVE        (2): Deep sleep when there are no ACL
	                         connections.
	    ALWAYS_ACCURATE (3): Deep sleep will be used whenever possible;
	                         the firmware assumes the module has an
	                         accurate external slow clock which does not
	                         need calibrating after startup.
	
	If the setting is ACCURATE (3), PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK
	should be set to TRUE to indicate that an external slow clock is
	in use.  This combination of settings saves power as the firmware
	will not need to calibrate the slow clock against the standard
	20 ppm clock once the frequency of the external slow clock has
	been ascertained.
	
	In deep sleep, BlueCore's accurate clock is not operational and
	timing is maintained by a low power but less accurate clock.
	Deep sleep may be entered when an ACL connection is in hold,
	sniff or park mode; hence accuracy is lost.  In certain
	situations, where power saving is not a major priority but
	maintaining accuracy of the clock is (for example, a network
	access point which has a large number of parked connections), it
	may be advantageous to disable deep sleep mode with this key.
	
	Note that changing this PSKEY has implications for the setting of
	PSKEY_DEVICE_DRIFT. See the description of that key for details.
	
	Deep sleep also causes slightly slower response on the UART when
	BCSP is in use if no data has been received for a while.  See
	PSKEY_UART_SLEEP_TIMEOUT.
	
	This does not affect the other low power states, in which clock
	accuracy is not lost.

==============================================================================
NAME
	PSKEY_IQ_ENABLE_PHASE_TRIM (0x022d)

SUMMARY
	IQ phase enable

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	Parameter for the IQ trim auto calibration routine.
	
	Selects whether phase trimming is done as part of the IQ trim
	routine.  If this is set to disabled then the appropriate bits from
	PSKEY_IQ_TRIM are used.

==============================================================================
NAME
	PSKEY_HCI_HANDLE_FREEZE_PERIOD (0x0237)

SUMMARY
	Time for which HCI handle is frozen after link removal

TYPE
	TIME

DEFAULT VALUE
	(15 * SECOND)

DESCRIPTION
	The default period in microseconds for which data reception on a HCI
	connection handle is maintained after the corresponding connection
	has been removed.
	
	Reception must be enabled for this additional period as stray late
	data may come from the host.  The freeze period should thus be
	sufficiently large for the host to realise that a HCI connection has
	been removed or has failed.
	
	Any data received during the period when the connection handle is
	frozen is diverted into a dummy buffer and thus effectively
	discarded.
	
	The value stored under this key is also the minimum time before a HCI
	connection handle can be re-allocated for a new connection.
	
	Maintaining a connection handle for this additional period consumes
	some of the chip's resources.  Hence creating and destroying
	connections rapidly relative to the freeze period will result in a
	resource leak.  After the number of currently frozen handles reaches
	a limit set by PSKEY_MAX_FROZEN_HCI_HANDLES, further attempts to
	create connections will be rejected.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.)

==============================================================================
NAME
	PSKEY_MAX_FROZEN_HCI_HANDLES (0x0238)

SUMMARY
	Maximum number of frozen HCI handles

TYPE
	uint16

DEFAULT VALUE
	(20)

DESCRIPTION
	The default number of frozen connection handles at which further
	connection requests will be refused.
	
	After a connection has been removed, its hci handle is maintained
	active for a short period, defined by PSKEY_HCI_HANDLE_FREEZE_PERIOD.
	Some resources are required to maintain the link active and thus if
	connections are created and destroyed rapidly in relation to this
	period, resources will gradually be consumed.
	
	To prevent constraining the operation of any existing connections due
	to lack of memory, further connection requests will be rejected when
	the number of currently frozen handles reaches the value stored under
	this key.

==============================================================================
NAME
	PSKEY_PAGETABLE_DESTRUCTION_DELAY (0x0239)

SUMMARY
	Delay from freezing buf handle to deleting page table

TYPE
	TIME

DEFAULT VALUE
	(50*MILLISECOND)

DESCRIPTION
	The default delay in microseconds from the point at which a buffer is
	redirected until its page table and any mmu memory allocated to it
	can be freed.
	
	Buffers used to receive data from the host are redirected to point to
	a dummy buffer when a connection is torn down.  This enables reception
	to continue on this buffer (connection) handle for a certain period
	after a link is removed.
	
	Most of the buffer resources can be freed as soon as the handle is
	redirected.  The buffer page table address however is cached by the
	CSR chip hardware during the reception of a hci data packet payload.
	The page table thus cannot be destroyed for a period equal to the
	duration of the largest packet that the host can send.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.)

==============================================================================
NAME
	PSKEY_IQ_TRIM_PIO_SETTINGS (0x023a)

SUMMARY
	IQ PIO settings

TYPE
	uint8

DEFAULT VALUE
	(0)

DESCRIPTION
	Defines the state of PIO lines 0 and 1 during automatic IQ
	calibration.  Only the lower 4 bits of the uint8 are used and these
	having the following meaning.  If bit 2 is set to 1 it enables PIO
	bits 0 and 1 to be set to a particular state during IQ trim.  In this
	case, the state of lines 1 and 0 is set by the pskey's bits 1 and 0
	respectively.  If bit 2 is set to 0 then the existing values of the
	PIO lines will be preserved through the IQ trim and bits 0 and 1 of
	the pskey are ignored.  If pskey bit 3 is set to 1 then the external
	transmit power control DAC is enabled at its maximum setting during
	IQ trim.
	
	During the auto-IQ trim both transmitter and receiver are active.
	Energy from the transmitter is looped back to the receiver which is
	used to measure the level of image rejection which has been
	achieved.  For this to work successfully the transmitter must be
	presented with a respectable load.
	
	For Class 1 modules the transmitter drives a PA.  The impedance
	presented to the transmitter is generally respectable even if the PA
	is not switched on during the auto-IQ trim.
	
	For modules with no PA the transmitter output is coupled via a
	balun to the transmit/receive switch.  The impedance presented to the
	transmitter during auto-IQ trim is dependent on the setting of the
	transmit/receive switch, which is governed by PIO lines 0 and 1.
	However different switch models exhibit different behaviour with the
	PIO control lines, even switch models from the same manufacturer.
	For example, it is possible for the switch to present a high
	impedance, ground or even a time varying impedance to the
	transmitter.
	
	For modules with a PA, PIO lines 0 and 1 should be 0 to ensure that
	the PA is disabled during auto-IQ trim (although certain modules
	invert these PIO lines, requiring different settings).
	
	For modules with no PA the pskey should be set to place the
	transmit/receive switch in the state that provides optimum
	performance for the auto-IQ trim algorithm.

==============================================================================
NAME
	PSKEY_USE_EXTERNAL_CLOCK (0x023b)

SUMMARY
	Device uses an external clock

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	On BlueCore2, if set, the chip accepts a clock from an external
	source.  
	
	For BlueCore3 and onward, the external clock works if this is not
	set, but some power is saved if it is TRUE.
	
	For BlueCore5 and onward, if a crystal is used, this key MUST be
	set to FALSE; otherwise the chip will not run.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_WAKE_CTS (0x023c)

SUMMARY
	Exit deep sleep on CTS line activity

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Deep sleep is allowed with some (but not all) host interfaces that use
	the UART. This key determines whether the chip will wake from deep
	sleep due to activity on the CTS line from the host, and also due to
	activity on the data RX line. Three values are allowed.
	
	    0: The chip wakes due to activity on the data RX line,
	       but does not wake due to activity on the CTS line. This is
	       the default.
	    1: The chip wakes due to activity on either the data RX line
	       or the CTS line.
	    2: The chip wakes due to activity on the CTS line, but does
	       not wake due to activity on the data RX line.
	
	Note that the chip is sensitive to the level on both lines: if the
	line is held low, and wake-up on the line has been enabled, the chip
	will be kept out of deep sleep. Note also that the chip is sensitive
	to the lines themselves; it is not actually required that there is a
	host using the UART for data communication.
	
	If the host interface is set to `none', i.e. the firmware has been
	informed that no host communication is in use, it is still possible to
	use the CTS line to wake the chip. However the data RX line is
	ignored. This is because this line is floating in many hardware
	configurations with no host interface.
	
	The key is ignored if the host interface is USB. 

==============================================================================
NAME
	PSKEY_FC_HC2H_FLUSH_DELAY (0x023d)

SUMMARY
	Delay from disconnect to flushing HC->H FC tokens

TYPE
	TIME

DEFAULT VALUE
	(10 * SECOND)

DESCRIPTION
	The default delay in microseconds from destroying a connection until
	any outstanding host controller to host flow control tokens are
	flushed.
	
	This delay is required to workaround a race hazard in the hci
	specification.  The host might not acknowledge packets sent around
	the time when it is sent a disconnect event - the buffers used for
	these packets should thus be assumed to be free by the host
	controller.  However as the processing of the disconnect is not
	synchronised on the host and host controller, a delay is required to
	ensure the host has actually flushed its buffers and thus prevent
	temporary overruns.
	
	The time delay from disconnection to flushing the buffers should be
	less than the time for which a connection handle is frozen after
	disconnection (defined by PSKEY_HCI_HANDLE_FREEZE_PERIOD).  This
	ensures the handle is not re-allocated during the flush delay and
	thus that the buffers for the new link are not interfered with.
	
	(Type TIME is fundamentally a uint32.  Value SECOND is 1000000.)

==============================================================================
NAME
	PSKEY_RX_HIGHSIDE (0x023e)

SUMMARY
	Disable the HIGHSIDE bit in ANA_CONFIG

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If this key is FALSE, the local oscillator frequency is 1.5 MHz less
	than the carrier frequency to be received, whereas if it is TRUE the
	LO frequency is 1.5 MHz higher than the carrier frequency.
	
	For chips starting with BlueCore2-ROM and versions of firmware
	starting with 17.4, this is taken as an input to the algorithm which
	calculates the RF frequency parameters for each receive channel.  The
	result may be that some channels do not use the value of this key.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_TX_PRE_LVL (0x0240)

SUMMARY
	TX pre-amplifier level

TYPE
	uint8

DEFAULT VALUE
	(8)

DESCRIPTION
	Sets the level of the transmitter pre-amplifier.  Higher values give
	more transmit power (at the expense of higher current consumption).

==============================================================================
NAME
	PSKEY_RX_SINGLE_ENDED (0x0242)

SUMMARY
	RX single ended

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If TRUE, the receiver operates in single ended mode which means that
	the receiver input pin to BlueCore must be connected.  If
	FALSE, the receiver operates in differential mode using the two
	transmit pins as the receiver inputs.

==============================================================================
NAME
	PSKEY_TX_FILTER_CONFIG (0x0243)

SUMMARY
	TX filter configuration

TYPE
	uint32

DEFAULT VALUE
	(0xDD070003)

DESCRIPTION
	Configures the transmit filter for optimum modulation.  For CSR
	use only.

==============================================================================
NAME
	PSKEY_CLOCK_REQUEST_ENABLE (0x0246)

SUMMARY
	External clock request enable

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The BlueCore can be configured to use a PIO to indicate that it
	requires an external high-speed clock reference at the frequency
	configured by PSKEY_ANA_FREQ. This line will be inactive when no
	clock reference is required (for instance, when the BlueCore is in
	deep sleep).
	
	If set to 0, no PIO is used as a clock request.
	If set to 1, PIO[6] is active when an external clock reference is
	required, and is inactive otherwise.
	If set to 2, PIO[2] is active when an external clock reference is
	required, and is inactive otherwise.
	If set to 3, PIO[2] is active when an external clock reference is
	required or if PIO[3] is high, and is inactive when a clock
	reference is not required and PIO[3] is low.
	
	Values of 2 and 3 are only useful for versions of the BlueCore
	hardware starting with BlueCore2-ROM.
	
	In the default configuration, a PIO is held high when active and
	held low when inactive.  In versions of BlueCore from BlueCore3-ROM,
	this behaviour can be altered by setting
	PSKEY_CLOCK_REQUEST_FEATURES.

==============================================================================
NAME
	PSKEY_RX_MIN_ATTEN (0x0249)

SUMMARY
	Minimum attenuation allowed for receiver

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Minimum allowed attenuation for receiver apart from channels
	29,30,31,61,62,63.  This can be used to improve C/I performance and
	to improve consistency of receiver sensitivity over frequency range.

==============================================================================
NAME
	PSKEY_XTAL_TARGET_AMPLITUDE (0x024b)

SUMMARY
	Crystal target amplitude

TYPE
	uint8

DEFAULT VALUE
	(45)

DESCRIPTION
	This sets the target crystal oscillation amplitude as determined by
	the device's internal circuitry.  This is not as will be measured
	using external instruments.
	
	Pre-BC5 the pskey is used to set an absolute internal oscillation
	amplitude.  For BC5 the pskey sets a % of the maximum measured
	internal amplitude, it is a relative internal level.
	  
	Note: As a rule, the default value issued by CSR will not need to
	be changed.  
	
	The crystal bias level is chosen such that the oscillation amplitude
	is as close as possible to the target.  This is done by gradually
	decreasing the crystal bias level from its maximum until the target
	amplitude is reached. 
	
	The target amplitude is treated as a minimum; as long as it is
	achievable, the firmware will use a crystal bias that produces at
	least the requested amplitude.
	
	It was originally possible to set the crystal bias level directly but
	that control has been superseded by this improved "set and measure"
	approach.  This provides correct operation with some variance in 
	crystal parameters and also tracks over changes in temperature,
	it is not intended as a level control mechanism per-se.
	 
	A module designer may wish to test the effect of changing the
	configured target amplitude across a representative sample of modules
	and adjust the production target amplitude accordingly.
	
	This assessment of level should be made by observing the correct
	operation of the unit rather than trying to measure the  amplitude
	directly.
	
	Typically, setting a value larger than the correct one will lead to a
	stable crystal that draws an unnecessarily large current.  Setting a
	value smaller than the correct one can lead to the system clock being
	unstable and it may even stop.
	
	Larger values than necessary have been observed to produce additional
	phase noise.
	
	Direct measurement using an oscilloscope is not recommended because
	the additional load capacitance can disrupt operation of the
	oscillator and the device's internal measurements.
	
	Note that this key is not used during DFU.  In that mode the crystal
	bias is always set to maximum.

==============================================================================
NAME
	PSKEY_PCM_MIN_CPU_CLOCK (0x024d)

SUMMARY
	Minimum CPU clock speed with PCM port running

TYPE
	uint16

DEFAULT VALUE
	(CPU_SLOW_4M)

DESCRIPTION
	The firmware tries to save power by reducing the clock rate when
	the processor is idle.  The clock drives the CPU, PCM, UART, USB,
	baseband hardware, etc.  This is normally called "shallow sleep."
	
	Some of the chip's hardware sets a lower limit on how slowly the
	clock can be run. This key controls what limit PCM bus activity
	places on the clock speed.
	
	The default value of 4MHz is suitable for many PCM operations. It
	may be necessary to increase this for high sample rates and certain
	operating modes. It may be possible to reduce this value for
	reduced power consumption, but the PCM function may not operate
	correctly if run too slow. For more advice, contact CSR.
	
	The pskey's acceptable values are:
	        0       CPU_FAST          (full rate)
	        1       CPU_SLOW_4M       (4 MHz)
	        2       CPU_SLOW_2M       (2 MHz)
	        3       CPU_SLOW_1p024M   (1.024 MHz)
	
	See also PSKEY_CODEC_MIN_CPU_CLOCK.

==============================================================================
NAME
	PSKEY_HOST_INTERFACE_PIO_USB (0x0250)

SUMMARY
	USB host interface selection PIO line

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The PIO line used for forcing the host interface to be USB.  The absence
	of this key, or the value 0xFFFF, indicates that this feature is not in use.
	
	The interface to the host is normally set by PSKEY_HOST_INTERFACE.  If
	this key is set then the specified PIO line is checked at boot time, and
	if it is asserted (high) then the host interface is set to USB, overriding
	the setting of PSKEY_HOST_INTERFACE.
	
	The other host transport related persistent store keys must be set
	appropriately for both the default (probably BCSP) and USB transports.
	
	If PSKEY_HOST_INTERFACE_PIO_H4 is also valid, and both PIO lines are
	asserted (or they are the same line), this key takes precedence.

==============================================================================
NAME
	PSKEY_CPU_IDLE_MODE (0x0251)

SUMMARY
	CPU idle mode when radio is active

TYPE
	cpu_idle_mode

DEFAULT VALUE
	(cpu_idle_ram)

DESCRIPTION
	When the radio is active but the chip is otherwise idle, background
	processor activity can be limited in various ways.  Which is most
	apppropriate depends on details of the hardware.  Hence this key should
	not be altered without appropriate knowledge.  The possibilities are
	
	    NONE        (0):  Processor continues normal task loop
	    LONG_LOOP   (1):  Processor executes long idle loop
	    SHORT_LOOP  (2):  Processor executes short idle loop
	    RAM         (3):  Processor idles in RAM
	    ROM         (4):  Processor idles in ROM
	

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_CLEAR_RTS (0x0252)

SUMMARY
	Deep sleep clears the UART RTS line

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key is used for deep sleep with the BCSP and H5 host transports
	only. If TRUE, the chip clears the RTS line (i.e. sets it high) when
	it enters deep sleep, and (depending on the state of the UART) may
	reset it afterwards if it is ready to receive.
	
	If hardware flow control is in effect on the remote host, setting the
	key causes the remote UART not to transmit packets while the chip is
	in deep sleep. Therefore it is not possible to use the effect of BCSP
	retransmissions to wake the chip. Usually, therefore, this key will be
	used in combination with PSKEY_DEEP_SLEEP_WAKE_CTS.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_RF_RESONANCE_TRIM (0x0254)

SUMMARY
	Frequency trim for IQ and LNA resonant circuits

TYPE
	uint16

DEFAULT VALUE
	(0x338D)

DESCRIPTION
	Sets the frequency trim for the IQ and LNA resonant circuits.
	(This is for CSR internal use only.  If you don't know what it's for,
	don't play with it.)

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_PIO_WAKE (0x0255)

SUMMARY
	PIO line to wake the chip from deep sleep

TYPE
	uint16

DEFAULT VALUE
	(16)

DESCRIPTION
	The number of a PIO line, 0 to 15, which will cause the chip to wake
	from deep sleep.  This use does not preclude the use of the same PIO
	line as an ordinary input.  However, a PIO which is usually configured
	as an output may not be used.  If the setting is out of range, no PIO
	line will be used.  The wake-up is triggered by the level of the line
	being held high for at least 1 millisecond, not by the rising or
	falling edge.
	
	If the chip notices it has been woken, and it is configured to use the
	UART, it will remain out of deep sleep for at least the period given
	by PSKEY_UART_SLEEP_TIMEOUT.  This is because it cannot distinguish
	wakeups from the two sources.  Otherwise, the chip may return to deep
	sleep as soon as there is no task to be performed.
	
	If the VM is configured to use a PIO line as an interrupt source, the
	chip will automatically be woken from deep sleep on that line, so this
	key is not usually required.  It may still be used; however, the chip
	may generate interrupts on the PIO line set by this key, since it does
	not discriminate between individual PIO lines.

==============================================================================
NAME
	PSKEY_MODULE_ID (0x0259)

SUMMARY
	Module serial number

TYPE
	uint32

DEFAULT VALUE
	(0)

DESCRIPTION
	A serial number for the module.  This number may be allocated by
	the module manufacturer to track production, etc.  This value is not
	used by any on-chip code and is for manufacturer information only.
	
	The firmware makes no use of this key's value.

==============================================================================
NAME
	PSKEY_MODULE_DESIGN (0x025a)

SUMMARY
	Module design ID

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	An identifier of the Bluetooth module design.  This is allocated
	by the module manufacturer, so the combination of this key and
	PSKEY_MODULE_MANUFACTURER should be enough to specify a hardware
	module design.
	
	This value will normally be independent of firmware identifiers
	which are used to distinguish various builds of the module's
	software.
	
	The firmware makes no use of this key's value.

==============================================================================
NAME
	PSKEY_MODULE_SECURITY_CODE (0x025c)

SUMMARY
	Module security code

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	When the module is intended to be used with certain host-side
	applications or stacks, this key is set to an encrypted value.
	
	The host-side application may subsequently check the value of this key
	to determine whether or not it is licensed to run with the module.

==============================================================================
NAME
	PSKEY_VM_DISABLE (0x025d)

SUMMARY
	VM disable

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If TRUE, the VM will not be started when the chip boots.  If FALSE,
	VM operation is normal.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_MOD_MANUF0 (0x025e)

SUMMARY
	Module manufacturer data 0

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	Keys PSKEY_MOD_MANUF0 to PSKEY_MOD_MANUF9 are for use by module
	manufactuers.  The firmware makes no use of these pskeys'
	contents.
	
	Keys PSKEY_MOD_MANUF0 to PSKEY_MOD_MANUF4 are protected against DFU;
	they are never included in uploads, and are ignored in downloads.
	This makes them suitable for storing module specific or sensitive
	information; use keys in the range PSKEY_MOD_MANUF5 to
	PSKEY_MOD_MANUF9 if such protection is not required.

==============================================================================
NAME
	PSKEY_MOD_MANUF1 (0x025f)

SUMMARY
	Module manufacturer data 1

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF2 (0x0260)

SUMMARY
	Module manufacturer data 2

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF3 (0x0261)

SUMMARY
	Module manufacturer data 3

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF4 (0x0262)

SUMMARY
	Module manufacturer data 4

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF5 (0x0263)

SUMMARY
	Module manufacturer data 5

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF6 (0x0264)

SUMMARY
	Module manufacturer data 6

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF7 (0x0265)

SUMMARY
	Module manufacturer data 7

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF8 (0x0266)

SUMMARY
	Module manufacturer data 8

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_MOD_MANUF9 (0x0267)

SUMMARY
	Module manufacturer data 9

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_MOD_MANUF0.

==============================================================================
NAME
	PSKEY_DUT_VM_DISABLE (0x0268)

SUMMARY
	VM disable when entering radiotest modes

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	If TRUE, the VM will be disabled when the chip enters radiotest
	modes (either Bluetooth or CSR-specific test modes). If FALSE, the 
	VM continues operating.  It is recommended this only be set to FALSE
	if the VM application is being used to control test mode; this is 
	necessary, for example, in configurations where no host interface is
	present.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_USR0 (0x028a)

SUMMARY
	User configuration data  0

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	Keys PSKEY_USR0 to PSKEY_USR49 are for use by host and on-chip
	application- specific code to allocate as it chooses.
	
	PSKEY_USR0 to PSKEY_USR24 may only be changed by DFU by placing
	them in the application protected section of the file and signing
	them with the application private key. These pskeys are never
	incldued in DFU files uploaded from a BlueCore. This makes them
	suitable for storing module specific or sensitive information;
	use keys in the range PSKEY_USR25 to PSKEY_USR49 if such
	protection is not required.

==============================================================================
NAME
	PSKEY_USR1 (0x028b)

SUMMARY
	User configuration data  1

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR2 (0x028c)

SUMMARY
	User configuration data  2

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR3 (0x028d)

SUMMARY
	User configuration data  3

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR4 (0x028e)

SUMMARY
	User configuration data  4

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR5 (0x028f)

SUMMARY
	User configuration data  5

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR6 (0x0290)

SUMMARY
	User configuration data  6

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR7 (0x0291)

SUMMARY
	User configuration data  7

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR8 (0x0292)

SUMMARY
	User configuration data  8

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR9 (0x0293)

SUMMARY
	User configuration data  9

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR10 (0x0294)

SUMMARY
	User configuration data 10

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR11 (0x0295)

SUMMARY
	User configuration data 11

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR12 (0x0296)

SUMMARY
	User configuration data 12

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR13 (0x0297)

SUMMARY
	User configuration data 13

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR14 (0x0298)

SUMMARY
	User configuration data 14

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR15 (0x0299)

SUMMARY
	User configuration data 15

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR16 (0x029a)

SUMMARY
	User configuration data 16

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR17 (0x029b)

SUMMARY
	User configuration data 17

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR18 (0x029c)

SUMMARY
	User configuration data 18

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR19 (0x029d)

SUMMARY
	User configuration data 19

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR20 (0x029e)

SUMMARY
	User configuration data 20

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR21 (0x029f)

SUMMARY
	User configuration data 21

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR22 (0x02a0)

SUMMARY
	User configuration data 22

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR23 (0x02a1)

SUMMARY
	User configuration data 23

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR24 (0x02a2)

SUMMARY
	User configuration data 24

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR0.

==============================================================================
NAME
	PSKEY_USR25 (0x02a3)

SUMMARY
	User configuration data 25

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	Keys PSKEY_USR0 to PSKEY_USR49 are for use by host and on-chip
	application- specific code to allocate as it chooses.
	
	PSKEY_USR25 to PSKEY_USR49 may be changed by placing them in
	either the unprotected or application protected areas of the DFU
	file. These pskeys are included in DFU files uploaded from a
	BlueCore. This makes them unsuitable for storing module specific
	or sensitive information; use keys in the range PSKEY_USR0 to
	PSKEY_USR24 for such data.

==============================================================================
NAME
	PSKEY_USR26 (0x02a4)

SUMMARY
	User configuration data 26

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR27 (0x02a5)

SUMMARY
	User configuration data 27

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR28 (0x02a6)

SUMMARY
	User configuration data 28

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR29 (0x02a7)

SUMMARY
	User configuration data 29

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR30 (0x02a8)

SUMMARY
	User configuration data 30

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR31 (0x02a9)

SUMMARY
	User configuration data 31

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR32 (0x02aa)

SUMMARY
	User configuration data 32

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR33 (0x02ab)

SUMMARY
	User configuration data 33

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR34 (0x02ac)

SUMMARY
	User configuration data 34

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR35 (0x02ad)

SUMMARY
	User configuration data 35

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR36 (0x02ae)

SUMMARY
	User configuration data 36

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR37 (0x02af)

SUMMARY
	User configuration data 37

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR38 (0x02b0)

SUMMARY
	User configuration data 38

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR39 (0x02b1)

SUMMARY
	User configuration data 39

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR40 (0x02b2)

SUMMARY
	User configuration data 40

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR41 (0x02b3)

SUMMARY
	User configuration data 41

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR42 (0x02b4)

SUMMARY
	User configuration data 42

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR43 (0x02b5)

SUMMARY
	User configuration data 43

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR44 (0x02b6)

SUMMARY
	User configuration data 44

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR45 (0x02b7)

SUMMARY
	User configuration data 45

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR46 (0x02b8)

SUMMARY
	User configuration data 46

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR47 (0x02b9)

SUMMARY
	User configuration data 47

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR48 (0x02ba)

SUMMARY
	User configuration data 48

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USR49 (0x02bb)

SUMMARY
	User configuration data 49

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_USR25.

==============================================================================
NAME
	PSKEY_USB_VERSION (0x02bc)

SUMMARY
	USB specification version number

TYPE
	uint16

DEFAULT VALUE
	(0x0200)

DESCRIPTION
	The version of the USB spec supported.
	
	The value is in BCD, so 0x0200 presents as version "2.0".
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_DEVICE_CLASS_CODES (0x02bd)

SUMMARY
	USB device class codes

TYPE
	usbclass

DEFAULT VALUE
	{ 0xe0, 0x01, 0x01 }

DESCRIPTION
	Three bytes giving the class information for the "Standard Device
	Descriptor" of this USB device, as defined in Table 9.7 of version
	1.1 of the USB specification.
	
	Type usbclass is held as a uint16[3].  The three values are held in
	the lower byte of each of the array in the order
	
	        { class, subclass, protocol }.
	
	Default value maps to:
	    { WIRELESS_CONTROLLER, RF_CONTROLLER, BLUETOOTH_PROGRAMMING }.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_VENDOR_ID (0x02be)

SUMMARY
	USB vendor identifier

TYPE
	uint16

DEFAULT VALUE
	(0x0a12)

DESCRIPTION
	The idVendor field of the local USB device, as defined in Table 9.7
	of version 1.1 of the USB specification.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_PRODUCT_ID (0x02bf)

SUMMARY
	USB product identifier

TYPE
	uint16

DEFAULT VALUE
	(1)

DESCRIPTION
	The idProduct field of the local USB device, as defined in Table
	9.7 of version 1.1 of the USB specification.  This value applies
	when the local device is acting as a Bluetooth device.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_MANUF_STRING (0x02c1)

SUMMARY
	USB manufacturer string

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	The USB manufacturer string, as described in table 9.7 of the USB
	specification version 1.1. If no value is stored under this key then
	there is no such string.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_PRODUCT_STRING (0x02c2)

SUMMARY
	USB product string

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	The USB iProduct string, as described in table 9.7 of the USB
	specification version 1.1. If no value is stored under this key then
	there is no such string.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_SERIAL_NUMBER_STRING (0x02c3)

SUMMARY
	USB serial number string

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	The USB serial number string, as described in table 9.7 of the USB
	specification version 1.1.  If no value is stored under this key
	then there is no such string.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_CONFIG_STRING (0x02c4)

SUMMARY
	USB configuration string

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	The USB configuration string, as described in table 9.8 of the USB
	specification version 1.1.  If no value is stored under this key
	then there is no such string.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_ATTRIBUTES (0x02c5)

SUMMARY
	USB attributes bitmap

TYPE
	uint8

DEFAULT VALUE
	(0xc0)

DESCRIPTION
	The bmAttributes of the Standard Configuration Descriptor,
	described in Table 9.8 of USB specification, version 1.1.
	
	The default value (0xc0) means that the device is self-powered and
	that remote wakeup is not supported.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_MAX_POWER (0x02c6)

SUMMARY
	USB device maximum power consumption

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The MaxPower field of the local USB device, as defined in Table 9.8
	of version 1.1 of the USB specification.
	
	This value is given in units of 2 milliamps (sic).
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_BT_IF_CLASS_CODES (0x02c7)

SUMMARY
	USB Bluetooth interface class codes

TYPE
	usbclass

DEFAULT VALUE
	{ 0xe0, 0x01, 0x01 }

DESCRIPTION
	Three bytes giving the class information for the USB "Interface
	Descriptor" (as defined in Table 9.9 of version 1.1 of the USB
	specification) which contains the USB control, BT HCI event and BT
	ACL endpoints. The class codes for the BT interface containing the
	SCO endpoints are given by PSKEY_USB_BT_SCO_IF_CLASS_CODES.
	
	Type usbclass is held as a uint16[3].  The three values are held in
	the lower byte of each of the array in the order
	
	        { class, subclass, protocol }.
	
	Default value maps to:
	    { WIRELESS_CONTROLLER, RF_CONTROLLER, BLUETOOTH_PROGRAMMING }.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_LANGID (0x02c9)

SUMMARY
	USB language strings supported

TYPE
	uint16

DEFAULT VALUE
	(0x0409)

DESCRIPTION
	Defines the languages supported by the USB interface. The languages
	are used in USB identification strings as described in section 9.6.5
	of version 1.1 of the USB specification. (Microsoft type "LANGID",
	used by the USB spec.)
	
	The default value of 0x0409 maps to:
	        Primary language id ENGLISH (1),
	        Secondary language id ENGLISH_US (9).
	
	Value is 0 if no language strings are supported.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_DFU_CLASS_CODES (0x02ca)

SUMMARY
	USB DFU class codes block

TYPE
	usbclass

DEFAULT VALUE
	{ 0xfe, 0x01, 0x00 }

DESCRIPTION
	Three bytes giving the class information for an "Interface Descriptor"
	as defined in Table 9.9 of version 1.1 of the USB specification. This
	key describes the DFU (Device Firmware Upgrade) interface of this USB
	device.
	
	Type usbclass is held as a uint16[3]. The three values are held in the
	lower byte of each of the array in the order
	
	        { class, subclass, protocol }.
	
	The default value maps to { APPLICATION_SPECIFIC_CLASS, DFU,
	NO_PROTOCOL }.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_DFU_PRODUCT_ID (0x02cb)

SUMMARY
	USB DFU product ID

TYPE
	uint16

DEFAULT VALUE
	(0xffff)

DESCRIPTION
	The idProduct field of the local USB device, as defined in Table 9.7
	of version 1.1 of the USB specification. This value applies when the
	local device is acting as a DFU (Device Firmware Upgrade) device.
	
	This must be different from the value held under PSKEY_USB_PRODUCT_ID.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_PIO_DETACH (0x02ce)

SUMMARY
	USB detach/attach PIO line

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	This PS key sets the PIO line used for USB detach/attach signalling. 
	Any of the first 16 PIOs (numbered 0-15) may be used. The absence of 
	this key indicates that this feature is not in use.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.
	
	This key can only be set to a value above 7 in BlueCore firmware
	versions 23f and greater.

==============================================================================
NAME
	PSKEY_USB_PIO_WAKEUP (0x02cf)

SUMMARY
	USB wakeup PIO line

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	This PS key sets the PIO line used for USB wakeup signalling in 
	detach mode. Any of the first 16 PIOs (numbered 0-15) may be used. The
	absence of this key indicates that this feature is not in use.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 
	
	This key can only be set to a value above 7 in BlueCore firmware
	versions 23f and greater.

==============================================================================
NAME
	PSKEY_USB_PIO_PULLUP (0x02d0)

SUMMARY
	USB D+ pullup PIO line

TYPE
	uint16

DEFAULT VALUE
	(USB_PULLUP_INTERNAL)

DESCRIPTION
	This PS key sets the PIO line used to control the pull-up resistor on 
	the USB D+ line. The absence of this key in the persistent storage 
	indicates that this feature is not in use.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.
	
	On BlueCore, there are 16 PIO lines, 0 to 15 (depending on package
	type), but 12 to 15 are not available for the USB pullup.
	
	Alternatively an internal pullup can be used by setting this key to
	the value 'Use internal pullup', which is also the default value.
	
	If value 'No pullup' is selected then the firmware will not apply
	a pullup, in this case it is intended that the pullup will be
	controlled by a VM application.

==============================================================================
NAME
	PSKEY_USB_PIO_VBUS (0x02d1)

SUMMARY
	USB VBus detection PIO Line

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	This PS key sets the PIO line used for USB VBus detection. Any of the 
	first 16 PIOs (numbered 0-15) may be used. In addition, for Bluecore
	variants with the relevant battery charger hardware, VDD_CHG can be
	selected instead of a PIO line.
	The absence of this key indicates that this feature is not in use.
	
	If specifying a PIO, the PIO line should be attached to the USB VBus
	line. BlueCore then uses the level of this PIO to implement USB
	attach (when VBus goes high) and detach (when VBus goes low) in the
	firmware.
	If specifying VDD_CHG, the VDD_CHG pin will already be connected
	to USB VBus, and this avoids having to tie up a PIO pin. VDD_CHG can
	still be used if PSKEY_CHARGER_DISABLE is set to TRUE.
	
	This key is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 
	
	This key can only be set to use a PIO above 7 in BlueCore firmware
	versions 23f and greater.
	
	This key can only be set to use VDD_CHG for Bluecore variants with the
	relevant battery charger hardware.

==============================================================================
NAME
	PSKEY_USB_PIO_WAKE_TIMEOUT (0x02d2)

SUMMARY
	Timeout for assertion of USB PIO wake signal

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The number of seconds for which the PIO wake signal will be asserted
	following the generation of data that is to be transmitted to the
	host. The timeout is reset each time new data is generated.
	
	If this value is 0, the signal is asserted indefinitely (or until the
	host de-asserts detach).
	
	This key is useful for hosts that are sometimes unable to respond to
	the wake signal (e.g. laptops when their lids are closed). If wake is
	asserted when the host cannot process wake and kept asserted until it
	is able to process the signal, then the host could be woken up to
	receive an event which is out of date. The host will, of course, have
	to process any old events when it does reconnect to a device following
	a wake timeout.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_PIO_RESUME (0x02d3)

SUMMARY
	PIO signal used in place of bus resume

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The PIO line used to signal that the USB host wakeup from suspend.
	Any of the first 16 PIOs (numbered 0-15) may be used. The absence of
	this key indicates that this feature is not in use.
	
	PIO resume is used in place of the bus resume signal for hosts that
	are unable to respond to the bus signal during suspend e.g. PDAs that
	power-down the root hub in suspend. 
	
	The PIO line is high to indicate that the host should resume, low
	otherwise. It remains asserted until activity is restored on the USB.
	
	Setting this PS key is sufficient to enable this feature; no notice is
	taken of the remote wakeup setting of PSKEY_USB_ATTRIBUTES nor of
	whether the host has enabled remote wakeup.
	
	PSKEY_USB_PIO_RESUME is mutually exclusive with PSKEY_USB_PIO_WAKEUP -
	both can be enabled simultaneously and assigned to the same PIO pin.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 
	
	This key can only be set to a value above 7 in BlueCore firmware
	versions 23f and greater.

==============================================================================
NAME
	PSKEY_USB_BT_SCO_IF_CLASS_CODES (0x02d4)

SUMMARY
	USB Bluetooth SCO interface class codes

TYPE
	usbclass

DEFAULT VALUE
	{ 0xe0, 0x01, 0x01 }

DESCRIPTION
	Three bytes giving the class information for the USB "Interface
	Descriptor" (as defined in Table 9.9 of version 1.1 of the USB
	specification) which contains the SCO endpoints.
	
	This PS key enables different class codes to be used for the BT SCO
	interface from the main BT interface (which contains the control,
	event and acl endpoints and whose class codes are given by
	PSKEY_USB_BT_IF_CLASS_CODES). The advantage of this is that the host
	OS can load different drivers to communicate with each of the
	interfaces. This is expected to be of use for Microsoft's XP OS in
	which the in-built BT USB driver will not give access to the SCO
	endpoints.
	
	Type usbclass is held as a uint16[3]. The three values are held in the
	lower byte of each of the array in the order:
	
	        { class, subclass, protocol }.
	
	Default value maps to:
	    { WIRELESS_CONTROLLER, RF_CONTROLLER, BLUETOOTH_PROGRAMMING }.
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE. 

==============================================================================
NAME
	PSKEY_USB_SUSPEND_PIO_LEVEL (0x02d5)

SUMMARY
	USB PIO levels to set when suspended

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	This description covers PSKEY_USB_SUSPEND_PIO_LEVEL,
	PSKEY_USB_SUSPEND_PIO_DIR, PSKEY_USB_SUSPEND_PIO_MASK.
	
	To ensure that the limit on power drawn in suspend mode for a
	bus-powered device is met, BlueCore usually sets all PIO lines to low.
	However, this may not always be correct and this set of PS keys allows
	the configuration to be set.
	
	PSKEY_USB_SUSPEND_PIO_MASK indicates which PIOs should be set when in
	suspend mode. A 1 in the mask indicates a PIO line to be set according
	to the corresponding bits in PSKEY_USB_SUSPEND_PIO_LEVEL and
	PSKEY_USB_SUSPEND_PIO_DIR; a 0 indicates a PIO line that will be left
	alone.
	
	For each bit that is set to 1 in PSKEY_SUB_SUSPEND_PIO_MASK, a 0 (1)
	for the corresponding bit in PSKEY_USB_SUSPEND_PIO_LEVEL indicates
	that the line should be set low (high), and a 0 (1) for the
	corresponding bit in PSKEY_USB_SUSPEND_PIO_DIR indicates that the line
	will be set for input (output). Note that from BlueCore2 on if a line
	is set for input the level is still useful: it determines whether a
	weak pull-up or pull-down will be applied. Therefore for BlueCore 1,
	PSKEY_USB_SUSPEND_PIO_DIR is not used and any line to be driven is set
	for output.
	
	Any PIO line configured via PSKEY_USB_PIO_PULLUP is handled
	separately; the bit does not need to be set in any of these three
	PSKEYs. The keys apply to a bus-powered USB device only; on a
	self-powered USB device the PIO lines are not modified in suspend
	mode.
	
	The names of these keys are misleading as the same
	facilities are used to handle BCCMDVARID_WARM_HALT and
	BCCMDVARID_COLD_HALT, regardless of the host transport.

==============================================================================
NAME
	PSKEY_USB_SUSPEND_PIO_DIR (0x02d6)

SUMMARY
	USB PIO I/O directions to set when suspended

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	See PSKEY_USB_SUSPEND_PIO_LEVEL.

==============================================================================
NAME
	PSKEY_USB_SUSPEND_PIO_MASK (0x02d7)

SUMMARY
	USB PIO lines to be set forcibly in suspend

TYPE
	uint16

DEFAULT VALUE
	(0xffff)

DESCRIPTION
	See PSKEY_USB_SUSPEND_PIO_LEVEL.

==============================================================================
NAME
	PSKEY_USB_ENDPOINT_0_MAX_PACKET_SIZE (0x02d8)

SUMMARY
	The maxmimum packet size for USB endpoint 0

TYPE
	uint8

DEFAULT VALUE
	(64)

DESCRIPTION
	The bMaxPacketSize0 field of the USB Standard Device Descriptor, as
	defined in Table 9.7 of version 1.1 of the USB specification.
	
	Only values 8, 16, 32 and 64 are valid for this field. 
	
	This value is only used if the chip is presenting its USB interface.
	See the description of PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_USB_CONFIG (0x02d9)

SUMMARY
	USB config params for new chips (>bc2)

TYPE
	uint16

DEFAULT VALUE
	( 0x30 )

DESCRIPTION
	This key modifies the behaviour of the USB interface code.
	It should only be configured on advice from CSR.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTORS_MAP (0x02da)

SUMMARY
	USB string descriptors map

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key maps USB string descriptor indexes to the PSKEY numbers
	containing the string descriptors for those indexes.
	
	Each uint16 pair maps a string index to a PSKEY number. The format
	of this key is therefore:
	
	{string_index, pskey_number}, {string_index, pskey_number}, ...
	
	If string descriptor index 8 is to be mapped to the string contained
	in PSKEY 15 and string descriptor index 6 is to be mapped to the
	string contained in PSKEY 3 then PSKEY_USB_STRING_DESCRIPTORS_MAP
	would be set as follows:
	
	{8, 15} , {6, 3}
	
	The PSKEY_USB_STRING_DESCRIPTORn keys were created to provide a
	convenient set of keys in which to store USB string descriptor
	strings.
	 

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR0 (0x02db)

SUMMARY
	USB string descriptor key 0

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR1 (0x02dc)

SUMMARY
	USB string descriptor key 1

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR2 (0x02dd)

SUMMARY
	USB string descriptor key 2

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR3 (0x02de)

SUMMARY
	USB string descriptor key 3

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR4 (0x02df)

SUMMARY
	USB string descriptor key 4

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR5 (0x02e0)

SUMMARY
	USB string descriptor key 5

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR6 (0x02e1)

SUMMARY
	USB string descriptor key 6

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR7 (0x02e2)

SUMMARY
	USB string descriptor key 7

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR8 (0x02e3)

SUMMARY
	USB string descriptor key 8

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR9 (0x02e4)

SUMMARY
	USB string descriptor key 9

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR10 (0x02e5)

SUMMARY
	USB string descriptor key 10

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR11 (0x02e6)

SUMMARY
	USB string descriptor key 11

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR12 (0x02e7)

SUMMARY
	USB string descriptor key 12

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR13 (0x02e8)

SUMMARY
	USB string descriptor key 13

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR14 (0x02e9)

SUMMARY
	USB string descriptor key 14

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_STRING_DESCRIPTOR15 (0x02ea)

SUMMARY
	USB string descriptor key 15

TYPE
	unicodestring

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a USB string descriptor. The
	mapping of string descriptor number to the string stored
	in this key is controlled by PSKEY_USB_STRING_DESCRIPTORS_MAP.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC_MAP (0x02eb)

SUMMARY
	USB feature descriptor map

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This PSKEY stores the mapping of indexes to PSKEY numbers containing
	the feature descriptors associated with those keys. The format of 
	this PSKEY is:
	
	{key, pskey_number}, {key, pskey_number}, ...
	
	This key is three words long and consists of bRequest, wValue, and 
	wIndex in the following order: 
	
	{bRequest, wValue, wIndex} 
	
	The keys PSKEY_USB_FEATURE_DESCn can be used to store the 
	feature descriptors.
	
	The descriptors stored here will only be used if there is no VM
	present, or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC0 (0x02ec)

SUMMARY
	USB feature descriptor key 0

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC1 (0x02ed)

SUMMARY
	USB feature descriptor key 1

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC2 (0x02ee)

SUMMARY
	USB feature descriptor key 2

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC3 (0x02ef)

SUMMARY
	USB feature descriptor key 3

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC4 (0x02f0)

SUMMARY
	USB feature descriptor key 4

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC5 (0x02f1)

SUMMARY
	USB feature descriptor key 5

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC6 (0x02f2)

SUMMARY
	USB feature descriptor key 6

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC7 (0x02f3)

SUMMARY
	USB feature descriptor key 7

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC8 (0x02f4)

SUMMARY
	USB feature descriptor key 8

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC9 (0x02f5)

SUMMARY
	USB feature descriptor key 9

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC10 (0x02f6)

SUMMARY
	USB feature descriptor key 10

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC11 (0x02f7)

SUMMARY
	USB feature descriptor key 11

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC12 (0x02f8)

SUMMARY
	USB feature descriptor key 12

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC13 (0x02f9)

SUMMARY
	USB feature descriptor key 13

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC14 (0x02fa)

SUMMARY
	USB feature descriptor key 14

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_FEATURE_DESC15 (0x02fb)

SUMMARY
	USB feature descriptor key 15

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key can be used to store a feature descriptor. The mapping of 
	the key to the feature descriptor stored here
	is controlled by PSKEY_USB_FEATURE_DESC_MAP. The descriptor
	stored here will only be used if there is no VM present, 
	or if PSKEY_USB_VM_CONTROL is set to FALSE.

==============================================================================
NAME
	PSKEY_USB_ALLOW_DEEP_SLEEP (0x02fc)

SUMMARY
	USB device state allow deep sleep

TYPE
	uint8

DEFAULT VALUE
	1

DESCRIPTION
	Allow deep sleep during USB suspend/detach
	    0 - Never deep sleep
	    1 - Deep sleep during suspend
	    2 - Deep sleep during detach
	    3 - Deep sleep during suspend and detach

==============================================================================
NAME
	PSKEY_RADIOTEST_ATTEN_INIT (0x0320)

SUMMARY
	Radio test initial attenuator

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Initial value of the attenuator setting for radio tests.  This is
	ignored by the main Bluetooth stack.

==============================================================================
NAME
	PSKEY_RADIOTEST_FIRST_TRIM_TIME (0x0326)

SUMMARY
	IQ first calibration period in test

TYPE
	TIME

DEFAULT VALUE
	(5 * SECOND)

DESCRIPTION
	The time from the start of a test till the first IQ trim
	auto-calibration is done.  A value of 0 disables the automatic
	calibration completely during the test.  A calibration is still done
	before the test starts.

==============================================================================
NAME
	PSKEY_RADIOTEST_SUBSEQUENT_TRIM_TIME (0x0327)

SUMMARY
	IQ subsequent calibration period in test

TYPE
	TIME

DEFAULT VALUE
	(0)

DESCRIPTION
	In normal operation, the chip schedules regular trims of the IQ block
	to prevent degradation of the radio performance.  These are placed so
	as to avoid interfering with normal radio traffic.  This is not
	possible in radiotest mode when the transmissions are back to back,
	hence this key exists to choose the most suitable behaviour.
	
	Once the first IQ trim auto calibration is done in test mode, then
	subsequent trims are done at regular intervals with the period being
	given by this key, which is a time in microseconds.  If the value is 0
	then no subsequent trim is performed.
	
	If PSKEY_RADIOTEST_FIRST_TRIM_TIME is 0 then no trims are done during
	the test regardless of the setting of this key.

==============================================================================
NAME
	PSKEY_RADIOTEST_LO_LVL_TRIM_ENABLE (0x0328)

SUMMARY
	LO_LVL calibration enable

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	If IQ trim is enabled (PSKEY_IQ_TRIM_ENABLE), enables trimming of the
	value for the register ANA_LO_ENABLE; otherwise, has no effect.  This
	trimming takes place before the start of each test.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_RADIOTEST_DISABLE_MODULATION (0x032c)

SUMMARY
	Disable modulation during radiotest transmissions

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	If enabled, do not use modulation during any of the radiotest_txdata
	routines.  Clearly, this is no use for transmitting packets; it is
	present to provide a low level way of showing the radio carrier
	behaviour.
	
	Has no effect on any other function.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_IPV6_STATIC_ADDR (0x0354)

SUMMARY
	Static IPv6 address

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv6 address assigned to the local device.
	
	The address is stored as eight 16-bit words corresponding directly to
	the conventional uncompressed text representation of IPv6 addresses.
	For example, the IPv6 address 1234:0:0:0:0:0:0:5678 is stored as
	{ 0x1234, 0, 0, 0, 0, 0, 0, 0x5678 }.
	
	If this key is not defined then the local device's IPv6 addresses will
	only include the link-local address derived from the Bluetooth address
	and any autoconfigured address.

==============================================================================
NAME
	PSKEY_IPV4_STATIC_ADDR (0x0355)

SUMMARY
	Static IPv4 address

TYPE
	uint32

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv4 address assigned to the local device.
	
	The address is stored as a 32-bit value in standard network form.
	For example, the IPv4 address 192.168.1.2 is stored as 0xc0a80102.
	
	If this key is not defined then the local device's IPv4 addresses will
	only include a randomly-derived link-local address and any
	autoconfigured address.
	
	If this key is defined, PSKEY_IPV4_STATIC_SUBNET_MASK should also be
	defined.

==============================================================================
NAME
	PSKEY_IPV6_STATIC_PREFIX_LEN (0x0356)

SUMMARY
	Static IPv6 prefix length

TYPE
	uint8

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv6 prefix length (applied w.r.t. PSKEY_IPV6_STATIC_ADDR)
	assigned to the local device.
	
	The prefix length is measured in bits.
	
	This key should be defined if PSKEY_IPV6_STATIC_ADDR is.
	
	If this key is defined, PSKEY_IPV6_STATIC_ROUTER_ADDR should also be
	defined.

==============================================================================
NAME
	PSKEY_IPV6_STATIC_ROUTER_ADDR (0x0357)

SUMMARY
	Static IPv6 router address

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv6 address assigned to the subnet router (gateway).
	
	The address is stored as eight 16-bit words corresponding directly to
	the conventional uncompressed text representation of IPv6 addresses.
	For example, the IPv6 address 1234:0:0:0:0:0:0:cafe is stored as
	{ 0x1234, 0, 0, 0, 0, 0, 0, 0xcafe }.
	
	This key should be defined if PSKEY_IPV6_STATIC_PREFIX_LEN is.
	The subnet router and the local device should share the same prefix.

==============================================================================
NAME
	PSKEY_IPV4_STATIC_SUBNET_MASK (0x0358)

SUMMARY
	Static IPv4 subnet mask

TYPE
	uint32

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv4 subnet mask (applied w.r.t. PSKEY_IPV4_STATIC_ADDR)
	assigned to the local device.
	
	The mask is stored as a 32-bit value in standard network form.
	For example, the subnet mask 255.255.248.0 is stored as 0xfffff800.
	
	This key should be defined if PSKEY_IPV4_STATIC_ADDR is.
	
	If this key is defined, PSKEY_IPV4_STATIC_ROUTER_ADDR should also be
	defined.

==============================================================================
NAME
	PSKEY_IPV4_STATIC_ROUTER_ADDR (0x0359)

SUMMARY
	Static IPv4 router address

TYPE
	uint32

DEFAULT VALUE
	<none>

DESCRIPTION
	The static IPv4 address assigned to the subnet router (gateway).
	
	The address is stored as a 32-bit value in standard network form.
	For example, the IPv4 address 192.168.1.254 is stored as 0xc0a801fe.
	
	This key should be defined if PSKEY_IPV4_STATIC_SUBNET_MASK is.
	The subnet router and the local device should be on the same subnet.

==============================================================================
NAME
	PSKEY_MDNS_NAME (0x035a)

SUMMARY
	Multicast DNS name

TYPE
	char[]

DEFAULT VALUE
	<none>

DESCRIPTION
	The name assigned to the local device for the purposes of multicast
	DNS.
	
	The name must not include a trailing NUL, and must not be more than
	16 characters long.  It must be a label, not be a FQDN (i.e. must not
	contain dots).  All letters must be in lowercase.

==============================================================================
NAME
	PSKEY_FIXED_PIN (0x035b)

SUMMARY
	Fixed PIN

TYPE
	uint8[]

DEFAULT VALUE
	<none>

DESCRIPTION
	The fixed PIN assigned to the local device.  This must have a length
	greater than zero (and less than 17).

==============================================================================
NAME
	PSKEY_MDNS_PORT (0x035c)

SUMMARY
	Multicast DNS port

TYPE
	uint16

DEFAULT VALUE
	5353

DESCRIPTION
	The port number to be used by the local device for multicast DNS.

==============================================================================
NAME
	PSKEY_MDNS_TTL (0x035d)

SUMMARY
	Multicast DNS TTL

TYPE
	uint8

DEFAULT VALUE
	1

DESCRIPTION
	The TTL (Hop Limit for IPv6) to be used by the local device for
	multicast DNS.

==============================================================================
NAME
	PSKEY_MDNS_IPV4_ADDR (0x035e)

SUMMARY
	Multicast DNS IPv4 address

TYPE
	uint32

DEFAULT VALUE
	0xe00000fb

DESCRIPTION
	The IPv4 address to be used by the local device for multicast DNS.
	
	The address is stored as a 32-bit value in standard network form.
	For example, the IPv4 address 224.0.0.251 is stored as 0xe00000fb.

==============================================================================
NAME
	PSKEY_ARP_CACHE_TIMEOUT (0x035f)

SUMMARY
	ARP cache timeout

TYPE
	uint16

DEFAULT VALUE
	120

DESCRIPTION
	The time in seconds before an ARP cache entry is considered stale and
	hence is rechecked (via an ARP request) when it is next used.

==============================================================================
NAME
	PSKEY_HFP_POWER_TABLE (0x0360)

SUMMARY
	HFP power table

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This PS key configures the HFP library power table.

==============================================================================
NAME
	PSKEY_LOOP_FILTER_TRIM (0x03e4)

SUMMARY
	Trim value to optimise loop filter

TYPE
	uint16

DEFAULT VALUE
	(0x0585)

DESCRIPTION
	Sets a trim for optimising the loop filter to give the best trade-off between
	phase noise and the time taken for the the synthesiser to settle at the start
	of each radio packet.
	
	Bits  [3:0] define the resistor trim for the internal loop filter
	Bits  [7:4] define the capacitor trim for the internal loop filter
	Bits [11:8] define the phase comparator level; this can be used to optimise
	            both the internal and external loop filters
	Bit  [12]   define if we run in single or dual charge pump mode (bc5+ only) 
	            1=use single charge pump mode 0=dual charge pump mode
	Versions of BlueCore from BlueCore2-ROM only.

==============================================================================
NAME
	PSKEY_FORCE_16MHZ_REF_PIO (0x03e1)

SUMMARY
	PIO line to force 16 MHz reference to be assumed

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The number of a PIO line, 0 to 15, which will cause the value of
	PSKEY_ANA_FREQ to be ignored and a 16 MHz reference to be assumed
	instead.  A value of 0xFFFF, or absence of a value, indicates the feature is
	not to be used.
	
	This is useful in ROM builds which may set the PSKEY_ANA_FREQ default for
	a non-16 MHz reference (eg. 13 or 26 MHz, as commonly used in GSM phones).
	It allows correct operation with modules that use a 16 MHz crystal instead.
	Without this facility it would not be possible to make a host connection at a
	standard UART baud rate or with USB for modules that use a 16 MHz crystal.

==============================================================================
NAME
	PSKEY_CDMA_LO_REF_LIMITS (0x03df)

SUMMARY
	Local oscillator frequency reference limits for CDMA

TYPE
	uint16

DEFAULT VALUE
	(0x2314)

DESCRIPTION
	This value is used in the run-time generation of the local oscillator
	configuration table when using a CDMA (non n*250 kHz) reference clock.
	
	Bits [7:0]  define the minimum allowed local oscillator frequency
	reference in units of 10 kHz.
	
	Bits [15:8] define the maximum allowed local oscillator frequency
	reference in units of 10 kHz.
	
	Available from BlueCore2-ROM only.

==============================================================================
NAME
	PSKEY_CDMA_LO_ERROR_LIMITS (0x03de)

SUMMARY
	Local oscillator frequency error limits for CDMA

TYPE
	uint16

DEFAULT VALUE
	(0x140F)

DESCRIPTION
	This value is used in the run-time generation of the local oscillator
	configuration table when using a CDMA (non n*250 kHz) reference clock.
	
	Bits [7:0]  define the maximum acceptable local oscillator frequency
	error on transmit in uints of 1 kHz when using the preferred frequency
	offset.
	
	Bits [15:8] define the maximum allowed local oscillator frequency
	error in units of 1 kHz to terminate the search.
	
	Available from BlueCore2-ROM only.

==============================================================================
NAME
	PSKEY_CLOCK_STARTUP_DELAY (0x03dd)

SUMMARY
	Clock startup delay in milliseconds

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	On waking from deep sleep, BlueCore usually expects an external clock
	supplied to the chip to be stable within 5 milliseconds of the clock
	request line being asserted.  If this is not the case, special action
	must be taken to avoid loss of clock accuracy.  In particular, the
	clock accuracy must not fall below 250 parts per million while there
	are Bluetooth connections to the device.
	
	On BlueCore2-ROM, this key should be set to the maximum time in
	milliseconds which it will take an external clock to stabilise.  This
	results in slightly less efficient power consumption on entry to and
	exit from deep sleep.  It has no effect if the value is less than 6
	milliseconds, or if no clock request line is in use.
	
	On BlueCore3 and later, a value from 1 to 31 inclusive is used
	directly as count of cycles of the low power oscillator (LPO).
	Setting a value of zero (the default) causes a delay of 5 cycles to be
	used.  The frequency of the internal LPO is nominally 1 kHz but varies
	somewhat between individual chips, so care should be taken when
	picking a suitable value. When supplying an external slow clock (see
	PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK), the nominal 32 kHz clock is
	divided by 32 before use.

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_CORRECTION_FACTOR (0x03dc)

SUMMARY
	Deep sleep clock correction factor

TYPE
	int16

DEFAULT VALUE
	(3)

DESCRIPTION
	In deep sleep, BlueCore has a low power oscillator circuit which is used to
	keep time.  Different variants of the chip have slightly different
	behaviour.  This key allows the correction for the chip to be tweaked:
	lower (signed) values make the clock run slower, and higher values make it
	run faster.  This should only need to be changed for different hardware;
	therefore, the value should only be altered on advice from CSR.
	
	The value is not applied if PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK is TRUE
	as the external clock will not have the same systematic behaviour.

==============================================================================
NAME
	PSKEY_TEMPERATURE_CALIBRATION (0x03db)

SUMMARY
	Temperature in deg C for a given internal setting

TYPE
	temperature_calibration

DEFAULT VALUE
	{ 0x0017, 0x5db5 }

DESCRIPTION
	This value must be set to enable temperature compensation which is
	available from some BC2-ROM versions and all later parts. It is used
	to calibrate the internal thermometer and can be set separately for
	each individual chip.  It consists of two words.
	
	The first word is the calibration temperature in degrees Celsius
	stored as an int16.  The second word is a uint16 comprising of 
	two 8 bit fields.  
	
	Pre BC5 they are coded as:
	  - Lower 8 bits: the value read from ADC channel 1  (at cal temp)
	  - Upper 8 bits: the value read from ADC channel 36 (at cal temp)
	
	Post BC5 they are coded as:
	  - Lower 8 bits: ADC channel 1  coded as 10 bits - 700 (at cal temp)
	  - Upper 8 bits: ADC channel 36 coded as 10 bits - 300 (at cal temp)
	
	All three readings must be made together. Pre BC5 ADC values are
	simply the values returned from the standard BCCMD ADC interface.
	
	Post BC5 the (8 bit) BCCMD ADC readings need to be multiplied by 4
	and then 700 or 300 subtracted from the result to obtain the 8 bit
	values for the pskeys (as shown above).
	
	To turn temperature compensation off, both words should be set to
	zero.  (Note that this must be *two* zero 16-bit words, as zero
	is an acceptable value for the temperature in degrees Celsius.)
	
	Note that in version 17 of the firmware and before the second reading
	was made from channel 10.  This will not work for chips starting
	with BlueCore3.  However, from version 18 onwards channel 36 maps to
	the correct channel for the temperature reading regardless of the
	underlying hardware.
	

==============================================================================
NAME
	PSKEY_TEMPERATURE_VS_DELTA_INTERNAL_PA (0x03da)

SUMMARY
	Temperature for given internal PA adjustment

TYPE
	temperature_calibration[]

DEFAULT VALUE
	{ { -10, -3 }, { 0, -2 }, { 10, -2 }, 
			  { 20, -1 }, { 40, -1 }, { 50, 0 }, 
			  { 60, 0 }, { 70, 1 }, { 90, 5 }, 
			  { 100, 9 } }

DESCRIPTION
	
	The value consists of a table of pairs of 16-bit signed values, as
	many pairs as necessary.  Each pair is in a similar format to
	PSKEY_TEMPERATURE_CALIBRATION: the first value is a temperature in
	degrees Celsius, while in this case the second is a signed correction
	to be made to the internal PA setting at that temperature.  The value
	will be interpolated linearly between those settings, but will not be
	extrapolated beyond the end of the temperature range.  The
	temperatures should increase monotonically, but the corrections at
	each temperature need not.

==============================================================================
NAME
	PSKEY_TEMPERATURE_VS_DELTA_TX_PRE_LVL (0x03d9)

SUMMARY
	Temperature for a given TX_PRE_LVL adjustment

TYPE
	temperature_calibration[]

DEFAULT VALUE
	{ { 30, 0}, { 40, 2 }, { 90, 2 }, { 100, 6 } }

DESCRIPTION
	The value is a table in the same format as
	PSKEY_TEMPERATURE_VS_DELTA_INTERNAL_PA.  The values of the table
	(even-numbered 16-bit words) in this case are an adjustment applied to
	PSKEY_TX_PRE_LVL which should be in the range -15 to 15.  The
	adjusted value will be limited to the range 0 to 15.

==============================================================================
NAME
	PSKEY_TEMPERATURE_VS_DELTA_TX_BB (0x03d8)

SUMMARY
	Temperature for a given TX_BB adjustment

TYPE
	temperature_calibration[]

DEFAULT VALUE
	{ { 20 , 2}, { 30, 0 }, { 40, 0 }, { 60, -2}, 
			  { 80, -2 }, { 100, 0 } }

DESCRIPTION
	The value is a table in the same format as
	PSKEY_TEMPERATURE_VS_DELTA_INTERNAL_PA.  The values of the table
	(even-numbered 16-bit words) in this case are an adjustment applied
	separately to both the top nybbles of PSKEY_TX_FILTER_CONFIG; hence
	they must lie in the range -15 to 15.  The adjusted nybbles will be
	limited to the range 0 to 15.

==============================================================================
NAME
	PSKEY_TEMPERATURE_VS_DELTA_ANA_FTRIM (0x03d7)

SUMMARY
	Temperature for given crystal trim adjustment

TYPE
	temperature_calibration[]

DEFAULT VALUE
	<none>

DESCRIPTION
	The value is a table in the same format as
	PSKEY_TEMPERATURE_VS_DELTA_INTERNAL_PA.  The values of the table
	(even-numbered 16-bit words) in this case are an adjustment applied
	separately to PSKEY_ANA_FTRIM.

==============================================================================
NAME
	PSKEY_TEST_DELTA_OFFSET (0x03d6)

SUMMARY
	Frequency offset applied to synthesiser in test mode

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	This offset is applied to the frequency trim in certain test modes.
	The value zero is equivalent to normal operation.  It should only be
	configured on advice from CSR.

==============================================================================
NAME
	PSKEY_RX_DYNAMIC_LVL_OFFSET (0x03d4)

SUMMARY
	Receiver dynamic level offset depending on channel

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	The value of this key is added to the receiver level to optimise certain
	channels during reception.
	
	It consists of four four-bit fields.  Bits 0 to 3 control the
	behaviour at resonance, bits 4 to 7 one channel away, bits 8 to 11 two
	channels away, and bits 12 to 15 three channels away.

==============================================================================
NAME
	PSKEY_TEST_FORCE_OFFSET (0x03d3)

SUMMARY
	Force use of exact value in PSKEY_TEST_DELTA_OFFSET

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key modifies the behaviour of PSKEY_TEST_DELTA_OFFSET.  It should
	only be configured on advice from CSR.

==============================================================================
NAME
	PSKEY_RF_TRAP_BAD_DIVISION_RATIOS (0x03cf)

SUMMARY
	Trap bad division ratios in radio frequency tables

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	This PSKEY enables code to trap the frequency division ratios that
	cause unwanted effects.
	
	When creating the lookup table for RF oscillations, certain entries
	can create spurs at 1.8 GHz.  Bits 0 and 1 control this.
	
	Bit 0 should be turned on or off to enable or disable trapping of such
	ratios on transmission.
	
	Bit 1 should be turned on or off to enable or disable trapping of such
	ratios on reception.
	
	Bit 2 should be turned on or off to enable or disable trapping of
	division ratios that clash with the 48 MHz USB clock.

==============================================================================
NAME
	PSKEY_RADIOTEST_CDMA_LO_REF_LIMITS (0x03ce)

SUMMARY
	LO frequency reference limits for CDMA in radiotest

TYPE
	uint16

DEFAULT VALUE
	(0x2314)

DESCRIPTION
	Used in an identical way to PSKEY_CDMA_LO_REF_LIMITS, except in
	radiotest mode.

==============================================================================
NAME
	PSKEY_INITIAL_BOOTMODE (0x03cd)

SUMMARY
	Initial device bootmode

TYPE
	int16

DEFAULT VALUE
	<none>

DESCRIPTION
	The firmware is capable of switching between a number of different
	'bootmodes'.  Each bootmode presents a different view of the
	persistent store, with some keys being overridden by bootmode-specific
	values.  A device can support a maximum of 8 bootmodes.  If this key
	is present the device will enter the specified bootmode after a cold
	reset.  If the key is not present, bootmode 0 will be used.

==============================================================================
NAME
	PSKEY_ONCHIP_HCI_CLIENT (0x03cc)

SUMMARY
	HCI traffic routed internally

TYPE
	bool

DEFAULT VALUE
	0

DESCRIPTION
	This key controls the routing of HCI traffic.  For a vanilla 'HCI'
	firmware build this key should be set to FALSE (0).  For a firmware
	build that incorporates upper stack layers, this key should be set to
	TRUE (1).

==============================================================================
NAME
	PSKEY_RX_ATTEN_BACKOFF (0x03ca)

SUMMARY
	Receiver attenuation back-off

TYPE
	uint16

DEFAULT VALUE
	(4)

DESCRIPTION
	The back-off value of the attenuation used by the receiver as a
	difference between the final attenuation selected by AGC for one
	packet and the initial attenuation selected for the following packet
	from the same remote transmitter.
	
	Only useful from BlueCore3.
	
	There is a dependency betwen this key and PSKEY_RX_ATTEN_UPDATE_RATE
	which must be maintained for correct operation of the AGC: see the
	description of PSKEY_RX_ATTEN_UPDATE_RATE for details.

==============================================================================
NAME
	PSKEY_RX_ATTEN_UPDATE_RATE (0x03c9)

SUMMARY
	Receiver attenuation update rate

TYPE
	uint16

DEFAULT VALUE
	(2)

DESCRIPTION
	This sets the rate at which the automatic gain control updates the
	receiver's attenuation.
	
	Only useful from BlueCore3.
	
	A value of 4 in PSKEY_RX_ATTEN_BACKOFF implies
	PSKEY_RX_ATTEN_UPDATE_RATE must be at least 2: if one key is changed,
	the other should be changed in direct proportion.

==============================================================================
NAME
	PSKEY_SYNTH_TXRX_THRESHOLDS (0x03c7)

SUMMARY
	Local oscillator tuning voltage limits for tx and rx

TYPE
	uint16

DEFAULT VALUE
	(0x1e6a)

DESCRIPTION
	The minimum and maximum tuning voltage in internal units used by the
	local oscillator for transmit and receive.
	
	This key is for CSR use only.

==============================================================================
NAME
	PSKEY_MIN_WAIT_STATES (0x03c6)

SUMMARY
	Flash wait state indicator

TYPE
	uint16

DEFAULT VALUE
	(1)

DESCRIPTION
	Some firmware requires flash devices that can be accessed without
	wait states.
	If the flash device requires wait states then it this key should
	be set to 1, otherwise it should be set to 0.
	
	The key is checked by DFU for upgrades.

==============================================================================
NAME
	PSKEY_RSSI_CORRECTION (0x03c5)

SUMMARY
	RSSI correction factor.

TYPE
	int8

DEFAULT VALUE
	(0)

DESCRIPTION
	The BlueCore (from BlueCore2-Ext chip version onwards) is able to
	measure the signal strength of packets received from air. This
	measurement is of the signal strength at the input to the chip rather
	than at the input to the module i.e. it does account for any
	attenuation or gain provided by external components such as the
	antenna or a LNA.
	
	This pskey specifies a value in dB that will be added to the
	BlueCore's RSSI reading to correct for external components.
	
	In builds prior to 19, this pskey only affects the RSSI values
	reported in 'inquiry response with RSSI' HCI events; it does not
	affect the RSSI value reported via the HCI_Read_RSSI command. In
	19 builds and upwards, this key affects all RSSI values reported
	by the chip.

==============================================================================
NAME
	PSKEY_SCHED_THROTTLE_TIMEOUT (0x03c4)

SUMMARY
	Scheduler performance control.

TYPE
	TIME

DEFAULT VALUE
	(500 * MILLISECOND)

DESCRIPTION
	This key modifies the behaviour of the Bluecore's scheduler.  It 
	should only be configured on advice from CSR.
	PSKEY_NOTE_START
	The maximum time, in microseconds, for which the scheduler can be
	blocked by interrupts. If this time is exceeded, execution of the
	hostio interrupt handlers is delayed (for a maximum time specified
	by PSKEY_HOSTIO_THROTTLE_TIMEOUT) to allow the scheduler to run.
	PSKEY_NOTE_END

==============================================================================
NAME
	PSKEY_DEEP_SLEEP_USE_EXTERNAL_CLOCK (0x03c3)

SUMMARY
	Deep sleep uses external 32 kHz clock source

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Versions of BlueCore from BlueCore3 can take a 32 kHz clock input to
	AIO0 to act as a timing source when the chip is in deep sleep.
	(This is referred to as the slow clock.)  Its frequency must be stable
	to at least 250 parts per million.  Its use is enabled by setting this
	key to TRUE.
	
	The clock does not have to be exactly 32 kHz; anything within a few
	percent (including 30 kHz) is useful.  The firmware will calibrate
	this external slow clock against the standard 20 ppm clock (as supplied
	by crystal or TCXO) at startup.  If PSKEY_DEEP_SLEEP_STATE is set to
	DEEP_SLEEP_ALWAYS_ACCURATE, the firmware will assume the external
	slow clock does not need subsequent calibration, saving extra power.
	
	If the worst-case accuracy of the supplied clock is significantly
	better than 250 parts per million, PSKEY_DEVICE_DRIFT can usefully be
	set to that accuracy.  This allows a slave in low power mode to turn
	on its radio for less time when attempting to resynchronise with its
	master. The worse-case accuracy of the supplied clock should not be
	any worse than 250 ppm for compliance with the Bluetooth
	specification.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_TRIM_RADIO_FILTERS (0x03c2)

SUMMARY
	Trim rx and tx radio filters if true.

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	This key should only be altered on advice from CSR.
	
	If bit 0 is set, the chip will perform a long (approximately 80 ms)
	trim of the radio's transmit and receive filters at boot, and
	periodically a short update.  This is not supported in firmware
	which supports enhanced data rate.
	
	If bit 1 is set, the chip will automatically determine a suitable
	value for the RSSI range on receive to prevent the receiver from
	saturating.  (This affects the value originally set by
	PSKEY_RSSI_HI_TARGET or by PSKEY_LC_RSSI_GOLDEN_RANGE on builds
	without PSKEY_RSSI_HI_TARGET).
	
	If bit 2 is set, the chip will dynamically configure the DC offset in
	the transmit baseband at startup.  This only applies to BlueCore2:
	this feature is always enabled on BlueCore3.
	
	In builds with PSKEY_MR_RX_FILTER_RESPONSE key present, bit 3 is used
	to enable a receive filters trim for use with Enhanced Data Rate
	(EDR).  An initialisation value given by PSKEY_MR_RX_FILTER_TRIM
	which must also be present.
	
	If the PSKEY_MR_RX_FILTER_RESPONSE key is not present, bit 3 has no
	function. The newer the golden curve trim can be enabled when present
	by setting the MR_ENABLE_RX_GOLDEN_CURVE_TRIM pskey to true.
	
	If bit 4 is set in builds with PSKEY_MR_ENABLE_RX_GOLDEN_CURVE_TRIM 
	from BlueCore 5 onwards then the golden curve RX filter trim will be
	be performed periodically.  Some hardware does not need a periodic 
	golden curve trim and in these systems this bit will have no effect.
	
	If bit 5 is set in builds with PSKEY_MR_ENABLE_RX_GOLDEN_CURVE_TRIM 
	from BlueCore 5 onwards then the golden curve RX filter trim value
	will also be used for basic rate reception.  If 0 then the default
	value used will be as defined by PSKEY_ANA_RX_FTRIM.
	
	If bit 6 is set in builds with PSKEY_MR_ENABLE_RX_GOLDEN_CURVE_TRIM 
	from BlueCore 5 onwards then the "best of 5" enhancement will be
	disabled.

==============================================================================
NAME
	PSKEY_TRANSMIT_OFFSET (0x03c1)

SUMMARY
	Transmit offset in units of 62.5 kHz

TYPE
	int16

DEFAULT VALUE
	<none>

DESCRIPTION
	Offset used for transmit, in units of 62.5 kHz.
	
	This value takes precedence over PSKEY_TX_OFFSET_HALF_MHZ if both
	are set.  It provides the same parameter but with greater resolution.

==============================================================================
NAME
	PSKEY_USB_VM_CONTROL (0x03c0)

SUMMARY
	VM application will supply USB descriptors

TYPE
	bool

DEFAULT VALUE
	0

DESCRIPTION
	Some VM applications such as the HID-proxy or USB cable-replacement
	dongle can supply their own USB descriptors. When using such an 
	application, this key must be set to TRUE to ensure that the 
	firmware does not attempt to register the default HCI descriptors.   

==============================================================================
NAME
	PSKEY_MR_ANA_RX_FTRIM (0x03bf)

SUMMARY
	Medium rate value for the ANA_RX_FTRIM register

TYPE
	uint16

DEFAULT VALUE
	(0x866)

DESCRIPTION
	Sets the initial value of the chip's $ANA_RX_FTRIM register when in
	enhanced data rate (formerly known as medium rate).
	
	(This is for CSR internal use only.  If you don't know what it's for,
	don't play with it.)

==============================================================================
NAME
	PSKEY_I2C_CONFIG (0x03be)

SUMMARY
	I2C configuration

TYPE
	uint16

DEFAULT VALUE
	0x0000

DESCRIPTION
	Configures the I2C bus.  The default value of this pskey configures
	the I2C bus for maximally-portable use, i.e. standard mode with long
	timeouts, suitable for slow I2C EEPROMs.
	
	If bit 0 is set, the I2C bus is configured for fast mode.  All other
	devices on the bus (i.e. all slave devices) must obey the fast mode
	I2C specification.  Note that in this mode the firmware does not have
	timeouts for SCL stretching -- the firmware will block while SCL is
	held low by the slave.
	
	Also note that fast mode is currently not implemented for signalling
	I2C operations such as (re)starts, stops and read acknowledgements;
	these will be performed as if in standard mode.

==============================================================================
NAME
	PSKEY_USB_DONT_RESET_BOOTMODE_ON_HOST_RESET (0x03b9)

SUMMARY
	Don't reset bootmode if USB host resets

TYPE
	bool

DEFAULT VALUE
	0

DESCRIPTION
	If a USB reset is received after a device has been enumerated and the
	Bluecore is in a bootmode other than the default, the USB subsystem
	will force a reset into the default bootmode unless this key is set to
	TRUE.

==============================================================================
NAME
	PSKEY_LC_USE_THROTTLING (0x03b8)

SUMMARY
	Adjust packet selection on packet error rate

TYPE
	bool

DEFAULT VALUE
	1

DESCRIPTION
	Allow the LC to select the packet type it chooses depending on the
	packet error rate. Setting this to FALSE makes the LC select packet
	size on data size only.

==============================================================================
NAME
	PSKEY_CHARGER_TRIM (0x03b7)

SUMMARY
	Trim value for the current charger

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	Some chip variants from BlueCore3-Flash onwards have battery 
	charger circuitry. This key supplies a value for the charger 
	trim which must be in the range 0..0xf. 
	
	Taking BC4-audio as an example the trim value alters:
	
	The voltage at which the charger will move from "trickle charge" 
	to "fast charge" modes, ranging from approximately 2.7 to 3.075V 
	in 25mV steps.
	
	The voltage at which the charger will move from "fast charge" to 
	"standby" modes, ranging from approximately 3.8 to 4.55V in 50mV
	steps.
	
	The voltage at which the charger will move from "standby" to 
	"fast charge" modes, ranging from approximately 3.75 to 4.35V in 40mV
	steps.
	
	So with a trim value of 0x4, the charger will move from "trickle" to
	"fast" charge at ~2.8V, move from "fast charge" to "standby" at ~4.0V,
	and move from "standby" to "fast charge" at ~3.9v.
	
	These values are only to be taken as rough approximations for
	BC4-audio and may also alter for other BlueCore variants.
	
	This key should only be set on advice from CSR.

==============================================================================
NAME
	PSKEY_CLOCK_REQUEST_FEATURES (0x03b6)

SUMMARY
	Clock request is tristated if enabled

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	This key is only applicable if the value of PSKEY_CLOCK_REQUEST_ENABLE
	is non-zero.
	
	The clock request PIO can be configured to be active-high or -low. In
	an inactive state, it can be tristated or driven as an output by
	BlueCore.
	
	Bit 0 of this PSKEY inverts the polarity of the PIO when not
	tristated.
	When it is set, the PIO is active low.
	When it is clear, the PIO is active high.
	
	When bit 1 is set, PIO is tristated when the clock request is
	inactive.  When bit 1 is clear, PIO is a driven output when the clock
	request is inactive.
	
	The default behaviour is that the PIO is active high and always
	driven.
	
	The key is available from BlueCore3-ROM, but has no effect on 
	BlueCore3-Multimedia. BlueCore3-Multimedia has the clock request 
	line but this cannot be configured to either be inverted or tristated.

==============================================================================
NAME
	PSKEY_INITIAL_PIO_STATE (0x03b5)

SUMMARY
	Initial state of PIO pins

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	
	This key may be used to set the initial state of the PIO pins prior to
	the VM application running.  The key is an array of uint16s which can
	be considered to have the following structure:-
	
	struct {
	   uint16 mask;
	   uint16 direction;
	   uint16 level;
	   uint16 bias;
	   uint16 buskeep_en;
	   uint16 disable_pull;
	}
	
	Each word within the structure can be considered to be an array of
	bits corresponding to individual PIO pins.
	
	The mask word is used to control which PIO pins are controlled by this
	key.  Note that PIOs which are assigned to firmware functions
	(including those masked by PSKEY_PIO_PROTECT_MASK) are also masked
	out.
	
	The direction word is used to control pin direction:-
	0 = input
	1 = output 
	
	The level word is optional and controls pin output levels:-
	0 = low 
	1 = high
	From BlueCore2-External on, for pins set as inputs by the direction
	word, the corresponding bits in this word determine the direction of
	a weak pull device (0=pull-down, 1=pull-up).
	If the word is not present, pins will be set to their default power-on
	levels.
	
	The bias word is optional and controls the strength of the bias
	applied to pins configured as input:-
	0 = weak bias
	1 = strong bias
	If the word is not present, pins will be set to their default power-on
	bias strength. 
	
	The buskeep_en word is optional and controls whether "bus-keeper"
	functionality (see PSKEY_BCSP_PULL_CONTROL) is enabled for pins
	configured as inputs, on chips which support this:-
	0 = bus-keeper disabled
	1 = bus-keeper enabled
	If the word is not present, no bus-keepers will be enabled.
	
	The disable_pull word is optional and controls whether the internal
	pull device is disabled (see PSKEY_BCSP_PULL_CONTROL) for pins
	configured as inputs, on chips which support this. (These bits have
	no effect on pins configured as outputs.)
	0 = pull device enabled
	1 = pull device disabled
	If the word is not present, pull devices will be enabled.
	NOTE: disabling pull devices when pins are not driven externally can
	lead to excessive current consumption and potentially damage the
	chip.
	
	Example
	-------
	
	To set PIO 3 as an output driving a high signal and PIO 5 as an input
	with strong-bias set the key to (0x0028,0x0008,0x0008,0x0020). 
	
	mask      = 0x0028    # (1<<5 | 1<<3) 
	direction = 0x0008    # (1<<3) 
	level     = 0x0008    # (1<<3)
	bias      = 0x0020    # (1<<5) 
	
	

==============================================================================
NAME
	PSKEY_TRANSMIT_OFFSET_CLASS1 (0x03b4)

SUMMARY
	Transmit offset / 62.5 kHz for class 1 radios

TYPE
	int16

DEFAULT VALUE
	(-16)

DESCRIPTION
	Offset used for transmit, in units of 62.5 kHz, used when the radio
	is transmitting at a class 1 power with an external amplifier.
	This is required for entries in PSKEY_LC_ENHANCED_POWER_TABLE where
	the class 1 bit is set.
	
	Otherwise, the behaviour of this PS key is similiar to
	PSKEY_TRANSMIT_OFFSET.

==============================================================================
NAME
	PSKEY_TX_AVOID_PA_CLASS1_PIO (0x03b3)

SUMMARY
	PIO line asserted in class1 operation to avoid PA

TYPE
	uint16

DEFAULT VALUE
	(0xFFFF)

DESCRIPTION
	This PS key is only used for class 1 operation, i.e. when
	PSKEY_LC_ENHANCED_POWER_TABLE has entries with the class 1 bit set.
	If no entry in the table is set for class 1 operation, the value of
	this PS key is ignored.
	
	The value gives a PIO line which will be asserted during a
	transmission when the external power amplifier is not in use.  The
	value 1 is not allowed, as it is always used to activate the external
	PA.  Any other PIO line may be used.  If the value is 0, it indicates
	that PIO 0 will be used for this purpose, in addition to any use
	specified by PSKEY_TXRX_PIO_CONTROL during receive operations.
	
	A value greater than 15 indicates that no PIO will be asserted when
	the external PA is not in use.
	
	Note that the PIO line is asserted by software, so does not have the
	accuracy of the hardware used for the external PA.  However, the
	PIO is guaranteed to be asserted at least while the radio is in use
	for transmission.

==============================================================================
NAME
	PSKEY_UART_CONFIG2 (0x03b1)

SUMMARY
	The UART Sampling point

TYPE
	uint8

DEFAULT VALUE
	(2)

DESCRIPTION
	Configuration for UART rx sampling point in case there are any
	problems with fast (just below 4Mbps) UARTs.
	
	Currently 2 bits are defined.  Bit 0 is prefetch, bit 1 is RX offset.
	The default value is 2, ie RX offset enabled, prefetch disabled.
	

==============================================================================
NAME
	PSKEY_CLASS1_IQ_LVL (0x03b0)

SUMMARY
	IQ demand level for class 1 power level

TYPE
	uint16

DEFAULT VALUE
	(0x1818)

DESCRIPTION
	The value of the IQ demand level to be used when transmitting packets
	(both header and payload) at Enhanced Data Rate.  Both bytes should be
	set.  For CSR use only.

==============================================================================
NAME
	PSKEY_CLASS1_TX_CONFIG2 (0x03af)

SUMMARY
	TX filter configuration used for class 1 tx power

TYPE
	uint16

DEFAULT VALUE
	(0x8807)

DESCRIPTION
	The value of the transmit configuration in packets sent at class 1
	powers.  For CSR use only.

==============================================================================
NAME
	PSKEY_ANALOGUE_ATTENUATOR (0x03a7)

SUMMARY
	TX analogue attenuator setting

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	Controls the use of an analogue attenuator after the transmit
	DAC.  Only to be set on advice from CSR.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_PIO_WAKEUP_STATE (0x039f)

SUMMARY
	PIO deep sleep wake up state 

TYPE
	uint16

DEFAULT VALUE
	(0xFFFF)

DESCRIPTION
	Controls the state for each PIO line (0 to 15) that will wake 
	the chip from deep sleep. Each bit corresponds to a PIO line.
	Setting a bit high will result in the chip waking when that 
	line goes high, setting the bit low will cause the chip to 
	wake when the line goes low. The PIO lines must already have 
	been configured to wake the chip using either 
	PSKEY_DEEP_SLEEP_PIO_WAKE or the VM. 

==============================================================================
NAME
	PSKEY_MR_TX_IF_ATTEN_OFF_TEMP (0x0394)

SUMMARY
	TX IF atten off temperature when using EDR.

TYPE
	int16

DEFAULT VALUE
	(55)

DESCRIPTION
	This PSKEY controls the temperature above which the TX IF attentuator
	is turned off when using EDR. The units of this key are degrees
	Celsius. The value should correspond to the discontinuity in
	the temperature values in PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_PAYLOAD
	and PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_HEADER.
	
	The basic rate setting is controlled by PSKEY_ANALOGUE_ATTENUATOR. 
	
	(The abbreviation MR for Medium Rate is used consistently in place of
	EDR for Enhanced Data Rate throughout the PS keys as many were
	introduced before the abbreviation EDR came into use.)

==============================================================================
NAME
	PSKEY_LO_DIV_LATCH_BYPASS (0x0393)

SUMMARY
	Bypass latch for LO dividers

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key is for CSR's internal use for diagnosing radio issues. This
	key has no effect on some versions of firmware.
	
	DO NOT CHANGE THE VALUE OF THIS KEY UNLESS INSTRUCTED TO DO SO BY CSR.
	
	This key selects between two ways of controlling a critical radio
	component. CSR will make a determination as to the best setting and
	make this the default. All testing and qualification will be run at
	this default setting.
	
	Changing the value of this key will invalidate qualification and all
	testing results. A thorough series of tests will need to be run to
	ensure the new value is correct. A normal test suite is unlikely to
	pick up problems. Qualification tests are unlikely to pick up
	problems. Tests will need to be run on a variety of modules, with
	chips from a variety of batches, at a range of environmental
	conditions (including a range of temperatures and temperature
	gradients).

==============================================================================
NAME
	PSKEY_LO_VCO_STANDBY (0x0392)

SUMMARY
	Use standby mode for the LO VCO

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This key is for CSR's internal use for diagnosing radio issues. This
	key has no effect on some versions of firmware.
	
	DO NOT CHANGE THE VALUE OF THIS KEY UNLESS INSTRUCTED TO DO SO BY CSR.
	
	This key controls whether critical radio components are kept in
	standby mode between packets or allowed to turn off. Keeping the
	components in standby is the safer option. The difference in power
	consumption between the two modes is less than 1% when the radio is
	active and makes no difference when there is no radio activity. All
	testing and qualification will be run at the default setting.
	
	Changing the value of this key will invalidate qualification and all
	testing results. A thorough series of tests will need to be run to
	ensure the new value is correct. A normal test suite is unlikely to
	pick up problems. Qualification tests are unlikely to pick up
	problems. Tests will need to be run on a variety of modules, with
	chips from a variety of batches, at a range of environmental
	conditions (including a range of temperatures and temperature
	gradients).
	
	This key has no effect on the operation of the radio in radiotest test
	modes. It only affects operation during real links. This makes testing
	tricky.

==============================================================================
NAME
	PSKEY_SLOW_CLOCK_FILTER_SHIFT (0x0391)

SUMMARY
	Slow clock sampling filter constant

TYPE
	uint16

DEFAULT VALUE
	(5)

DESCRIPTION
	The filter constant applied to instantaneous values of the slow clock
	period sampled in sniff is 1/2^PSKEY_SLOW_CLOCK_FILTER_SHIFT. When
	the difference between the last period from the slow clock
	calibration and the filtered value exceeds the calibrated value
	divided by PSKEY_SLOW_CLOCK_FILTER_DIVIDER, a recalibration of the
	slow clock is performed.

==============================================================================
NAME
	PSKEY_SLOW_CLOCK_FILTER_DIVIDER (0x0390)

SUMMARY
	Slow clock filter fractional threshold

TYPE
	uint16

DEFAULT VALUE
	(3333)

DESCRIPTION
	The reciprocal of the fraction of the currently calibrated slow clock
	period by which the filtered value must differ from the calibrated
	period in order to cause a recalibration. The value default value
	corresponds to 300 ppm.
	
	See also the description of PSKEY_SLOW_CLOCK_FILTER_SHIFT.

==============================================================================
NAME
	PSKEY_USB_ATTRIBUTES_POWER (0x03f2)

SUMMARY
	USB self powered

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	This bit is set if the device is self-powered. This bit is described
	in table 9-8 in USB spec v1.1 - it corresponds to D6 in Offset 7. 

==============================================================================
NAME
	PSKEY_USB_ATTRIBUTES_WAKEUP (0x03f3)

SUMMARY
	USB responds to wake-up

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	This bit is set if the device can respond to a remote wake-up command.
	This bit is described in table 9-8 in USB spec v1.1 - it corresponds
	to D5 in Offset 7.

==============================================================================
NAME
	PSKEY_DFU_ATTRIBUTES_MANIFESTATION_TOLERANT (0x03f4)

SUMMARY
	DFU manifestation tolerant

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	If this bit is set the device can talk via USB after a firmware
	upgrade, or it can deal with a second firmware download.
	
	If this bit is clear the device can only be reset after a firmware
	upgrade.

==============================================================================
NAME
	PSKEY_DFU_ATTRIBUTES_CAN_UPLOAD (0x03f5)

SUMMARY
	DFU can upload

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	If this bit is set, then the device supports firmware upload to
	host.

==============================================================================
NAME
	PSKEY_DFU_ATTRIBUTES_CAN_DOWNLOAD (0x03f6)

SUMMARY
	DFU can download

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	If this bit is set, then the device supports firmware download from
	host.

==============================================================================
NAME
	PSKEY_UART_CONFIG_STOP_BITS (0x03fc)

SUMMARY
	UART: stop bits

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configures the number of UART stop bits.
	
	This field should be set to 0 (1 stop bit) for both BCSP and H4.

==============================================================================
NAME
	PSKEY_UART_CONFIG_PARITY_BIT (0x03fd)

SUMMARY
	UART: parity bit

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure the UART parity.
	
	This field should be set to 3 (even parity) for BCSP and 0 (no parity)
	for H4.

==============================================================================
NAME
	PSKEY_UART_CONFIG_FLOW_CTRL_EN (0x03fe)

SUMMARY
	UART: hardware flow control

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure UART hardware flow control.
	
	This field should be set to 0 (no hardware flow control) for BCSP and
	1 (hardware flow control) for H4. 

==============================================================================
NAME
	PSKEY_UART_CONFIG_RTS_AUTO_EN (0x03ff)

SUMMARY
	UART: RTS auto-enabled

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	When UART data flows into the chip it passes from the wire, through a
	very small fixed buffer, then into one of the chip's large (virtual
	memory/MMU) buffers. If this PS key is enabled then the chip deasserts
	RTS to the host if the small fixed buffer fills. This gives time for
	the MMU write logic to organise itself when setting up to write to an
	MMU buffer.
	
	In practice this field should be set to 0 because the small fixed
	buffer should never overflow.

==============================================================================
NAME
	PSKEY_UART_CONFIG_RTS (0x0400)

SUMMARY
	UART: RTS asserted

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure the UART RTS output.
	
	This field should be set to 0 for BCSP and 1 (RTS asserted) for H4.

==============================================================================
NAME
	PSKEY_UART_CONFIG_TX_ZERO_EN (0x0401)

SUMMARY
	UART: TX zero enable

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	The hardware bit this corresponds to is toggled by software to
	generate a serial break condition.
	
	This field should be set to 0 because the device should not generate
	a serial break condition while booting. 

==============================================================================
NAME
	PSKEY_UART_CONFIG_NON_BCSP_EN (0x0402)

SUMMARY
	UART: enable BCSP-specific hardware

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	The BlueCore contains hardware that performs much of the processing 
	for encoding and decoding of BCSP packets.  By default this is 
	enabled.  For the condition where this is not required (e.g. for H4), 
	then the BCSP hardware must be disabled.
	
	This PS key should be set to 0 (Enable) for BCSP and 1 (Disable) for
	H4.
	
	Switching between BCSP and H4 requires more than just setting this
	bit; see PSKEY_UART_CONFIG and PSKEY_HOST_INTERFACE.

==============================================================================
NAME
	PSKEY_UART_CONFIG_RX_RATE_DELAY (0x0403)

SUMMARY
	UART: RX rate delay

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The hardware bits this corresponds to are toggled by software to
	pacify the UART when the clock rate is changed.
	
	This field should be set to 0.

==============================================================================
NAME
	PSKEY_UART_SEQ_TIMEOUT (0x0405)

SUMMARY
	Acknowledgement timeout for BCSP

TYPE
	uint16

DEFAULT VALUE
	(250)

DESCRIPTION
	When the firmware sends a reliable messsage over BCSP it starts a 
	timer. The timer's period is the value of PSKEY_UART_SEQ_TIMEOUT in 
	milliseconds.  If the host acknowledges reception of the message 
	before the timer fires then the timer is cancelled.  If the timer 
	fires then the message is sent again and another timer is started, 
	etc.
	
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P for
	additional information.

==============================================================================
NAME
	PSKEY_UART_SEQ_RETRIES (0x0406)

SUMMARY
	Maximum number of times to send reliable BCSP message

TYPE
	uint16

DEFAULT VALUE
	(20)

DESCRIPTION
	The description of PSKEY_UART_SEQ_TIMEOUT outlines BCSP's mechanism to
	retransmit reliable messages to the host until acknowledged.
	
	The value of PSKEY_UART_SEQ_RETRIES sets a limit on the number of 
	times the send/timeout cycle will be attempted.  If this limit is 
	reached, the firmware will panic (and normally reboot).
	
	Note that this PSKEY is not used in builds from 18.x.  This 
	functionality has been transferred to PSKEY_UART_TX_MAX_ATTEMPTS.
	
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P for
	additional information.

==============================================================================
NAME
	PSKEY_UART_SEQ_WINSIZE (0x0407)

SUMMARY
	Transmit window size for BCSP

TYPE
	uint16

DEFAULT VALUE
	(4)

DESCRIPTION
	This is the size of the sliding window used by BCSP.
	
	When the baseband sends a reliable BCSP message to the host, the
	host is rquired to acknowledge its reception.  If it is not 
	acknowledged within a certain period the message is sent again.
	
	The baseband will send several packets to the host before waiting for 
	the first of the packets to be acknowledged.  The maximum number of 
	sent packets that can be unacknowledged at any time is set by
	PSKEY_UART_SEQ_WINSIZE.  Once a packet is acknowledged, the next 
	packet will be sent.  Under normal circumstances, the number of 
	packets in transit to the peer is the value of PSKEY_UART_SEQ_WINSIZE.
	
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P for
	additional information.

==============================================================================
NAME
	PSKEY_UART_USE_CRC_ON_TX (0x0408)

SUMMARY
	Use BCSP CRCs

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Payloads in BCSP may have CRC values.  PSKEY_UART_USE_CRC_ON_TX
	indicates that CRCs will be used for BCSP TX packets.
	
	This PSKEY should be set to 0 (FALSE) to disable CRC, and 1 (TRUE) to
	enable CRC.
	
	Type bool is fundamentally a uint16 with values of 0 and 1 mapping to
	FALSE and TRUE.
	
	Note that this PSKEY is not used in builds from 18.x.  This 
	functionality has been transferred to PSKEY_UART_TX_CRCS.
	
	See "BlueCore Serial Protocol (BCSP)" document ID bcore-sp-012P for
	additional information.

==============================================================================
NAME
	PSKEY_UART_HOST_INITIAL_STATE (0x0409)

SUMMARY
	UART: initial host state

TYPE
	hwakeup_state

DEFAULT VALUE
	(HOST_NEVER_SLEEPS)

DESCRIPTION
	Selects the initial wake and sleep settings and state for the host.

==============================================================================
NAME
	PSKEY_UART_HOST_ATTENTION_SPAN (0x040a)

SUMMARY
	UART: host attention span

TYPE
	uint16

DEFAULT VALUE
	(30)

DESCRIPTION
	Seconds before host falls asleep.

==============================================================================
NAME
	PSKEY_UART_HOST_WAKEUP_TIME (0x040b)

SUMMARY
	UART: host wakeup time

TYPE
	uint16

DEFAULT VALUE
	(100)

DESCRIPTION
	Milliseconds wakeup pulse needed.

==============================================================================
NAME
	PSKEY_UART_HOST_WAKEUP_WAIT (0x040c)

SUMMARY
	UART: host wakeup wait

TYPE
	uint16

DEFAULT VALUE
	(10)

DESCRIPTION
	Millisecond pause before comms.

==============================================================================
NAME
	PSKEY_BCSP_LM_MODE (0x0410)

SUMMARY
	BCSP link establishment mode

TYPE
	uint16

DEFAULT VALUE
	1       /* 1 to enable link sync. */

DESCRIPTION
	Configure the BCSP link establishment protocol (BCSP-LE).  This is
	only used if BCSP is used over the chip's UART.
	
	                0 - disable link establishment.
	                1 - enable link establishment.
	            2 - enable passive-start link establishment.  This option
	                causes the link establishment engine on the device to
	                emit no messages until it receives traffic from the
	                host.
	
	See "BCSP Link Establishment Protocol" document ID bcore-sp-008P for
	additional information.

==============================================================================
NAME
	PSKEY_BCSP_LM_SYNC_RETRIES (0x0411)

SUMMARY
	BCSP link establishment sync retries

TYPE
	uint16

DEFAULT VALUE
	0       /* Continuous sync packets. */

DESCRIPTION
	Configure the BCSP link establishment protocol.  This is only used
	if BCSP is used over the chip's UART.
	
	      uint16  sync_retries   Support for this argument has been
	                             removed.
	
	                             This used to set the number of sync
	                             packets emitted before the BCSP
	                             link establishment engine gave up
	                             and marked the link as dead.  A
	                             value of zero meant "don't stop."
	                             The BCSP link establishment engine
	                             now always behaves as if the value
	                             is zero.

==============================================================================
NAME
	PSKEY_BCSP_LM_TSHY (0x0412)

SUMMARY
	BCSP link establishment Tshy

TYPE
	uint16

DEFAULT VALUE
	250     /* Tshy is 250ms. */

DESCRIPTION
	Configure the BCSP link establishment protocol.  This is only used
	if BCSP is used over the chip's UART.
	
	      uint16  tshy           The Tshy value in milliseconds.
	

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_STOP_BITS (0x0417)

SUMMARY
	DFU mode UART: stop bits

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure the number of UART stop bits to use within the boot loader
	(DFU mode).
	
	This field should be set to 0 (1 stop bit).

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_PARITY_BIT (0x0418)

SUMMARY
	DFU mode UART: parity bit

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure the UART parity to use within the boot loader (DFU mode).
	
	This field should be set to 3 (even parity).

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_FLOW_CTRL_EN (0x0419)

SUMMARY
	DFU mode UART: hardware flow control

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure UART hardware flow control to use within the boot loader
	(DFU mode).
	
	This field should be set to 0 (no hardware flow control).

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_RTS_AUTO_EN (0x041a)

SUMMARY
	DFU mode UART: RTS auto-enabled

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	When UART data flows into the chip it passes from the wire, through a
	very small fixed buffer, then into one of the chip's large (virtual
	memory/mmu) buffers.  If this pskey is enabled then the chip
	deasserts RTS to the host if the small fixed buffer (almost?) fills.
	This gives time for the mmu write logic to organise itself when
	setting up to write to an mmu buffer.
	
	In practice this field should be set to 0, since the small fixed
	buffer should never overflow.

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_RTS (0x041b)

SUMMARY
	DFU mode UART: RTS asserted

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	Configure the UART RTS output within the boot loader (DFU mode).
	
	This field should be set to 0.

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_TX_ZERO_EN (0x041c)

SUMMARY
	DFU mode UART: TX zero enable

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	The hardware bit this corresponds to is toggled by software
	to generate a serial break condition.
	
	This field should be set to 0.

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_NON_BCSP_EN (0x041d)

SUMMARY
	DFU mode UART: enable BCSP-specific hardware

TYPE
	bool

DEFAULT VALUE
	<none>

DESCRIPTION
	The BlueCore contains hardware that performs much of the processing 
	for encoding and decoding of BCSP packets.  This should always be 
	enabled because the boot loader (DFU mode) always uses BCSP for 
	UART transports.
	
	This pskey should be set to 0 (disable).

==============================================================================
NAME
	PSKEY_UART_DFU_CONFIG_RX_RATE_DELAY (0x041e)

SUMMARY
	DFU mode UART: RX rate delay

TYPE
	uint16

DEFAULT VALUE
	<none>

DESCRIPTION
	The hardware bits this corresponds to are toggled by software
	to pacify the UART when the clock rate is changed.
	
	This field should be set to 0.

==============================================================================
NAME
	PSKEY_AMUX_AIO0 (0x041f)

SUMMARY
	Multiplexer for AIO 0

TYPE
	ana_amux_sel

DEFAULT VALUE
	<none>

DESCRIPTION
	Analogue multiplexer setting for the AIO 0 line on BlueCore.
	
	Multiplexed with PIO 12 on all pre BC5 chips. On some later
	chips it may be multiplexed with PIO 20 instead. Consult 
	your data sheet for exact details. To use as a PIO line, 
	the AMUX must be set to `Select AIO0 as a PIO'.
	
	Not all settings are available on all chips.  
	
	Additionally on BC02-Ext, the crystal clock/2 may be routed
	by editing the PSkey with the value 007e 
	(using Entry -> Edit raw).
	
	On BC4-Headset and BC4-Audio Flash, set this PSkey
	to 'AMUX' and use PSKEY_AMUX_CLOCK to produce the desired clock.
	On BC5MM edit, this entry with the value 00be, then use
	PSKEY_AMUX_CLOCK to produce certain clocks.

==============================================================================
NAME
	PSKEY_AMUX_AIO1 (0x0420)

SUMMARY
	Multiplexer for AIO 1

TYPE
	ana_amux_sel

DEFAULT VALUE
	<none>

DESCRIPTION
	Analogue muliplexer setting for the AIO 1 line on BlueCore.
	
	Multiplexed with PIO 13 on all pre BC5 chips. On some later 
	chips it may be multiplexed with PIO 21 instead. Consult 
	your data sheet for exact details. To use as a PIO line, 
	the AMUX must be set to `Select AIO1 as a PIO'.
	
	The clock routing options are not available on BC3-MM.  On BC5 chips
	write the values 0xbe or 0xfe (using Entry -> Edit Raw) to route
	the crystal or crystal/2 clock on AIO1 respectively.

==============================================================================
NAME
	PSKEY_AMUX_AIO2 (0x0421)

SUMMARY
	Multiplexer for AIO 2

TYPE
	ana_amux_sel

DEFAULT VALUE
	<none>

DESCRIPTION
	Analogue muliplexer setting for the AIO 2 line on BlueCore.
	
	Multiplexed with PIO 14 where present. 
	To use as a PIO line, the AMUX must be set to `Select AIO2 as a PIO'.
	

==============================================================================
NAME
	PSKEY_AMUX_AIO3 (0x0422)

SUMMARY
	Multiplexer for AIO 3

TYPE
	ana_amux_sel

DEFAULT VALUE
	<none>

DESCRIPTION
	Analogue muliplexer setting for the AIO 3 line on BlueCore.
	
	Multiplexed with PIO 15 where present.
	To use as a PIO line, the AMUX must be set to `Select AIO3 as a PIO'.
	

==============================================================================
NAME
	PSKEY_LOCAL_NAME_SIMPLIFIED (0x0423)

SUMMARY
	Local Name (simplified)

TYPE
	local_name_complete

DEFAULT VALUE
	<none>

DESCRIPTION
	On firmware builds prior to 18, the local name is represented 
	in the Persistent Store by a collection of keys.  This key
	provides an easy way to manipulate those keys.
	
	See the description at key PSKEY_LOCAL_NAME0 for more
	information.

==============================================================================
NAME
	PSKEY_HIDIO_AGILENT (0x044d)

SUMMARY
	HIDIO Agilent sensor PIO assignments

TYPE
	uint8[]

DEFAULT VALUE
	{ 0x09, 0x0A, 0x0B }

DESCRIPTION
	Assignment of PIO lines to access an Agilent 2030 sensor.
	
	Byte 1 : SDIO line
	Byte 2 : SCLK line
	Byte 3 : PD line
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_BUTTON (0x044e)

SUMMARY
	HIDIO mouse button PIO assignments

TYPE
	uint8[]

DEFAULT VALUE
	{ 0x00, 0x01, 0x02, 0x07, 0x08 }

DESCRIPTION
	Assignment of PIO lines for mouse buttons. A button can be made
	active low by zeroing the bit that corresponds to the button's PIO
	in PSKEY_PIO_WAKEUP_STATE.
	
	Byte 1 : Button 1
	Byte 2 : Button 2
	Byte 3 : Button 3
	Byte 4 : Button 4
	Byte 5 : Button 5
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_WHEEL (0x044f)

SUMMARY
	HIDIO mouse wheel PIO assignments

TYPE
	uint8[]

DEFAULT VALUE
	{ 0x03, 0x04, 0x05 }

DESCRIPTION
	Assignment of PIO lines for mouse wheel control. A 'Quad' input can
	be made active low by zeroing the bit that corresponds to the input's
	PIO in PSKEY_PIO_WAKEUP_STATE.
	
	Byte 1 : Wheel Quad A
	Byte 2 : Wheel Quad B
	Byte 3 : Wheel Enable
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_BUFFER_SIZE (0x0450)

SUMMARY
	HIDIO report buffer size

TYPE
	uint16

DEFAULT VALUE
	800

DESCRIPTION
	Size of the HIDIO report buffer in bytes.
	
	This is the buffer used to hold reports generated when the HID device
	is not connected to the Host i.e. during reconnection.
	
	The actual buffer allocated may be larger than that requested due to
	the power of 2 granularity of the buffer sub-system.  Minimum size is
	127.
	
	A keyboard will typically want to remember every key press, so a
	buffer size of around 800 bytes is recommended for this purpose.
	
	When a mouse reconnects, you may not want to see a large amount of
	delayed pointer movement, so a buffer size in the order of 127 seems
	reasonable.

==============================================================================
NAME
	PSKEY_HIDIO_UART (0x0451)

SUMMARY
	HIDIO UART Sync PIO assignment

TYPE
	uint16

DEFAULT VALUE
	0x0006

DESCRIPTION
	For the HIDIO module to use the UART 'sensor' to communicate with an
	external MCU, it uses a Synchronisation PIO.  This key defines that PIO.
	
	See 'hidstream.html' in Bluelab for more information.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_AGILENT_SP2 (0x0452)

SUMMARY
	HIDIO Agilent 2nd gen sensor PIO assignments

TYPE
	uint8[]

DEFAULT VALUE
	{0x00, 0x01, 0x02, 0x03, 0x06, 0x07, 0xFF}

DESCRIPTION
	Assignment of PIO lines to access a second generation Avago (was
	Agilent) sensor (30x0/50x0/60x0/70x0).
	
	Note that not all pins are present on all sensors. Please see the
	relevant Avago datasheet for more information.
	
	Byte 1 : SCLK line
	Byte 2 : MOSI line
	Byte 3 : MISO line
	Byte 4 : NCS line
	Byte 5 : MOT line   (Set to 16 if MOT not connected)
	Byte 6 : STDWN line (Set to 16 if STDWN not connected)
	Byte 7 : NRST line  (Set to 16 if NRST not connected) 
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_AVAGO_LASER_CONFIG (0x0453)

SUMMARY
	HIDIO Avago laser sensor config

TYPE
	uint8[]

DEFAULT VALUE
	{0x00, 0x00}

DESCRIPTION
	Two words should be specified that get written to the LASER_CTRL0
	and LSRPWR_CFG0 registers respectively. Only valid when Bluecore is
	interfaced directly to an Avago (was Agilent) laser sensor (currently
	60x0 and 70x0 series) using the AGILENT_SP2 serial interface.
	
	The firmware takes care of writing the complementary values to the
	LASER_CTRL1 and LSRPWR_CFG1 registers, respectively.
	
	Defaults to a laser power of 0 to safely set the laser to its lowest
	power.
	
	Laser sensors must be calibrated to ensure they are within class 1
	laser power requirements. See the relevant Avago datasheet for more
	information about the laser sensor registers and calibration of the
	laser.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_CONFIG_REGS (0x0454)

SUMMARY
	HIDIO PixArt sensor register configuration

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	A set of PixArt sensor register (address, value) pairs to be written
	to the sensor after it is reset.
	
	Arranged as uint16s, each having an 8 bit address in the LSbyte and
	the corresponding 8 bit value to be written in the MSbyte.
	
	The default values should be optimal in most cases. Changes should
	only be made under the guidance of CSR or PixArt.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART (0x0455)

SUMMARY
	HIDIO PixArt sensor interface PIO assignments

TYPE
	uint8[]

DEFAULT VALUE
	{0x00, 0x01, 0x02, 0x03}

DESCRIPTION
	Assignment of PIO lines to access a PixArt mouse sensor.
	
	Note that not all pins are present on all sensors. Please see the
	relevant PixArt datasheet for more information.
	
	Byte 1 : SDIO line
	Byte 2 : SCLK line
	Byte 3 : PD line     (Set to 16 if PD not connected)
	Byte 4 : SWKINT line (Set to 16 if SWKINT not connected) 
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_PID (0x0456)

SUMMARY
	HIDIO PixArt Product ID configuration

TYPE
	uint8[]

DEFAULT VALUE
	{0x30, 0x00}

DESCRIPTION
	Product ID configuration for the PixArt sensor being used. Allows
	the sensor's Product ID and Product ID register address to be set.
	
	Word 1 : Product ID (bits [11:4] only)
	Word 2 : Product ID lower register address
	
	Defaults to appropriate values for the PAN3201 sensor.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_MOTION (0x0457)

SUMMARY
	HIDIO PixArt MOTION register configuration

TYPE
	uint8[]

DEFAULT VALUE
	{0x02, 0x80, 0x00}

DESCRIPTION
	Motion register configuration for the PixArt sensor being used. Allows
	the address of the register containing the MOTION bit, the bit mask
	of the MOTION bit within the register and whether the MOTION bit is
	active low or not to be set.
	
	Byte 1 : Address of register containing MOTION bit
	Byte 2 : Bit mask of MOTION bit within the register
	Byte 3 : Non-zero for active low MOTION bit
	
	Defaults to appropriate values for the PAN3201 sensor.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_DELTAS (0x0458)

SUMMARY
	HIDIO PixArt delta x and y register configuration

TYPE
	uint8[]

DEFAULT VALUE
	{0x03, 0x04}

DESCRIPTION
	Delta X and Y register addresses for the PixArt sensor being used.
	
	Byte 1 : Address of register Delta_X
	Byte 2 : Address of register Delta_Y
	
	Defaults to appropriate values for the PAN3201 sensor.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_PD (0x0459)

SUMMARY
	HIDIO PixArt power down register configuration

TYPE
	uint8[]

DEFAULT VALUE
	{0x06, 0x08, 0x00}

DESCRIPTION
	Power down register configuration for the PixArt sensor being used.
	Allows the address of the register containing the PD bit, the bit mask
	of the PD bit within the register and whether the PD bit is active low
	or not to be set.
	
	Byte 1 : Address of register containing PD bit
	Byte 2 : Bit mask of PD bit within the register
	Byte 3 : Non-zero for active low PD bit
	
	Defaults to appropriate values for the PAN3201 sensor.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_HIDIO_PIXART_CONFIG (0x045a)

SUMMARY
	HIDIO PixArt sensor additional configuration

TYPE
	uint16[]

DEFAULT VALUE
	{0x0000, 0x0001, 0x0003}

DESCRIPTION
	Additional configuration options for the PixArt sensor being used.
	Boolean options are represented as one word per option. A zero
	word specifies the option is disabled, non-zero for enabled.
	
	Word 1 : (Boolean) Non-zero to enable auto (i.e. sensor controlled)
	power saving. Only optional when not using the SWKINT interrupt pin.
	If disabled (default) BlueCore will control the power saving modes of
	the sensor when not using the SWKINT interrupt pin. Auto power saving
	is always enabled when the SWKINT pin is used.
	
	Word 2 : (Boolean) Non-zero to enable support for very narrow SWKINT
	pulses. This is required for BlueCore to reliably detect the interrupt
	from a PAN3201 sensor. Increases deep sleep current, so should only be
	enabled if required.
	
	Word 3 : The minimum time (in ms) after the sensor is woken from power
	down that sensor registers can be accessed / valid motion data will be
	available. Valid values are 1 to 15 inclusive.
	
	Defaults to appropriate values for the PAN3201 sensor.
	
	Protected from DFU.

==============================================================================
NAME
	PSKEY_EXTENDED_STUB (0x2001)

SUMMARY
	Extended stub

TYPE
	uint16

DEFAULT VALUE
	(0)

DESCRIPTION
	A key that can be harmlessly read or written.

==============================================================================
NAME
	PSKEY_CODEC_MIN_CPU_CLOCK (0x21df)

SUMMARY
	Minimum CPU clock speed with audio codec running

TYPE
	uint16

DEFAULT VALUE
	(CPU_SLOW_4M)

DESCRIPTION
	The firmware tries to save power by reducing the clock rate when
	the processor is idle.  The clock drives the CPU, PCM, UART, USB,
	baseband hardware, etc.  This is normally called "shallow sleep."
	
	Some of the chip's hardware sets a lower limit on how slowly the
	clock can be run. On chips with an internal audio codec, this key
	controls what limit codec activity places on the clock speed.
	
	The default value should always be safe. It may be possible to
	reduce this value for reduced power consumption, but the codec
	function may not operate correctly if run too slow. For more
	advice, contact CSR.
	
	The pskey's acceptable values are:
	        0       CPU_FAST          (full rate)
	        1       CPU_SLOW_4M       (4 MHz)
	        2       CPU_SLOW_2M       (2 MHz)
	        3       CPU_SLOW_1p024M   (1.024 MHz)
	
	See also PSKEY_PCM_MIN_CPU_CLOCK.

==============================================================================
NAME
	PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS (0x21d8)

SUMMARY
	Slow clock recal temperature hysteresis

TYPE
	uint16

DEFAULT VALUE
	(7)

DESCRIPTION
	The internal low power oscillator (known as the "slow clock") is
	recalibrated against the accurate clock when the temperature changes.
	If the temperature change since the last calibration exceeds the value
	of this key, another calibration is performed.
	
	The units of this key are degrees Celsius.
	
	Recalibration may be made more sensitive to temperature
	if the value of PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS_MIN is lower than
	the value of this key.  If a large change in calibration (greater
	than 200 ppm) is detected, the required temperature change is reduced
	by steps of 1 degree Celsius until PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS_MIN
	is reached.  If a small change in calibration (less than 100 ppm) is
	detected, the required temperature change is increased in steps of 1
	degree Celsius until PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS is reached.

==============================================================================
NAME
	PSKEY_MIN_CPU_CLOCK (0x21d5)

SUMMARY
	Minimum CPU clock speed

TYPE
	uint16

DEFAULT VALUE
	(CPU_SLOW_ANY)

DESCRIPTION
	The firmware tries to save power by reducing the clock rate when the
	processor is idle ("shallow sleep"). This key controls the minimum
	clock rate that is permitted during shallow sleep.
	
	This key should only be changed on advice from CSR. Incorrect
	settings can lead to unnecessarily increased power consumption.

==============================================================================
NAME
	PSKEY_SLOW_CLOCK_SNIFF_SAMPLING (0x21d3)

SUMMARY
	Enable slow clock sampling in sniff

TYPE
	bool

DEFAULT VALUE
	(TRUE)

DESCRIPTION
	This key controls whether extra calibration of the internal low power
	oscillator is to be performed. This mechanism can potentially improve
	timing accuracy in low power modes.
	
	This key should only be changed on advice from CSR.

==============================================================================
NAME
	PSKEY_PANIC_ON_FAULT (0x21ce)

SUMMARY
	Enable Panic on fault?

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	This pskey allows panic on fault to be enabled, faults then generate a
	panic rather than a fault report.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_HQ_SCRAPING_ENABLE (0x21cd)

SUMMARY
	Enable HQ scraping over spi

TYPE
	bool

DEFAULT VALUE
	(FALSE)

DESCRIPTION
	When this pskey is set to TRUE then hq scraping is enabled. This 
	allows BCCMD HQ_SCRAPING to be called to retrieve hq packets over spi,
	when there is no Host transport.
	
	(Type bool is fundamentally a uint16 with values 0 and 1 mapping to
	FALSE and TRUE.)

==============================================================================
NAME
	PSKEY_TRIM_TIMING (0x21c0)

SUMMARY
	Configure timing of internal trims

TYPE
	uint16[]

DEFAULT VALUE
	{ 50u | (60u << 8u), 
                          11u | (16u << 8u)  }

DESCRIPTION
	This key controls the precise timing of various internal calibrations
	and trims.
	
	This key should only be changed on advice from CSR.

==============================================================================
NAME
	PSKEY_PIO_DEEP_SLEEP_EITHER_LEVEL (0x21bd)

SUMMARY
	PIO deep sleep on either level

TYPE
	uint32

DEFAULT VALUE
	(0)

DESCRIPTION
	Allows the chip to deep sleep irrespective of the level of the PIO 
	lines. Traditionally BlueCore chips will stay out of deep sleep when 
	any PIO line configured as an input is high. This behaviour can be 
	modified by setting PSKEY_PIO_WAKEUP_STATE so that the chip will 
	stay out of deep sleep when lines are low, but enter deep sleep when 
	the lines are high. 
	
	Each bit in this PSKEY corresponds to a PIO line from 0 to 31. 
	Note that 31 PIOs may not be present on all BlueCores.
	Setting a bit will result that PIO's level having no effect on 
	the chip's deep sleep behaviour; the chip will go into deep
	sleep if the PIO is high or low. The BlueCore will still wakeup 
	to process changes in PIO levels.
	
	The PIO lines must already have been configured to wake the chip 
	using either PSKEY_DEEP_SLEEP_PIO_WAKE or the VM. 
	

==============================================================================
NAME
	PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS_MIN (0x21b8)

SUMMARY
	Minimum slow clock recal temperature hysteresis

TYPE
	uint16

DEFAULT VALUE
	(7)

DESCRIPTION
	This key works in consort with PSKEY_SLOW_CLOCK_TEMP_HYSTERESIS.
	See the description of that key for the full description.
	
	The units of this key are degrees Celsius.

==============================================================================
NAME
	PSKEY_CONFIG_LUT_BUILD (0x2192)

SUMMARY
	Configuration of the CDAC LUT build

TYPE
	uint16[]

DEFAULT VALUE
	{ 100, 2 }

DESCRIPTION
	The value of this key should only be adjusted upon instruction by CSR.

==============================================================================
NAME
	PSKEY_I2C_SLOWDOWN (0x216e)

SUMMARY
	I2C slowdown factor times 10

TYPE
	uint16

DEFAULT VALUE
	10

DESCRIPTION
	Slow down the I2C by a factor bearing some relation to
	value / 10, though at higher speeds this will be very
	approximate. Values below 10 speed up the I2C and are unsafe.
	Values above 10 slow down I2C.
	
	Only has any effect if I2C_CONFIG is set to 0 (100 kHz, slow mode).

==============================================================================
NAME
	PSKEY_PMALLOC_BASE (0x2162)

SUMMARY
	Base pmalloc sizes array

TYPE
	uint16[]

DEFAULT VALUE
	
DEFAULT_POOLS_BASE

DESCRIPTION
	The pmalloc pool memory manager is used throughout the firmware and by
	VM applications. It is described briefly here, and in more detail in
	the application note CS-128085-AN "Configuring the BlueCore memory
	allocator".
	
	The way in which its raw RAM block is fragmented is
	specified by PSKEYS:
	 * PSKEY_PMALLOC_BASE
	 * PSKEY_PMALLOC_PER_ACL
	 * PSKEY_PMALLOC_PER_SCO
	 * PSKEY_PMALLOC_APP (when the firmware supports VM applications)
	 * PSKEY_PMALLOC_EXTRA
	
	Each of these keys is an array of pairs of uint16s: {uint16 el_size,
	uint16 n_elements}.  Each pair describes a pool containing n_elements
	each of size el_size (in 16-bit words).
	
	In the case of PSKEY_PMALLOC_PER_ACL, the key specifies the pools used
	by a single ACL link. The n_elements value for each pool in this key
	is multiplied by PSKEY_MAX_ACLS when carving up the raw RAM block.
	Similarly, the PSKEY_PMALLOC_PER_SCO key is multiplied by
	PSKEY_MAX_SCOS.
	
	PSKEY_PMALLOC_BASE, PSKEY_PMALLOC_PER_ACL, PSKEY_PMALLOC_PER_SCO and
	PSKEY_PMALLOC_EXTRA are calculated at firmware build time, and should
	not be modified except on specific advice from CSR.
	
	PSKEY_PMALLOC_APP has no default value. Customers may add a value
	which uses some or all of the storage specified in
	PSKEY_PMALLOC_EXTRA, but usually in a different configuration
	(typically to produce a few, large pools). Similarly, by reducing
	PSKEY_MAX_ACLS or PSKEY_MAX_SCOS, the storage used by an instance of
	PSKEY_PMALLOC_PER_ACL or PSKEY_PMALLOC_PER_SCO may be added to
	PSKEY_PMALLOC_APP. Hence, it is intended that users will alter
	PSKEY_PMALLOC_APP and possibly PSKEY_MAX_ACLS and PSKEY_MAX_SCOS if
	they require larger pools for their VM applications.
	
	The application note CS-128085-AN "Configuring the BlueCore memory
	allocator" describes the process of setting PSKEY_PMALLOC_APP in more
	detail. Customers should refer to this app note before altering the
	PSKEY_PMALLOC_APP key.
	
	Note that the pools specified by a given PSKEY are not reserved for
	a particular use by the firmware: they join a common set of pools
	available from the allocator. Hence it is possible for a pool
	specified by PSKEY_PMALLOC_APP to be taken by the firmware itself if
	no other pools are available.

==============================================================================
NAME
	PSKEY_PMALLOC_PER_ACL (0x2161)

SUMMARY
	Per ACL pmalloc sizes array

TYPE
	uint16[]

DEFAULT VALUE
	
DEFAULT_POOLS_PER_ACL

DESCRIPTION
	This key specifies the memory pools used by a single ACL link. The
	format of the key is the same as that of PSKEY_PMALLOC_BASE.
	
	This key should not be altered except on specific advice from CSR.
	
	Reducing PSKEY_MAX_ACLS allows the memory claimed by an ACL link to
	be put to other uses (for example, use by VM applications). See the
	description of PSKEY_PMALLOC_BASE for more details.

==============================================================================
NAME
	PSKEY_PMALLOC_PER_SCO (0x2160)

SUMMARY
	Per SCO pmalloc sizes array

TYPE
	uint16[]

DEFAULT VALUE
	
DEFAULT_POOLS_PER_SCO

DESCRIPTION
	This key specifies the memory pools used by a single SCO link. The
	format of the key is the same as that of PSKEY_PMALLOC_BASE.
	
	This key should not be altered except on specific advice from CSR.
	
	Reducing PSKEY_MAX_SCOS allows the memory claimed by a SCO link to
	be put to other uses (for example, use by VM applications). See the
	description of PSKEY_PMALLOC_BASE for more details.

==============================================================================
NAME
	PSKEY_PMALLOC_APP (0x215f)

SUMMARY
	VM application pmalloc sizes array

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	This key specifies the memory pools created for use by the VM. It is
	only used in firmware which contains a VM. The format of the key is
	the same as that of PSKEY_PMALLOC_BASE.
	
	Altering this key allows users to create pmalloc blocks for use by the
	VM. Typically, these blocks will be larger than those which the
	firmware provides by default. As the total size of the memory
	available to the pmalloc allocator is fixed, altering this key may
	involve altering PSKEY_MAX_ACLS or PSKEY_MAX_SCOS to claim back some
	memory. See the description of PSKEY_PMALLOC_BASE for details.

==============================================================================
NAME
	PSKEY_PMALLOC_EXTRA (0x215e)

SUMMARY
	Extra pmalloc sizes array

TYPE
	uint16[]

DEFAULT VALUE
	
DEFAULT_POOLS_EXTRA

DESCRIPTION
	This key specifies memory pools which are not regarded as essential
	for operation of the firmware. The format of the key is the same as
	that of PSKEY_PMALLOC_BASE.
	
	This key should not be altered except on specific advice from CSR.
	
	See the description of PSKEY_PMALLOC_BASE for details of the memory
	allocator.

==============================================================================
NAME
	PSKEY_DSP0 (0x2258)

SUMMARY
	User DSP configuration data  0

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	Keys PSKEY_DSP0 to PSKEY_DSP49 are for use by host and on-chip
	application- specific code to allocate as it chooses.
	
	PSKEY_DSP0 to PSKEY_DSP24 may only be changed by DFU by placing
	them in the application protected section of the file and signing
	them with the application private key. These pskeys are never
	incldued in DFU files uploaded from a BlueCore. This makes them
	suitable for storing module specific or sensitive information;
	use keys in the range PSKEY_DSP25 to PSKEY_DSP49 if such
	protection is not required.

==============================================================================
NAME
	PSKEY_DSP1 (0x2259)

SUMMARY
	User DSP configuration data  1

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP2 (0x225a)

SUMMARY
	User DSP configuration data  2

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP3 (0x225b)

SUMMARY
	User DSP configuration data  3

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP4 (0x225c)

SUMMARY
	User DSP configuration data  4

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP5 (0x225d)

SUMMARY
	User DSP configuration data  5

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP6 (0x225e)

SUMMARY
	User DSP configuration data  6

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP7 (0x225f)

SUMMARY
	User DSP configuration data  7

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP8 (0x2260)

SUMMARY
	User DSP configuration data  8

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP9 (0x2261)

SUMMARY
	User DSP configuration data  9

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP10 (0x2262)

SUMMARY
	User DSP configuration data 10

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP11 (0x2263)

SUMMARY
	User DSP configuration data 11

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP12 (0x2264)

SUMMARY
	User DSP configuration data 12

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP13 (0x2265)

SUMMARY
	User DSP configuration data 13

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP14 (0x2266)

SUMMARY
	User DSP configuration data 14

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP15 (0x2267)

SUMMARY
	User DSP configuration data 15

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP16 (0x2268)

SUMMARY
	User DSP configuration data 16

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP17 (0x2269)

SUMMARY
	User DSP configuration data 17

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP18 (0x226a)

SUMMARY
	User DSP configuration data 18

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP19 (0x226b)

SUMMARY
	User DSP configuration data 19

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP20 (0x226c)

SUMMARY
	User DSP configuration data 20

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP21 (0x226d)

SUMMARY
	User DSP configuration data 21

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP22 (0x226e)

SUMMARY
	User DSP configuration data 22

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP23 (0x226f)

SUMMARY
	User DSP configuration data 23

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP24 (0x2270)

SUMMARY
	User DSP configuration data 24

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP25 (0x2271)

SUMMARY
	User DSP configuration data 25

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP26 (0x2272)

SUMMARY
	User DSP configuration data 26

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP27 (0x2273)

SUMMARY
	User DSP configuration data 27

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP28 (0x2274)

SUMMARY
	User DSP configuration data 28

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP29 (0x2275)

SUMMARY
	User DSP configuration data 29

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP30 (0x2276)

SUMMARY
	User DSP configuration data 30

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP31 (0x2277)

SUMMARY
	User DSP configuration data 31

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP32 (0x2278)

SUMMARY
	User DSP configuration data 32

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP33 (0x2279)

SUMMARY
	User DSP configuration data 33

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP34 (0x227a)

SUMMARY
	User DSP configuration data 34

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP35 (0x227b)

SUMMARY
	User DSP configuration data 35

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP36 (0x227c)

SUMMARY
	User DSP configuration data 36

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP37 (0x227d)

SUMMARY
	User DSP configuration data 37

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP38 (0x227e)

SUMMARY
	User DSP configuration data 38

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP39 (0x227f)

SUMMARY
	User DSP configuration data 39

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP40 (0x2280)

SUMMARY
	User DSP configuration data 40

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP41 (0x2281)

SUMMARY
	User DSP configuration data 41

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP42 (0x2282)

SUMMARY
	User DSP configuration data 42

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP43 (0x2283)

SUMMARY
	User DSP configuration data 43

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP44 (0x2284)

SUMMARY
	User DSP configuration data 44

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP45 (0x2285)

SUMMARY
	User DSP configuration data 45

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP46 (0x2286)

SUMMARY
	User DSP configuration data 46

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP47 (0x2287)

SUMMARY
	User DSP configuration data 47

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP48 (0x2288)

SUMMARY
	User DSP configuration data 48

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_DSP49 (0x2289)

SUMMARY
	User DSP configuration data 49

TYPE
	uint16[]

DEFAULT VALUE
	<none>

DESCRIPTION
	See the description of PSKEY_DSP0.

==============================================================================
NAME
	PSKEY_HOST_TX_SIGNAL_MODE (0x2433)

SUMMARY
	Specifies additional tx based signalling

TYPE
	uint16

DEFAULT VALUE
	0x0000

DESCRIPTION
	This pskey allows us to specify additional data transmission based 
	signaling to improve interoperability with different host system 
	chipsets. The enumeration defines the different signalling behavior.

==============================================================================
NAME
	PSKEY_HOST_TX_SIGNAL_PIO (0x2434)

SUMMARY
	Specifies the PIO used for the tx signal

TYPE
	uint16

DEFAULT VALUE
	0x0000

DESCRIPTION
	This pskey allows us to specify additional data transmission based 
	signaling to improve interoperability with different host system 
	chipsets. Use this field to specify the PIO you want to use i.e.
	'0' selects PIO 0, and '15' selects PIO 15.

==============================================================================
